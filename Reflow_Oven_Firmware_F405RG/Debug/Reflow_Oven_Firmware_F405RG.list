
Reflow_Oven_Firmware_F405RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00071800  08009378  08009378  00019378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807ab78  0807ab78  000901dc  2**0
                  CONTENTS
  4 .ARM          00000008  0807ab78  0807ab78  0008ab78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807ab80  0807ab80  000901dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0807ab80  0807ab80  0008ab80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807ab94  0807ab94  0008ab94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0807ab98  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  200001e0  0807ad74  000901e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20000824  0807ad74  00090824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000901dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d14  00000000  00000000  0009020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003931  00000000  00000000  000a8f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  000ac858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  000ad948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024252  00000000  00000000  000ae8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000efc6  00000000  00000000  000d2b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8428  00000000  00000000  000e1ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a9f00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005004  00000000  00000000  001a9f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009360 	.word	0x08009360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009360 	.word	0x08009360

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN13ControllerPIDC1Ev>:
 *      Author: jh
 */

#include "ControllerPID.h"

ControllerPID::ControllerPID()
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
        : m_kp(PID_KP_DEFAULT), m_ki(PID_KI_DEFAULT), m_kd(PID_KD_DEFAULT),
          m_target(0), m_maxOutput(PID_MAX_OUTPUT_DEFAULT), m_minOutput(PID_MIN_OUTPUT_DEFAULT),
          m_T(PID_DELAY_MS / 1000.0f), m_initialized(0)
 8000eb0:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <_ZN13ControllerPIDC1Ev+0x58>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_ZN13ControllerPIDC1Ev+0x5c>)
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <_ZN13ControllerPIDC1Ev+0x60>)
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <_ZN13ControllerPIDC1Ev+0x64>)
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ee6:	621a      	str	r2, [r3, #32]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	080093c4 	.word	0x080093c4
 8000f04:	40a00000 	.word	0x40a00000
 8000f08:	3c23d70a 	.word	0x3c23d70a
 8000f0c:	42c80000 	.word	0x42c80000

08000f10 <_ZN13ControllerPID4InitEf>:

void ControllerPID::Init(float controlInput)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	ed87 0a00 	vstr	s0, [r7]
    // letzten Fehler initialisieren
    m_lastError = m_target - controlInput;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f22:	edd7 7a00 	vldr	s15, [r7]
 8000f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	edc3 7a07 	vstr	s15, [r3, #28]

    // Integral-Anteil initialisieren
    m_integral = 0;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28

    m_initialized = 1;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <_ZN13ControllerPID13ClampIntegralEv>:

void ControllerPID::ClampIntegral()
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    float minIntegral, maxIntegral;

    if (m_maxOutput > m_proportional)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f68:	dd0a      	ble.n	8000f80 <_ZN13ControllerPID13ClampIntegralEv+0x34>
        maxIntegral = m_maxOutput - m_proportional;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7a:	edc7 7a02 	vstr	s15, [r7, #8]
 8000f7e:	e002      	b.n	8000f86 <_ZN13ControllerPID13ClampIntegralEv+0x3a>
    else
        maxIntegral = 0.0f;
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]

    if (m_minOutput < m_proportional)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9a:	d50a      	bpl.n	8000fb2 <_ZN13ControllerPID13ClampIntegralEv+0x66>
        minIntegral = m_minOutput - m_proportional;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fac:	edc7 7a03 	vstr	s15, [r7, #12]
 8000fb0:	e002      	b.n	8000fb8 <_ZN13ControllerPID13ClampIntegralEv+0x6c>
    else
        minIntegral = 0.0f;
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]

    if (m_integral > maxIntegral)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000fbe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fca:	d503      	bpl.n	8000fd4 <_ZN13ControllerPID13ClampIntegralEv+0x88>
        m_integral = maxIntegral;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
    else if (m_integral < minIntegral)
        m_integral = minIntegral;
}
 8000fd2:	e00d      	b.n	8000ff0 <_ZN13ControllerPID13ClampIntegralEv+0xa4>
    else if (m_integral < minIntegral)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000fda:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe6:	dc00      	bgt.n	8000fea <_ZN13ControllerPID13ClampIntegralEv+0x9e>
}
 8000fe8:	e002      	b.n	8000ff0 <_ZN13ControllerPID13ClampIntegralEv+0xa4>
        m_integral = minIntegral;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_ZN13ControllerPID6UpdateEf>:

void ControllerPID::Update(float controlInput)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	ed87 0a00 	vstr	s0, [r7]
    if (m_initialized == 0)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800100e:	2b00      	cmp	r3, #0
 8001010:	d104      	bne.n	800101c <_ZN13ControllerPID6UpdateEf+0x20>
    {
        Init(controlInput);
 8001012:	ed97 0a00 	vldr	s0, [r7]
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff7a 	bl	8000f10 <_ZN13ControllerPID4InitEf>
    }

    // Regelfehler aktualisieren
    float error = m_target - controlInput;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001022:	edd7 7a00 	vldr	s15, [r7]
 8001026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102a:	edc7 7a03 	vstr	s15, [r7, #12]

    // Proportional-Anteil aktualisieren
    m_proportional = m_kp * error;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	ed93 7a01 	vldr	s14, [r3, #4]
 8001034:	edd7 7a03 	vldr	s15, [r7, #12]
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Integral-Anteil aktualisieren
    m_integral +=  m_ki * error;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edd3 6a02 	vldr	s13, [r3, #8]
 800104e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    ClampIntegral();
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff73 	bl	8000f4c <_ZN13ControllerPID13ClampIntegralEv>

    // Differenzial-Anteil aktualisieren
    m_derivative = m_kd * (error - m_lastError);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	ed93 7a03 	vldr	s14, [r3, #12]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001072:	edd7 6a03 	vldr	s13, [r7, #12]
 8001076:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800107a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    // Output aktualisieren
    m_output = m_proportional + m_integral + m_derivative;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800109a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Output-Clamping
    if (m_output > m_maxOutput)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80010b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	dd04      	ble.n	80010c4 <_ZN13ControllerPID6UpdateEf+0xc8>
        m_output = m_maxOutput;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
 80010c2:	e00e      	b.n	80010e2 <_ZN13ControllerPID6UpdateEf+0xe6>
    else if (m_output < m_minOutput)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80010d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d503      	bpl.n	80010e2 <_ZN13ControllerPID6UpdateEf+0xe6>
        m_output = m_minOutput;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699a      	ldr	r2, [r3, #24]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	631a      	str	r2, [r3, #48]	; 0x30

    // letzten Fehler aktualisieren
    m_lastError = error;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	61da      	str	r2, [r3, #28]
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_ZNK13ControllerPID9GetOutputEv>:

float ControllerPID::GetOutput() const
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    return m_output;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	ee07 3a90 	vmov	s15, r3
}
 8001100:	eeb0 0a67 	vmov.f32	s0, s15
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZNK13ControllerPID9GetTargetEv>:

float ControllerPID::GetTarget() const
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
    return m_target;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	ee07 3a90 	vmov	s15, r3
}
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZN13ControllerPID9SetTargetEf>:

void ControllerPID::SetTarget(float target)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	ed87 0a00 	vstr	s0, [r7]
    // Soll-Wert überprüfen und setzten
    m_target = target;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	611a      	str	r2, [r3, #16]
    if (m_target > m_maxOutput)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	ed93 7a04 	vldr	s14, [r3, #16]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edd3 7a05 	vldr	s15, [r3, #20]
 800114a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	dd04      	ble.n	800115e <_ZN13ControllerPID9SetTargetEf+0x32>
        m_target = m_maxOutput;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695a      	ldr	r2, [r3, #20]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	611a      	str	r2, [r3, #16]
    else if (m_target < m_minOutput)
        m_target = m_minOutput;
}
 800115c:	e00f      	b.n	800117e <_ZN13ControllerPID9SetTargetEf+0x52>
    else if (m_target < m_minOutput)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	ed93 7a04 	vldr	s14, [r3, #16]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 7a06 	vldr	s15, [r3, #24]
 800116a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001172:	d400      	bmi.n	8001176 <_ZN13ControllerPID9SetTargetEf+0x4a>
}
 8001174:	e003      	b.n	800117e <_ZN13ControllerPID9SetTargetEf+0x52>
        m_target = m_minOutput;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	611a      	str	r2, [r3, #16]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_ZNK13ControllerPID15GetProportionalEv>:
{
    m_kd = kd;
}

float ControllerPID::GetProportional() const
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
    return m_proportional;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	ee07 3a90 	vmov	s15, r3
}
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_ZNK13ControllerPID11GetIntegralEv>:

float ControllerPID::GetIntegral() const
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    return m_integral;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	ee07 3a90 	vmov	s15, r3
}
 80011b8:	eeb0 0a67 	vmov.f32	s0, s15
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_ZNK13ControllerPID13GetDerivativeEv>:

float ControllerPID::GetDerivative() const
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
    return m_derivative;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	ee07 3a90 	vmov	s15, r3
}
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_ZN13ControllerPIDD1Ev>:
    m_kp = PID_KP_DEFAULT;
    m_ki = PID_KI_DEFAULT;
    m_kd = PID_KD_DEFAULT;
}

ControllerPID::~ControllerPID()
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <_ZN13ControllerPIDD1Ev+0x1c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
{
}
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	080093c4 	.word	0x080093c4

08001204 <_ZN13ControllerPIDD0Ev>:
ControllerPID::~ControllerPID()
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
}
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ffe9 	bl	80011e4 <_ZN13ControllerPIDD1Ev>
 8001212:	2138      	movs	r1, #56	; 0x38
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f006 f81f 	bl	8007258 <_ZdlPvj>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZN10img_data_tC1EPKtttttm>:

    uint16_t w;
    uint16_t h;
    uint32_t size;

    img_data_t(const uint16_t * _data, uint16_t _x, uint16_t _y, uint16_t _w, uint16_t _h, uint32_t _size)
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	4611      	mov	r1, r2
 8001230:	461a      	mov	r2, r3
 8001232:	460b      	mov	r3, r1
 8001234:	80fb      	strh	r3, [r7, #6]
 8001236:	4613      	mov	r3, r2
 8001238:	80bb      	strh	r3, [r7, #4]
            : data(_data), x(_x), y(_y), w(_w), h(_h), size(_size)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	88fa      	ldrh	r2, [r7, #6]
 8001244:	809a      	strh	r2, [r3, #4]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	88ba      	ldrh	r2, [r7, #4]
 800124a:	80da      	strh	r2, [r3, #6]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8b3a      	ldrh	r2, [r7, #24]
 8001250:	811a      	strh	r2, [r3, #8]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	8bba      	ldrh	r2, [r7, #28]
 8001256:	815a      	strh	r2, [r3, #10]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6a3a      	ldr	r2, [r7, #32]
 800125c:	60da      	str	r2, [r3, #12]
    {
    }
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <_ZN7ILI9341D1Ev>:
    void FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta,
            uint16_t color);

public:
    ILI9341(uint8_t rotation);
    virtual ~ILI9341()
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    {
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <_ZN7ILI9341D1Ev+0x1c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
    }
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	08025cd4 	.word	0x08025cd4

0800128c <_ZN7ILI9341D0Ev>:
    virtual ~ILI9341()
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    }
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ffe9 	bl	800126c <_ZN7ILI9341D1Ev>
 800129a:	2110      	movs	r1, #16
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f005 ffdb 	bl	8007258 <_ZdlPvj>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZN7ILI9341C1Eh>:
 *      Author: jh
 */

#include "ILI9341.h"

ILI9341::ILI9341(uint8_t rotation)
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <_ZN7ILI9341C1Eh+0x28>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	601a      	str	r2, [r3, #0]
{
    SetRotation(rotation);
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	4619      	mov	r1, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f978 	bl	80015b8 <_ZN7ILI934111SetRotationEh>
}
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	08025cd4 	.word	0x08025cd4

080012d8 <_ZN7ILI934111SendCommandEh>:

void ILI9341::SendCommand(uint8_t command)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
    SELECT();
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <_ZN7ILI934111SendCommandEh+0x50>)
 80012e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ea:	619a      	str	r2, [r3, #24]
    BUS_PORT->BSRR = (uint32_t) (0xFF << BUS_OFFSET) << 16U;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <_ZN7ILI934111SendCommandEh+0x54>)
 80012ee:	f04f 627f 	mov.w	r2, #267386880	; 0xff00000
 80012f2:	619a      	str	r2, [r3, #24]
    BUS_PORT->BSRR = command << BUS_OFFSET;
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	011a      	lsls	r2, r3, #4
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <_ZN7ILI934111SendCommandEh+0x54>)
 80012fa:	619a      	str	r2, [r3, #24]

    COMMAND();
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <_ZN7ILI934111SendCommandEh+0x50>)
 80012fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001302:	619a      	str	r2, [r3, #24]
    WRITE();
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <_ZN7ILI934111SendCommandEh+0x50>)
 8001306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <_ZN7ILI934111SendCommandEh+0x50>)
 800130e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001312:	619a      	str	r2, [r3, #24]
    DESELECT();
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <_ZN7ILI934111SendCommandEh+0x50>)
 8001316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800131a:	619a      	str	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40020000 	.word	0x40020000
 800132c:	40020800 	.word	0x40020800

08001330 <_ZN7ILI93418SendDataEh>:

void ILI9341::SendData(uint8_t data)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
    SELECT();
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <_ZN7ILI93418SendDataEh+0x50>)
 800133e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001342:	619a      	str	r2, [r3, #24]
    BUS_PORT->BSRR = (uint32_t) (0xFF << BUS_OFFSET) << 16U;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <_ZN7ILI93418SendDataEh+0x54>)
 8001346:	f04f 627f 	mov.w	r2, #267386880	; 0xff00000
 800134a:	619a      	str	r2, [r3, #24]
    BUS_PORT->BSRR = data << BUS_OFFSET;
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	011a      	lsls	r2, r3, #4
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <_ZN7ILI93418SendDataEh+0x54>)
 8001352:	619a      	str	r2, [r3, #24]

    DATA();
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <_ZN7ILI93418SendDataEh+0x50>)
 8001356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135a:	619a      	str	r2, [r3, #24]
    WRITE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_ZN7ILI93418SendDataEh+0x50>)
 800135e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001362:	619a      	str	r2, [r3, #24]
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <_ZN7ILI93418SendDataEh+0x50>)
 8001366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136a:	619a      	str	r2, [r3, #24]
    DESELECT();
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <_ZN7ILI93418SendDataEh+0x50>)
 800136e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001372:	619a      	str	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40020000 	.word	0x40020000
 8001384:	40020800 	.word	0x40020800

08001388 <_ZN7ILI934117SetCursorPositionEtttt>:

void ILI9341::SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	4608      	mov	r0, r1
 8001392:	4611      	mov	r1, r2
 8001394:	461a      	mov	r2, r3
 8001396:	4603      	mov	r3, r0
 8001398:	817b      	strh	r3, [r7, #10]
 800139a:	460b      	mov	r3, r1
 800139c:	813b      	strh	r3, [r7, #8]
 800139e:	4613      	mov	r3, r2
 80013a0:	80fb      	strh	r3, [r7, #6]
    SendCommand(ILI9341_COLUMN_ADDR);
 80013a2:	212a      	movs	r1, #42	; 0x2a
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f7ff ff97 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(x1 >> 8);
 80013aa:	897b      	ldrh	r3, [r7, #10]
 80013ac:	121b      	asrs	r3, r3, #8
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff ffbc 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(x1 & 0xFF);
 80013b8:	897b      	ldrh	r3, [r7, #10]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7ff ffb6 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(x2 >> 8);
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	121b      	asrs	r3, r3, #8
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4619      	mov	r1, r3
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff ffaf 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(x2 & 0xFF);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f7ff ffa9 	bl	8001330 <_ZN7ILI93418SendDataEh>

    SendCommand(ILI9341_PAGE_ADDR);
 80013de:	212b      	movs	r1, #43	; 0x2b
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff ff79 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(y1 >> 8);
 80013e6:	893b      	ldrh	r3, [r7, #8]
 80013e8:	121b      	asrs	r3, r3, #8
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4619      	mov	r1, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff ff9e 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(y1 & 0xFF);
 80013f4:	893b      	ldrh	r3, [r7, #8]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff ff98 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(y2 >> 8);
 8001400:	8b3b      	ldrh	r3, [r7, #24]
 8001402:	121b      	asrs	r3, r3, #8
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4619      	mov	r1, r3
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7ff ff91 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(y2 & 0xFF);
 800140e:	8b3b      	ldrh	r3, [r7, #24]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff ff8b 	bl	8001330 <_ZN7ILI93418SendDataEh>

    SendCommand(ILI9341_GRAM);
 800141a:	212c      	movs	r1, #44	; 0x2c
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7ff ff5b 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_ZN7ILI93414InitEv>:

void ILI9341::Init()
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
    SendCommand(ILI9341_RESET);    // software reset comand
 8001432:	2101      	movs	r1, #1
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff4f 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    HAL_Delay(100);
 800143a:	2064      	movs	r0, #100	; 0x64
 800143c:	f003 fbda 	bl	8004bf4 <HAL_Delay>
    SendCommand(ILI9341_DISPLAY_OFF);    // display off
 8001440:	2128      	movs	r1, #40	; 0x28
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff48 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    //------------power control------------------------------
    SendCommand(ILI9341_POWER1);    // power control
 8001448:	21c0      	movs	r1, #192	; 0xc0
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff44 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(0x26);    // GVDD = 4.75v
 8001450:	2126      	movs	r1, #38	; 0x26
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff6c 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendCommand(ILI9341_POWER2);    // power control
 8001458:	21c1      	movs	r1, #193	; 0xc1
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff3c 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(0x01);    // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 8001460:	2101      	movs	r1, #1
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff64 	bl	8001330 <_ZN7ILI93418SendDataEh>
    //--------------VCOM-------------------------------------
    SendCommand(ILI9341_VCOM1);    // vcom control
 8001468:	21c5      	movs	r1, #197	; 0xc5
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff34 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(0x35);    // Set the VCOMH voltage (0x35 = 4.025v)
 8001470:	2135      	movs	r1, #53	; 0x35
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff5c 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(0x3e);    // Set the VCOML voltage (0x3E = -0.950v)
 8001478:	213e      	movs	r1, #62	; 0x3e
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff58 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendCommand(ILI9341_VCOM2);    // vcom control
 8001480:	21c7      	movs	r1, #199	; 0xc7
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff28 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(0xbe);
 8001488:	21be      	movs	r1, #190	; 0xbe
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff50 	bl	8001330 <_ZN7ILI93418SendDataEh>

    //------------memory access control------------------------
    SendCommand(ILI9341_MAC);    // memory access control
 8001490:	2136      	movs	r1, #54	; 0x36
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff20 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(0x48);
 8001498:	2148      	movs	r1, #72	; 0x48
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff48 	bl	8001330 <_ZN7ILI93418SendDataEh>

    SendCommand(ILI9341_PIXEL_FORMAT);    // pixel format set
 80014a0:	213a      	movs	r1, #58	; 0x3a
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff18 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(0x55);    // 16bit /pixel
 80014a8:	2155      	movs	r1, #85	; 0x55
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff40 	bl	8001330 <_ZN7ILI93418SendDataEh>

    SendCommand(ILI9341_FRC);
 80014b0:	21b1      	movs	r1, #177	; 0xb1
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff10 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(0);
 80014b8:	2100      	movs	r1, #0
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff38 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(0x1F);
 80014c0:	211f      	movs	r1, #31
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff34 	bl	8001330 <_ZN7ILI93418SendDataEh>
    //-------------ddram ----------------------------
    SendCommand(ILI9341_COLUMN_ADDR);    // column set
 80014c8:	212a      	movs	r1, #42	; 0x2a
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff04 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(0x00);    // x0_HIGH---0
 80014d0:	2100      	movs	r1, #0
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff2c 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(0x00);    // x0_LOW----0
 80014d8:	2100      	movs	r1, #0
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ff28 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(0x00);    // x1_HIGH---240
 80014e0:	2100      	movs	r1, #0
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ff24 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(0xEF);    // x1_LOW----240
 80014e8:	21ef      	movs	r1, #239	; 0xef
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff20 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendCommand(ILI9341_PAGE_ADDR);    // page address set
 80014f0:	212b      	movs	r1, #43	; 0x2b
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fef0 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    SendData(0x00);    // y0_HIGH---0
 80014f8:	2100      	movs	r1, #0
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ff18 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(0x00);    // y0_LOW----0
 8001500:	2100      	movs	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff14 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(0x01);    // y1_HIGH---320
 8001508:	2101      	movs	r1, #1
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ff10 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(0x3F);    // y1_LOW----320
 8001510:	213f      	movs	r1, #63	; 0x3f
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ff0c 	bl	8001330 <_ZN7ILI93418SendDataEh>

    SendCommand(ILI9341_TEARING_OFF);    // tearing effect off
 8001518:	2134      	movs	r1, #52	; 0x34
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fedc 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
    //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
    SendCommand(ILI9341_Entry_Mode_Set);    // entry mode set
 8001520:	21b7      	movs	r1, #183	; 0xb7
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fed8 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    // Deep Standby Mode: OFF
    // Set the output level of gate driver G1-G320: Normal display
    // Low voltage detection: Disable
    SendData(0x07);
 8001528:	2107      	movs	r1, #7
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff00 	bl	8001330 <_ZN7ILI93418SendDataEh>
    //-----------------display------------------------
    SendCommand(ILI9341_DFC);    // display function control
 8001530:	21b6      	movs	r1, #182	; 0xb6
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fed0 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    //Set the scan mode in non-display area
    //Determine source/VCOM output in a non-display area in the partial display mode
    SendData(0x0a);
 8001538:	210a      	movs	r1, #10
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fef8 	bl	8001330 <_ZN7ILI93418SendDataEh>
    //Select whether the liquid crystal type is normally white type or normally black type
    //Sets the direction of scan by the gate driver in the range determined by SCN and NL
    //Select the shift direction of outputs from the source driver
    //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
    //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
    SendData(0x82);
 8001540:	2182      	movs	r1, #130	; 0x82
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fef4 	bl	8001330 <_ZN7ILI93418SendDataEh>
    // Sets the number of lines to drive the LCD at an interval of 8 lines
    SendData(0x27);
 8001548:	2127      	movs	r1, #39	; 0x27
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fef0 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(0x00);    // clock divisor
 8001550:	2100      	movs	r1, #0
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff feec 	bl	8001330 <_ZN7ILI93418SendDataEh>

    SendCommand(ILI9341_SLEEP_OUT);    // sleep out
 8001558:	2111      	movs	r1, #17
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff febc 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    HAL_Delay(100);
 8001560:	2064      	movs	r0, #100	; 0x64
 8001562:	f003 fb47 	bl	8004bf4 <HAL_Delay>
    SendCommand(ILI9341_DISPLAY_ON);    // display on
 8001566:	2129      	movs	r1, #41	; 0x29
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff feb5 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    HAL_Delay(100);
 800156e:	2064      	movs	r0, #100	; 0x64
 8001570:	f003 fb40 	bl	8004bf4 <HAL_Delay>
    SendCommand(ILI9341_GRAM);    // memory write
 8001574:	212c      	movs	r1, #44	; 0x2c
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff feae 	bl	80012d8 <_ZN7ILI934111SendCommandEh>
    HAL_Delay(5);
 800157c:	2005      	movs	r0, #5
 800157e:	f003 fb39 	bl	8004bf4 <HAL_Delay>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <_ZN7ILI93415ResetEv>:

void ILI9341::Reset()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    RST_PORT->BSRR = (uint32_t) RST_PIN << 16U;    // RST Low
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_ZN7ILI93415ResetEv+0x28>)
 8001596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800159a:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 800159c:	2064      	movs	r0, #100	; 0x64
 800159e:	f003 fb29 	bl	8004bf4 <HAL_Delay>
    RST_PORT->BSRR = RST_PIN;    // RST High
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <_ZN7ILI93415ResetEv+0x28>)
 80015a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40020000 	.word	0x40020000

080015b8 <_ZN7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t rotation)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
    m_rotation = rotation % 4;
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	711a      	strb	r2, [r3, #4]

    SendCommand(ILI9341_MAC);
 80015d0:	2136      	movs	r1, #54	; 0x36
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fe80 	bl	80012d8 <_ZN7ILI934111SendCommandEh>

    switch (m_rotation) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	791b      	ldrb	r3, [r3, #4]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d83b      	bhi.n	8001658 <_ZN7ILI934111SetRotationEh+0xa0>
 80015e0:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <_ZN7ILI934111SetRotationEh+0x30>)
 80015e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e6:	bf00      	nop
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	08001611 	.word	0x08001611
 80015f0:	08001629 	.word	0x08001629
 80015f4:	08001641 	.word	0x08001641
        case 0:
            SendData(0x40 | 0x08);
 80015f8:	2148      	movs	r1, #72	; 0x48
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fe98 	bl	8001330 <_ZN7ILI93418SendDataEh>
            m_width = 240;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	22f0      	movs	r2, #240	; 0xf0
 8001604:	80da      	strh	r2, [r3, #6]
            m_height = 320;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800160c:	811a      	strh	r2, [r3, #8]
            break;
 800160e:	e023      	b.n	8001658 <_ZN7ILI934111SetRotationEh+0xa0>
        case 1:
            SendData(0x20 | 0x08);
 8001610:	2128      	movs	r1, #40	; 0x28
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fe8c 	bl	8001330 <_ZN7ILI93418SendDataEh>
            m_width = 320;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800161e:	80da      	strh	r2, [r3, #6]
            m_height = 240;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	22f0      	movs	r2, #240	; 0xf0
 8001624:	811a      	strh	r2, [r3, #8]
            break;
 8001626:	e017      	b.n	8001658 <_ZN7ILI934111SetRotationEh+0xa0>
        case 2:
            SendData(0x80 | 0x08);
 8001628:	2188      	movs	r1, #136	; 0x88
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fe80 	bl	8001330 <_ZN7ILI93418SendDataEh>
            m_width = 240;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	22f0      	movs	r2, #240	; 0xf0
 8001634:	80da      	strh	r2, [r3, #6]
            m_height = 320;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800163c:	811a      	strh	r2, [r3, #8]
            break;
 800163e:	e00b      	b.n	8001658 <_ZN7ILI934111SetRotationEh+0xa0>
        case 3:
            SendData(0x40 | 0x80 | 0x20 | 0x08);
 8001640:	21e8      	movs	r1, #232	; 0xe8
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fe74 	bl	8001330 <_ZN7ILI93418SendDataEh>
            m_width = 320;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800164e:	80da      	strh	r2, [r3, #6]
            m_height = 240;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	22f0      	movs	r2, #240	; 0xf0
 8001654:	811a      	strh	r2, [r3, #8]
            break;
 8001656:	bf00      	nop
    }
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_ZN7ILI93419DrawPixelEttt>:

void ILI9341::DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af02      	add	r7, sp, #8
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	4608      	mov	r0, r1
 800166a:	4611      	mov	r1, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4603      	mov	r3, r0
 8001670:	817b      	strh	r3, [r7, #10]
 8001672:	460b      	mov	r3, r1
 8001674:	813b      	strh	r3, [r7, #8]
 8001676:	4613      	mov	r3, r2
 8001678:	80fb      	strh	r3, [r7, #6]
    SetCursorPosition(x, y, x, y);
 800167a:	8978      	ldrh	r0, [r7, #10]
 800167c:	893a      	ldrh	r2, [r7, #8]
 800167e:	8979      	ldrh	r1, [r7, #10]
 8001680:	893b      	ldrh	r3, [r7, #8]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4603      	mov	r3, r0
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7ff fe7e 	bl	8001388 <_ZN7ILI934117SetCursorPositionEtttt>
    SendData(color >> 8);
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	121b      	asrs	r3, r3, #8
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f7ff fe4b 	bl	8001330 <_ZN7ILI93418SendDataEh>
    SendData(color & 0xFF);
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4619      	mov	r1, r3
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7ff fe45 	bl	8001330 <_ZN7ILI93418SendDataEh>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_ZN7ILI93414FillEt>:

void ILI9341::Fill(uint16_t color)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af02      	add	r7, sp, #8
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	807b      	strh	r3, [r7, #2]
    FillRect(0, 0, m_width - 1, m_height - 1, color);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	88db      	ldrh	r3, [r3, #6]
 80016be:	3b01      	subs	r3, #1
 80016c0:	b299      	uxth	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	891b      	ldrh	r3, [r3, #8]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	9201      	str	r2, [sp, #4]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	460b      	mov	r3, r1
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f84d 	bl	8001776 <_ZN7ILI93418FillRectEttttt>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZN7ILI93418DrawRectEttttt>:

void ILI9341::DrawRect(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	4608      	mov	r0, r1
 80016ee:	4611      	mov	r1, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4603      	mov	r3, r0
 80016f4:	817b      	strh	r3, [r7, #10]
 80016f6:	460b      	mov	r3, r1
 80016f8:	813b      	strh	r3, [r7, #8]
 80016fa:	4613      	mov	r3, r2
 80016fc:	80fb      	strh	r3, [r7, #6]
    uint16_t w = x1 - x0;
 80016fe:	88fa      	ldrh	r2, [r7, #6]
 8001700:	897b      	ldrh	r3, [r7, #10]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	82fb      	strh	r3, [r7, #22]
    uint16_t h = y1 - y0;
 8001706:	8c3a      	ldrh	r2, [r7, #32]
 8001708:	893b      	ldrh	r3, [r7, #8]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	82bb      	strh	r3, [r7, #20]

    DrawFastHLine(x0, y0, w, color);
 800170e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001712:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001716:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800171a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4603      	mov	r3, r0
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f869 	bl	80017f8 <_ZN7ILI934113DrawFastHLineEssst>
    DrawFastHLine(x0, y1, w, color);
 8001726:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800172a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800172e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8001732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4603      	mov	r3, r0
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 f85d 	bl	80017f8 <_ZN7ILI934113DrawFastHLineEssst>
    DrawFastVLine(x0, y0, h, color);
 800173e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001742:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001746:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800174a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	4603      	mov	r3, r0
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f886 	bl	8001862 <_ZN7ILI934113DrawFastVLineEssst>
    DrawFastVLine(x1, y0, h, color);
 8001756:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800175a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800175e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8001762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	4603      	mov	r3, r0
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 f87a 	bl	8001862 <_ZN7ILI934113DrawFastVLineEssst>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <_ZN7ILI93418FillRectEttttt>:

void ILI9341::FillRect(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b088      	sub	sp, #32
 800177a:	af02      	add	r7, sp, #8
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	4608      	mov	r0, r1
 8001780:	4611      	mov	r1, r2
 8001782:	461a      	mov	r2, r3
 8001784:	4603      	mov	r3, r0
 8001786:	817b      	strh	r3, [r7, #10]
 8001788:	460b      	mov	r3, r1
 800178a:	813b      	strh	r3, [r7, #8]
 800178c:	4613      	mov	r3, r2
 800178e:	80fb      	strh	r3, [r7, #6]
    uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	897b      	ldrh	r3, [r7, #10]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	8c3a      	ldrh	r2, [r7, #32]
 800179a:	1c51      	adds	r1, r2, #1
 800179c:	893a      	ldrh	r2, [r7, #8]
 800179e:	1a8a      	subs	r2, r1, r2
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]

    if (n > m_pixelCount)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d902      	bls.n	80017b6 <_ZN7ILI93418FillRectEttttt+0x40>
        n = m_pixelCount;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	617b      	str	r3, [r7, #20]

    SetCursorPosition(x0, y0, x1, y1);
 80017b6:	88f8      	ldrh	r0, [r7, #6]
 80017b8:	893a      	ldrh	r2, [r7, #8]
 80017ba:	8979      	ldrh	r1, [r7, #10]
 80017bc:	8c3b      	ldrh	r3, [r7, #32]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	4603      	mov	r3, r0
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f7ff fde0 	bl	8001388 <_ZN7ILI934117SetCursorPositionEtttt>

    while (n)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d010      	beq.n	80017f0 <_ZN7ILI93418FillRectEttttt+0x7a>
    {
        n--;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
        SendData(color >> 8);
 80017d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d6:	121b      	asrs	r3, r3, #8
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fda7 	bl	8001330 <_ZN7ILI93418SendDataEh>
        SendData(color & 0xff);
 80017e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	4619      	mov	r1, r3
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f7ff fda1 	bl	8001330 <_ZN7ILI93418SendDataEh>
    while (n)
 80017ee:	e7eb      	b.n	80017c8 <_ZN7ILI93418FillRectEttttt+0x52>
    }
}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZN7ILI934113DrawFastHLineEssst>:
void ILI9341::DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
}

void ILI9341::DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	4608      	mov	r0, r1
 8001802:	4611      	mov	r1, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4603      	mov	r3, r0
 8001808:	817b      	strh	r3, [r7, #10]
 800180a:	460b      	mov	r3, r1
 800180c:	813b      	strh	r3, [r7, #8]
 800180e:	4613      	mov	r3, r2
 8001810:	80fb      	strh	r3, [r7, #6]
    SetCursorPosition(x, y, x + w, y);
 8001812:	8979      	ldrh	r1, [r7, #10]
 8001814:	8938      	ldrh	r0, [r7, #8]
 8001816:	897a      	ldrh	r2, [r7, #10]
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	4413      	add	r3, r2
 800181c:	b29a      	uxth	r2, r3
 800181e:	893b      	ldrh	r3, [r7, #8]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	4613      	mov	r3, r2
 8001824:	4602      	mov	r2, r0
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff fdae 	bl	8001388 <_ZN7ILI934117SetCursorPositionEtttt>

    uint32_t n = w;
 800182c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001830:	617b      	str	r3, [r7, #20]

    while (n)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d010      	beq.n	800185a <_ZN7ILI934113DrawFastHLineEssst+0x62>
    {
        n--;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3b01      	subs	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
        SendData(color >> 8);
 800183e:	8c3b      	ldrh	r3, [r7, #32]
 8001840:	121b      	asrs	r3, r3, #8
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4619      	mov	r1, r3
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff fd72 	bl	8001330 <_ZN7ILI93418SendDataEh>
        SendData(color & 0xff);
 800184c:	8c3b      	ldrh	r3, [r7, #32]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4619      	mov	r1, r3
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff fd6c 	bl	8001330 <_ZN7ILI93418SendDataEh>
    while (n)
 8001858:	e7eb      	b.n	8001832 <_ZN7ILI934113DrawFastHLineEssst+0x3a>
    }
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_ZN7ILI934113DrawFastVLineEssst>:

void ILI9341::DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001862:	b590      	push	{r4, r7, lr}
 8001864:	b089      	sub	sp, #36	; 0x24
 8001866:	af02      	add	r7, sp, #8
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	4608      	mov	r0, r1
 800186c:	4611      	mov	r1, r2
 800186e:	461a      	mov	r2, r3
 8001870:	4603      	mov	r3, r0
 8001872:	817b      	strh	r3, [r7, #10]
 8001874:	460b      	mov	r3, r1
 8001876:	813b      	strh	r3, [r7, #8]
 8001878:	4613      	mov	r3, r2
 800187a:	80fb      	strh	r3, [r7, #6]
    SetCursorPosition(x, y, x, y + h);
 800187c:	8979      	ldrh	r1, [r7, #10]
 800187e:	8938      	ldrh	r0, [r7, #8]
 8001880:	897c      	ldrh	r4, [r7, #10]
 8001882:	893a      	ldrh	r2, [r7, #8]
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	4413      	add	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	4623      	mov	r3, r4
 800188e:	4602      	mov	r2, r0
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff fd79 	bl	8001388 <_ZN7ILI934117SetCursorPositionEtttt>

    uint32_t n = h;
 8001896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189a:	617b      	str	r3, [r7, #20]

    while (n)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d010      	beq.n	80018c4 <_ZN7ILI934113DrawFastVLineEssst+0x62>
    {
        n--;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
        SendData(color >> 8);
 80018a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018aa:	121b      	asrs	r3, r3, #8
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff fd3d 	bl	8001330 <_ZN7ILI93418SendDataEh>
        SendData(color & 0xff);
 80018b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff fd37 	bl	8001330 <_ZN7ILI93418SendDataEh>
    while (n)
 80018c2:	e7eb      	b.n	800189c <_ZN7ILI934113DrawFastVLineEssst+0x3a>
    }
}
 80018c4:	bf00      	nop
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}

080018cc <_ZN7ILI93418DrawCharEsshtth>:
        uint16_t color)
{
}

void ILI9341::DrawChar(int16_t x, int16_t y, uint8_t c, uint16_t color, uint16_t bg, uint8_t size)
{
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	817b      	strh	r3, [r7, #10]
 80018de:	460b      	mov	r3, r1
 80018e0:	813b      	strh	r3, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	71fb      	strb	r3, [r7, #7]
    if ((x >= m_width) ||    // Clip right
 80018e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	88d2      	ldrh	r2, [r2, #6]
 80018ee:	4293      	cmp	r3, r2
 80018f0:	f280 8114 	bge.w	8001b1c <_ZN7ILI93418DrawCharEsshtth+0x250>
            (y >= m_height) ||    // Clip bottom
 80018f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	8912      	ldrh	r2, [r2, #8]
    if ((x >= m_width) ||    // Clip right
 80018fc:	4293      	cmp	r3, r2
 80018fe:	f280 810d 	bge.w	8001b1c <_ZN7ILI93418DrawCharEsshtth+0x250>
            ((x + 6 * size - 1) < 0) ||    // Clip left
 8001902:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001906:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	440b      	add	r3, r1
 8001914:	3b01      	subs	r3, #1
            (y >= m_height) ||    // Clip bottom
 8001916:	2b00      	cmp	r3, #0
 8001918:	f2c0 8100 	blt.w	8001b1c <_ZN7ILI93418DrawCharEsshtth+0x250>
            ((y + 8 * size - 1) < 0))    // Clip top
 800191c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001920:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	3b01      	subs	r3, #1
            ((x + 6 * size - 1) < 0) ||    // Clip left
 800192a:	2b00      	cmp	r3, #0
 800192c:	f2c0 80f6 	blt.w	8001b1c <_ZN7ILI93418DrawCharEsshtth+0x250>
        return;

    if (c >= 176)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2baf      	cmp	r3, #175	; 0xaf
 8001934:	d902      	bls.n	800193c <_ZN7ILI93418DrawCharEsshtth+0x70>
        c++;    // Handle 'classic' charset behavior
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	3301      	adds	r3, #1
 800193a:	71fb      	strb	r3, [r7, #7]

    for (int8_t i = 0; i < CHAR_WIDTH; i++)
 800193c:	2300      	movs	r3, #0
 800193e:	75fb      	strb	r3, [r7, #23]
 8001940:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001944:	2b05      	cmp	r3, #5
 8001946:	f300 80ea 	bgt.w	8001b1e <_ZN7ILI93418DrawCharEsshtth+0x252>
    {
        uint8_t line;
        if (i == 5)
 800194a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d102      	bne.n	8001958 <_ZN7ILI93418DrawCharEsshtth+0x8c>
            line = 0x0;
 8001952:	2300      	movs	r3, #0
 8001954:	75bb      	strb	r3, [r7, #22]
 8001956:	e00b      	b.n	8001970 <_ZN7ILI93418DrawCharEsshtth+0xa4>
        else
            line = pgm_read_byte(font1 + (c * 5) + i);
 8001958:	79fa      	ldrb	r2, [r7, #7]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	461a      	mov	r2, r3
 8001962:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001966:	4413      	add	r3, r2
 8001968:	4a6e      	ldr	r2, [pc, #440]	; (8001b24 <_ZN7ILI93418DrawCharEsshtth+0x258>)
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	75bb      	strb	r3, [r7, #22]
        for (int8_t j = 0; j < CHAR_HEIGHT; j++)
 8001970:	2300      	movs	r3, #0
 8001972:	757b      	strb	r3, [r7, #21]
 8001974:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001978:	2b07      	cmp	r3, #7
 800197a:	f300 80c8 	bgt.w	8001b0e <_ZN7ILI93418DrawCharEsshtth+0x242>
        {
            if (line & 0x1)
 800197e:	7dbb      	ldrb	r3, [r7, #22]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d05a      	beq.n	8001a3e <_ZN7ILI93418DrawCharEsshtth+0x172>
            {
                if (size == 1)    // default size
 8001988:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800198c:	2b01      	cmp	r3, #1
 800198e:	d110      	bne.n	80019b2 <_ZN7ILI93418DrawCharEsshtth+0xe6>
                    DrawPixel(x + i, y + j, color);
 8001990:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001994:	b29a      	uxth	r2, r3
 8001996:	897b      	ldrh	r3, [r7, #10]
 8001998:	4413      	add	r3, r2
 800199a:	b299      	uxth	r1, r3
 800199c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	893b      	ldrh	r3, [r7, #8]
 80019a4:	4413      	add	r3, r2
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff fe58 	bl	8001660 <_ZN7ILI93419DrawPixelEttt>
 80019b0:	e0a3      	b.n	8001afa <_ZN7ILI93418DrawCharEsshtth+0x22e>
                else
                {    // big size
                    FillRect(x + (i * size), y + (j * size), size + x + (i * size),
 80019b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019bc:	b29b      	uxth	r3, r3
 80019be:	fb12 f303 	smulbb	r3, r2, r3
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	897b      	ldrh	r3, [r7, #10]
 80019c6:	4413      	add	r3, r2
 80019c8:	b298      	uxth	r0, r3
 80019ca:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	fb12 f303 	smulbb	r3, r2, r3
 80019da:	b29a      	uxth	r2, r3
 80019dc:	893b      	ldrh	r3, [r7, #8]
 80019de:	4413      	add	r3, r2
 80019e0:	b29c      	uxth	r4, r3
 80019e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	897b      	ldrh	r3, [r7, #10]
 80019ea:	4413      	add	r3, r2
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019f2:	b299      	uxth	r1, r3
 80019f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	fb11 f303 	smulbb	r3, r1, r3
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	b29d      	uxth	r5, r3
                            size + 1 + y + (j * size), color);
 8001a04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	893b      	ldrh	r3, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a14:	b299      	uxth	r1, r3
 8001a16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	fb11 f303 	smulbb	r3, r1, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	b29b      	uxth	r3, r3
                    FillRect(x + (i * size), y + (j * size), size + x + (i * size),
 8001a26:	3301      	adds	r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a2c:	9201      	str	r2, [sp, #4]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	462b      	mov	r3, r5
 8001a32:	4622      	mov	r2, r4
 8001a34:	4601      	mov	r1, r0
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f7ff fe9d 	bl	8001776 <_ZN7ILI93418FillRectEttttt>
 8001a3c:	e05d      	b.n	8001afa <_ZN7ILI93418DrawCharEsshtth+0x22e>
                }
            }
            else if (bg != color)
 8001a3e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d059      	beq.n	8001afa <_ZN7ILI93418DrawCharEsshtth+0x22e>
            {
                if (size == 1)    // default size
 8001a46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d110      	bne.n	8001a70 <_ZN7ILI93418DrawCharEsshtth+0x1a4>
                    DrawPixel(x + i, y + j, bg);
 8001a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	897b      	ldrh	r3, [r7, #10]
 8001a56:	4413      	add	r3, r2
 8001a58:	b299      	uxth	r1, r3
 8001a5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	893b      	ldrh	r3, [r7, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff fdf9 	bl	8001660 <_ZN7ILI93419DrawPixelEttt>
 8001a6e:	e044      	b.n	8001afa <_ZN7ILI93418DrawCharEsshtth+0x22e>
                else
                {    // big size
                    FillRect(x + i * size, y + j * size, size + x + i * size,
 8001a70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	fb12 f303 	smulbb	r3, r2, r3
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	897b      	ldrh	r3, [r7, #10]
 8001a84:	4413      	add	r3, r2
 8001a86:	b298      	uxth	r0, r3
 8001a88:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	fb12 f303 	smulbb	r3, r2, r3
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	893b      	ldrh	r3, [r7, #8]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b29c      	uxth	r4, r3
 8001aa0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	897b      	ldrh	r3, [r7, #10]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ab0:	b299      	uxth	r1, r3
 8001ab2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	fb11 f303 	smulbb	r3, r1, r3
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29d      	uxth	r5, r3
                            size + 1 + y + j * size, bg);
 8001ac2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	893b      	ldrh	r3, [r7, #8]
 8001aca:	4413      	add	r3, r2
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001ad2:	b299      	uxth	r1, r3
 8001ad4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	fb11 f303 	smulbb	r3, r1, r3
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
                    FillRect(x + i * size, y + j * size, size + x + i * size,
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001aea:	9201      	str	r2, [sp, #4]
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	462b      	mov	r3, r5
 8001af0:	4622      	mov	r2, r4
 8001af2:	4601      	mov	r1, r0
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff fe3e 	bl	8001776 <_ZN7ILI93418FillRectEttttt>
                }
            }
            line >>= 1;
 8001afa:	7dbb      	ldrb	r3, [r7, #22]
 8001afc:	105b      	asrs	r3, r3, #1
 8001afe:	75bb      	strb	r3, [r7, #22]
        for (int8_t j = 0; j < CHAR_HEIGHT; j++)
 8001b00:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	757b      	strb	r3, [r7, #21]
 8001b0c:	e732      	b.n	8001974 <_ZN7ILI93418DrawCharEsshtth+0xa8>
    for (int8_t i = 0; i < CHAR_WIDTH; i++)
 8001b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	3301      	adds	r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	75fb      	strb	r3, [r7, #23]
 8001b1a:	e711      	b.n	8001940 <_ZN7ILI93418DrawCharEsshtth+0x74>
        return;
 8001b1c:	bf00      	nop
        }
    }
}
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bdb0      	pop	{r4, r5, r7, pc}
 8001b24:	080093cc 	.word	0x080093cc

08001b28 <_ZNK7ILI93415WidthEv>:

uint16_t ILI9341::Width() const
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    return m_width;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	88db      	ldrh	r3, [r3, #6]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_ZNK7ILI93416HeightEv>:

uint16_t ILI9341::Height() const
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    return m_height;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	891b      	ldrh	r3, [r3, #8]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_ZN7ILI93415PrintEP7label_t>:
        DrawChar(x + (offset * i), y, text[i], color, bg, size);
    }
}

void ILI9341::Print(label_t *label)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
    int16_t offset = label->size * CHAR_WIDTH;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	8a9b      	ldrh	r3, [r3, #20]
 8001b66:	461a      	mov	r2, r3
 8001b68:	0052      	lsls	r2, r2, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	81bb      	strh	r3, [r7, #12]

    for (uint16_t i = 0; i < 40 && label->str[i] != NULL; i++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	81fb      	strh	r3, [r7, #14]
 8001b76:	89fb      	ldrh	r3, [r7, #14]
 8001b78:	2b27      	cmp	r3, #39	; 0x27
 8001b7a:	d828      	bhi.n	8001bce <_ZN7ILI93415PrintEP7label_t+0x76>
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d023      	beq.n	8001bce <_ZN7ILI93415PrintEP7label_t+0x76>
    {
        DrawChar(label->x + (offset * i), label->y, label->str[i], label->color_fg, label->color_bg,
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	8ada      	ldrh	r2, [r3, #22]
 8001b8a:	89bb      	ldrh	r3, [r7, #12]
 8001b8c:	89f9      	ldrh	r1, [r7, #14]
 8001b8e:	fb11 f303 	smulbb	r3, r1, r3
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	b218      	sxth	r0, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	8b1b      	ldrh	r3, [r3, #24]
 8001b9e:	b21c      	sxth	r4, r3
 8001ba0:	89fb      	ldrh	r3, [r7, #14]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	5cd5      	ldrb	r5, [r2, r3]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	8b5b      	ldrh	r3, [r3, #26]
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	8b92      	ldrh	r2, [r2, #28]
                label->size);
 8001bae:	6839      	ldr	r1, [r7, #0]
 8001bb0:	8a89      	ldrh	r1, [r1, #20]
        DrawChar(label->x + (offset * i), label->y, label->str[i], label->color_fg, label->color_bg,
 8001bb2:	b2c9      	uxtb	r1, r1
 8001bb4:	9102      	str	r1, [sp, #8]
 8001bb6:	9201      	str	r2, [sp, #4]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	462b      	mov	r3, r5
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fe83 	bl	80018cc <_ZN7ILI93418DrawCharEsshtth>
    for (uint16_t i = 0; i < 40 && label->str[i] != NULL; i++)
 8001bc6:	89fb      	ldrh	r3, [r7, #14]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	81fb      	strh	r3, [r7, #14]
 8001bcc:	e7d3      	b.n	8001b76 <_ZN7ILI93415PrintEP7label_t+0x1e>
    }
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bdb0      	pop	{r4, r5, r7, pc}

08001bd6 <_ZN7ILI93415ImageEP10img_data_t>:
        SendData(data[i] & 0xff);
    }
}

void ILI9341::Image(img_data_t *img)
{
 8001bd6:	b590      	push	{r4, r7, lr}
 8001bd8:	b087      	sub	sp, #28
 8001bda:	af02      	add	r7, sp, #8
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
    SetCursorPosition(img->x, img->y, img->w + img->x - 1, img->h + img->y - 1);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	8899      	ldrh	r1, [r3, #4]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	88d8      	ldrh	r0, [r3, #6]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	891a      	ldrh	r2, [r3, #8]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	889b      	ldrh	r3, [r3, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29c      	uxth	r4, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	895a      	ldrh	r2, [r3, #10]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	88db      	ldrh	r3, [r3, #6]
 8001c00:	4413      	add	r3, r2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fbba 	bl	8001388 <_ZN7ILI934117SetCursorPositionEtttt>

    for (uint32_t i = 0; i < img->size; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d21a      	bcs.n	8001c58 <_ZN7ILI93415ImageEP10img_data_t+0x82>
    {
        SendData(img->data[i] >> 8);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	121b      	asrs	r3, r3, #8
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fb7b 	bl	8001330 <_ZN7ILI93418SendDataEh>
        SendData(img->data[i] & 0xff);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fb70 	bl	8001330 <_ZN7ILI93418SendDataEh>
    for (uint32_t i = 0; i < img->size; i++)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e7df      	b.n	8001c18 <_ZN7ILI93415ImageEP10img_data_t+0x42>
    }
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}

08001c60 <_Z41__static_initialization_and_destruction_0ii>:
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af04      	add	r7, sp, #16
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d179      	bne.n	8001d64 <_Z41__static_initialization_and_destruction_0ii+0x104>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d174      	bne.n	8001d64 <_Z41__static_initialization_and_destruction_0ii+0x104>
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2144, 0x2965, 0x2965, 0x2966, 0x29a6, 0x29c7, 0x29c7, 0x29a6, 0x2966, 0x2965, 0x2965, 0x2144, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2144, 0x2945, 0x2965, 0x2965, 0x2965, 0x2965, 0x2965, 0x2965, 0x2945, 0x2144, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2104, 0x2945, 0x2945, 0x2965, 0x2965, 0x2945, 0x2144, 0x2104, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

static img_data_t lightOffImg(lightOffData, 0, 0, 64, 64, 4096);
 8001c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	2340      	movs	r3, #64	; 0x40
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	2340      	movs	r3, #64	; 0x40
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4937      	ldr	r1, [pc, #220]	; (8001d6c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001c8e:	4838      	ldr	r0, [pc, #224]	; (8001d70 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001c90:	f7ff fac8 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2144, 0x2965, 0x2965, 0x2966, 0x29a6, 0x29c7, 0x29c7, 0x29a6, 0x2966, 0x2965, 0x2965, 0x2144, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2144, 0x2945, 0x2965, 0x2965, 0x2965, 0x2965, 0x2965, 0x2965, 0x2945, 0x2144, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2104, 0x2945, 0x2945, 0x2965, 0x2965, 0x2945, 0x2144, 0x2104, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

static img_data_t lightOnImg(lightOnData, 0, 0, 64, 64, 4096);
 8001c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	2340      	movs	r3, #64	; 0x40
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	2340      	movs	r3, #64	; 0x40
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4933      	ldr	r1, [pc, #204]	; (8001d74 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001ca8:	4833      	ldr	r0, [pc, #204]	; (8001d78 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8001caa:	f7ff fabb 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xe423, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe423, 0xe463, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xec23, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xe443, 0xec23, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xe442, 0xe443, 0xe423, 0xe443, 0xe442, 0xe443, 0xe443, 0xe443, 0xe443, 0xe442, 0xe443, 0xe423, 0xe443, 0xe442, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

static img_data_t minusImg(minusData, 0, 0, 48, 48, 2304);
 8001cae:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001cb2:	9302      	str	r3, [sp, #8]
 8001cb4:	2330      	movs	r3, #48	; 0x30
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	2330      	movs	r3, #48	; 0x30
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	492e      	ldr	r1, [pc, #184]	; (8001d7c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8001cc2:	482f      	ldr	r0, [pc, #188]	; (8001d80 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001cc4:	f7ff faae 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xb186, 0xb186, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xb186, 0xb186, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xb186, 0xb9a6, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xb9a6, 0xb186, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xd9e7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

static img_data_t pauseImg(pauseData, 0, 0, 64, 64, 4096);
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	2340      	movs	r3, #64	; 0x40
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	2340      	movs	r3, #64	; 0x40
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2200      	movs	r2, #0
 8001cda:	492a      	ldr	r1, [pc, #168]	; (8001d84 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8001cdc:	482a      	ldr	r0, [pc, #168]	; (8001d88 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8001cde:	f7ff faa1 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

static img_data_t pcbImg(pcbData, 0, 0, 128, 128, 16384);
 8001ce2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4925      	ldr	r1, [pc, #148]	; (8001d8c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001cf6:	4826      	ldr	r0, [pc, #152]	; (8001d90 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001cf8:	f7ff fa94 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2da2, 0x35a3, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x35a3, 0x2da2, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2d83, 0x35c3, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x35c3, 0x2d83, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2d82, 0x2d83, 0x35c3, 0x3603, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x7c4, 0x3603, 0x35c3, 0x2d83, 0x2d82, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

static img_data_t playImg(playData, 0, 0, 64, 64, 4096);
 8001cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	2340      	movs	r3, #64	; 0x40
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	2340      	movs	r3, #64	; 0x40
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	4921      	ldr	r1, [pc, #132]	; (8001d94 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001d10:	4821      	ldr	r0, [pc, #132]	; (8001d98 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001d12:	f7ff fa87 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x454b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x3d8b, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x454b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x454b, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x456a, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456b, 0x456a, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

static img_data_t plusImg(plusData, 0, 0, 48, 48, 2304);
 8001d16:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001d1a:	9302      	str	r3, [sp, #8]
 8001d1c:	2330      	movs	r3, #48	; 0x30
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2330      	movs	r3, #48	; 0x30
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2300      	movs	r3, #0
 8001d26:	2200      	movs	r2, #0
 8001d28:	491c      	ldr	r1, [pc, #112]	; (8001d9c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8001d2a:	481d      	ldr	r0, [pc, #116]	; (8001da0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8001d2c:	f7ff fa7a 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

static img_data_t returnImg(returnData, 0, 0, 64, 64, 4096);
 8001d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d34:	9302      	str	r3, [sp, #8]
 8001d36:	2340      	movs	r3, #64	; 0x40
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2340      	movs	r3, #64	; 0x40
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2200      	movs	r2, #0
 8001d42:	4918      	ldr	r1, [pc, #96]	; (8001da4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8001d44:	4818      	ldr	r0, [pc, #96]	; (8001da8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001d46:	f7ff fa6d 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
    0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

static img_data_t thermometerImg(thermometerData, 0, 0, 128, 128, 16384);
 8001d4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4913      	ldr	r1, [pc, #76]	; (8001dac <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8001d5e:	4814      	ldr	r0, [pc, #80]	; (8001db0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8001d60:	f7ff fa60 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	080098cc 	.word	0x080098cc
 8001d70:	200001fc 	.word	0x200001fc
 8001d74:	0800b8cc 	.word	0x0800b8cc
 8001d78:	2000020c 	.word	0x2000020c
 8001d7c:	0800d8cc 	.word	0x0800d8cc
 8001d80:	2000021c 	.word	0x2000021c
 8001d84:	0800eacc 	.word	0x0800eacc
 8001d88:	2000022c 	.word	0x2000022c
 8001d8c:	08010acc 	.word	0x08010acc
 8001d90:	2000023c 	.word	0x2000023c
 8001d94:	08018acc 	.word	0x08018acc
 8001d98:	2000024c 	.word	0x2000024c
 8001d9c:	0801aacc 	.word	0x0801aacc
 8001da0:	2000025c 	.word	0x2000025c
 8001da4:	0801bccc 	.word	0x0801bccc
 8001da8:	2000026c 	.word	0x2000026c
 8001dac:	0801dccc 	.word	0x0801dccc
 8001db0:	2000027c 	.word	0x2000027c

08001db4 <_GLOBAL__sub_I__ZN7ILI9341C2Eh>:
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff ff4f 	bl	8001c60 <_Z41__static_initialization_and_destruction_0ii>
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_ZN4LoadC1EP17TIM_HandleTypeDefS1_PV12load_state_t>:
 *      Author: Johan
 */

#include "Load.h"

Load::Load(TIM_HandleTypeDef *timer_duty, TIM_HandleTypeDef *timer_pulse,
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
        volatile load_state_t *state)
        : m_timer_duty(timer_duty), m_timer_pulse(timer_pulse), m_state(state)
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <_ZN4LoadC1EP17TIM_HandleTypeDefS1_PV12load_state_t+0x38>)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	60da      	str	r2, [r3, #12]
{
    Off();
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f888 	bl	8001f00 <_ZN4Load3OffEv>
}
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	08025ce4 	.word	0x08025ce4

08001e00 <_ZN4LoadD1Ev>:

Load::~Load()
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <_ZN4LoadD1Ev+0x20>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]
{
    Off();
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f876 	bl	8001f00 <_ZN4Load3OffEv>
}
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	08025ce4 	.word	0x08025ce4

08001e24 <_ZN4LoadD0Ev>:
Load::~Load()
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
}
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ffe7 	bl	8001e00 <_ZN4LoadD1Ev>
 8001e32:	2114      	movs	r1, #20
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f005 fa0f 	bl	8007258 <_ZdlPvj>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_ZN4Load7SetDutyEh>:
void Load::SetDuty(uint8_t duty)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]

    if (duty >= 100)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	2b63      	cmp	r3, #99	; 0x63
 8001e54:	d907      	bls.n	8001e66 <_ZN4Load7SetDutyEh+0x22>
    {
        m_duty = 100;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2264      	movs	r2, #100	; 0x64
 8001e5a:	741a      	strb	r2, [r3, #16]
        *m_state = LOAD_ON;    // AN
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
        m_timer_pulse->Instance->ARR = timerReload + ON_PULSE + ON_DELAY;

        *m_state = LOAD_DUTY;
    }

}
 8001e64:	e02b      	b.n	8001ebe <_ZN4Load7SetDutyEh+0x7a>
    else if (duty <= 0)
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d107      	bne.n	8001e7c <_ZN4Load7SetDutyEh+0x38>
        m_duty = 0;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	741a      	strb	r2, [r3, #16]
        *m_state = LOAD_OFF;    // AUS
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
}
 8001e7a:	e020      	b.n	8001ebe <_ZN4Load7SetDutyEh+0x7a>
        m_duty = duty;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	741a      	strb	r2, [r3, #16]
        uint16_t timerReload = (100 - duty) * 9000 / 100;
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001e88:	f242 3228 	movw	r2, #9000	; 0x2328
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <_ZN4Load7SetDutyEh+0x88>)
 8001e92:	fb82 1203 	smull	r1, r2, r2, r3
 8001e96:	1152      	asrs	r2, r2, #5
 8001e98:	17db      	asrs	r3, r3, #31
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	81fb      	strh	r3, [r7, #14]
        m_timer_duty->Instance->ARR = timerReload + ON_DELAY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	89fa      	ldrh	r2, [r7, #14]
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
        m_timer_pulse->Instance->ARR = timerReload + ON_PULSE + ON_DELAY;
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
        *m_state = LOAD_DUTY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	701a      	strb	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	51eb851f 	.word	0x51eb851f

08001ed0 <_ZNK4Load7GetDutyEv>:

uint8_t Load::GetDuty() const
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    return m_duty;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7c1b      	ldrb	r3, [r3, #16]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_ZN4Load2OnEv>:

void Load::On()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
    SetDuty(100);
 8001ef0:	2164      	movs	r1, #100	; 0x64
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa6 	bl	8001e44 <_ZN4Load7SetDutyEh>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_ZN4Load3OffEv>:

void Load::Off()
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
    SetDuty(0);
 8001f08:	2100      	movs	r1, #0
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ff9a 	bl	8001e44 <_ZN4Load7SetDutyEh>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_ZN8MAX31855D1Ev>:
    void ConvertToInternal();    // Konvertiert m_reading zu m_internalTemp
    void ConvertToFaults();    // Konvertiert m_reading zu Fehler-Flags

public:
    MAX31855(SPI_HandleTypeDef *spi, GPIO_TypeDef *port, uint16_t pin);
    virtual ~MAX31855()
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
    {
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <_ZN8MAX31855D1Ev+0x1c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	601a      	str	r2, [r3, #0]
    }
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	08025cf4 	.word	0x08025cf4

08001f38 <_ZN8MAX31855D0Ev>:
    virtual ~MAX31855()
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    }
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffe9 	bl	8001f18 <_ZN8MAX31855D1Ev>
 8001f46:	2120      	movs	r1, #32
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f005 f985 	bl	8007258 <_ZdlPvj>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_ZN8MAX31855C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
 *      Author: Johan
 */

#include "MAX31855.h"

MAX31855::MAX31855(SPI_HandleTypeDef *spi, GPIO_TypeDef *port, uint16_t pin)
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	807b      	strh	r3, [r7, #2]
        : m_spi(spi), m_port(port), m_pin(pin)
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <_ZN8MAX31855C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0x48>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	819a      	strh	r2, [r3, #12]
{
    m_spi = spi;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	605a      	str	r2, [r3, #4]
    m_port = port;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]
    m_pin = pin;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	887a      	ldrh	r2, [r7, #2]
 8001f8e:	819a      	strh	r2, [r3, #12]
    Update();
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fa3e 	bl	8002412 <_ZN8MAX318556UpdateEv>
}
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	08025cf4 	.word	0x08025cf4

08001fa4 <_ZN8MAX3185517ConvertToExternalEv>:

void MAX31855::ConvertToExternal()
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    m_externalTemp = 0;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]

    m_externalTemp += ((m_reading & (1 << 18)) >> 18) / 4.0f;    // bit 18: 2^-2
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	0c9b      	lsrs	r3, r3, #18
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fcc:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8001fd0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 19)) >> 19) / 2.0f;    // bit 19: 2^-1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	0cdb      	lsrs	r3, r3, #19
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ff6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ffa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 20)) >> 20);    // bit 20: 2^0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	ed93 7a05 	vldr	s14, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	0d1b      	lsrs	r3, r3, #20
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 21)) >> 21) * 2;    // bit 21: 2^1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	0d5b      	lsrs	r3, r3, #21
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 22)) >> 22) * 4;    // bit 22: 2^2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	ed93 7a05 	vldr	s14, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	0d9b      	lsrs	r3, r3, #22
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 23)) >> 23) * 8;    // bit 23: 2^3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	ed93 7a05 	vldr	s14, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	0ddb      	lsrs	r3, r3, #23
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 24)) >> 24) * 16;    // bit 24: 2^4
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	ed93 7a05 	vldr	s14, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	0e1b      	lsrs	r3, r3, #24
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 25)) >> 25) * 32;    // bit 25: 2^5
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	0e5b      	lsrs	r3, r3, #25
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	015b      	lsls	r3, r3, #5
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 26)) >> 26) * 64;    // bit 26: 2^6
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	ed93 7a05 	vldr	s14, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	0e9b      	lsrs	r3, r3, #26
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	019b      	lsls	r3, r3, #6
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 27)) >> 27) * 128;    // bit 27: 2^7
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	ed93 7a05 	vldr	s14, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	0edb      	lsrs	r3, r3, #27
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	01db      	lsls	r3, r3, #7
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 28)) >> 28) * 256;    // bit 28: 2^8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	ed93 7a05 	vldr	s14, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	0f1b      	lsrs	r3, r3, #28
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 29)) >> 29) * 512;    // bit 29: 2^9
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	0f5b      	lsrs	r3, r3, #29
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	025b      	lsls	r3, r3, #9
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	edc3 7a05 	vstr	s15, [r3, #20]
    m_externalTemp += ((m_reading & (1 << 30)) >> 30) * 1024;    // bit 30: 2^10
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	ed93 7a05 	vldr	s14, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	0f9b      	lsrs	r3, r3, #30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	029b      	lsls	r3, r3, #10
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edc3 7a05 	vstr	s15, [r3, #20]

    int sign = ((m_reading & (1 << 31)) >> 31) ? -1 : 1;    // Vorzeichen: 0: pos ; 1: neg
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	da02      	bge.n	80021a0 <_ZN8MAX3185517ConvertToExternalEv+0x1fc>
 800219a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219e:	e000      	b.n	80021a2 <_ZN8MAX3185517ConvertToExternalEv+0x1fe>
 80021a0:	2301      	movs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
    m_externalTemp *= sign;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	ee07 3a90 	vmov	s15, r3
 80021b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <_ZN8MAX3185517ConvertToInternalEv>:

void MAX31855::ConvertToInternal()
{
 80021ca:	b480      	push	{r7}
 80021cc:	b085      	sub	sp, #20
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
    m_internalTemp = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]

    m_internalTemp += ((m_reading & (1 << 4)) >> 4) / 16.0f;    // bit 4: 2^-4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021f2:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 80021f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	edc3 7a06 	vstr	s15, [r3, #24]
    m_internalTemp += ((m_reading & (1 << 5)) >> 5) / 8.0f;    // bit 5: 2^-3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	ed93 7a06 	vldr	s14, [r3, #24]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800221c:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 8002220:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	edc3 7a06 	vstr	s15, [r3, #24]
    m_internalTemp += ((m_reading & (1 << 6)) >> 6) / 4.0f;    // bit 6: 2^-2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	ed93 7a06 	vldr	s14, [r3, #24]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002246:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800224a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800224e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	edc3 7a06 	vstr	s15, [r3, #24]
    m_internalTemp += ((m_reading & (1 << 7)) >> 7) / 2.0f;    // bit 7: 2^-1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	ed93 7a06 	vldr	s14, [r3, #24]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	09db      	lsrs	r3, r3, #7
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002270:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002274:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	edc3 7a06 	vstr	s15, [r3, #24]
    m_internalTemp += ((m_reading & (1 << 8)) >> 8);    // bit 8: 2^0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	ed93 7a06 	vldr	s14, [r3, #24]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800229a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	edc3 7a06 	vstr	s15, [r3, #24]
    m_internalTemp += ((m_reading & (1 << 9)) >> 9) * 2;    // bit 9: 2^1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	ed93 7a06 	vldr	s14, [r3, #24]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	0a5b      	lsrs	r3, r3, #9
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	edc3 7a06 	vstr	s15, [r3, #24]
    m_internalTemp += ((m_reading & (1 << 10)) >> 10) * 4;    // bit 10: 2^2
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	0a9b      	lsrs	r3, r3, #10
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	edc3 7a06 	vstr	s15, [r3, #24]
    m_internalTemp += ((m_reading & (1 << 11)) >> 11) * 8;    // bit 11: 2^3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	ed93 7a06 	vldr	s14, [r3, #24]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	0adb      	lsrs	r3, r3, #11
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	edc3 7a06 	vstr	s15, [r3, #24]
    m_internalTemp += ((m_reading & (1 << 12)) >> 12) * 16;    // bit 12: 2^4
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	ed93 7a06 	vldr	s14, [r3, #24]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	0b1b      	lsrs	r3, r3, #12
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	edc3 7a06 	vstr	s15, [r3, #24]
    m_internalTemp += ((m_reading & (1 << 13)) >> 13) * 32;    // bit 13: 2^5
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	ed93 7a06 	vldr	s14, [r3, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	0b5b      	lsrs	r3, r3, #13
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	015b      	lsls	r3, r3, #5
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	edc3 7a06 	vstr	s15, [r3, #24]
    m_internalTemp += ((m_reading & (1 << 14)) >> 14) * 64;    // bit 14: 2^6
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	ed93 7a06 	vldr	s14, [r3, #24]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	0b9b      	lsrs	r3, r3, #14
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	019b      	lsls	r3, r3, #6
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	edc3 7a06 	vstr	s15, [r3, #24]

    int sign = ((m_reading & (1 << 15)) >> 15) ? -1 : 1;    // Vorzeichen: 0: pos ; 1: neg
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <_ZN8MAX3185517ConvertToInternalEv+0x1c4>
 8002388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800238c:	e000      	b.n	8002390 <_ZN8MAX3185517ConvertToInternalEv+0x1c6>
 800238e:	2301      	movs	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
    m_internalTemp *= sign;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	ed93 7a06 	vldr	s14, [r3, #24]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_ZN8MAX3185515ConvertToFaultsEv>:

void MAX31855::ConvertToFaults()
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    m_fault = (m_reading & (1 << 16)) >> 16;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	771a      	strb	r2, [r3, #28]
    m_openCircuit = m_reading & 1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	775a      	strb	r2, [r3, #29]
    m_shortToGND = (m_reading & (1 << 1)) >> 1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	779a      	strb	r2, [r3, #30]
    m_shortToVCC = (m_reading & (1 << 2)) >> 2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	77da      	strb	r2, [r3, #31]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <_ZN8MAX318556UpdateEv>:

uint8_t MAX31855::Update()
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
    m_reading = 0;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]

    uint8_t tempbuf[4] =
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
        { 0, 0, 0, 0 };    // Temporärer Buffer für Datenübertragung

    HAL_GPIO_WritePin(m_port, m_pin, GPIO_PIN_RESET);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6898      	ldr	r0, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	899b      	ldrh	r3, [r3, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	4619      	mov	r1, r3
 8002430:	f003 fa68 	bl	8005904 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(m_spi, &tempbuf[0], 4, 100);    // 4 Bytes über SPI empfangen
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6858      	ldr	r0, [r3, #4]
 8002438:	f107 010c 	add.w	r1, r7, #12
 800243c:	2364      	movs	r3, #100	; 0x64
 800243e:	2204      	movs	r2, #4
 8002440:	f003 ff22 	bl	8006288 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(m_port, m_pin, GPIO_PIN_SET);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6898      	ldr	r0, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	899b      	ldrh	r3, [r3, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	4619      	mov	r1, r3
 8002450:	f003 fa58 	bl	8005904 <HAL_GPIO_WritePin>

    m_reading = (tempbuf[0] << 24) | (tempbuf[1] << 16) | (tempbuf[2] << 8) | (tempbuf[3] << 0);
 8002454:	7b3b      	ldrb	r3, [r7, #12]
 8002456:	061a      	lsls	r2, r3, #24
 8002458:	7b7b      	ldrb	r3, [r7, #13]
 800245a:	041b      	lsls	r3, r3, #16
 800245c:	431a      	orrs	r2, r3
 800245e:	7bbb      	ldrb	r3, [r7, #14]
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	4313      	orrs	r3, r2
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	4313      	orrs	r3, r2
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]

    ConvertToExternal();
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff fd98 	bl	8001fa4 <_ZN8MAX3185517ConvertToExternalEv>
    ConvertToInternal();
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fea8 	bl	80021ca <_ZN8MAX3185517ConvertToInternalEv>
    ConvertToFaults();
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ff9c 	bl	80023b8 <_ZN8MAX3185515ConvertToFaultsEv>

    return m_fault;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7f1b      	ldrb	r3, [r3, #28]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <_ZNK8MAX3185512ExternalTempEv>:

float MAX31855::ExternalTemp() const
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    return m_externalTemp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	ee07 3a90 	vmov	s15, r3
}
 800249c:	eeb0 0a67 	vmov.f32	s0, s15
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <_ZN5TouchD1Ev>:
    void StartTouchDelay();

public:
    Touch(ADC_HandleTypeDef *adcX, ADC_HandleTypeDef *adcY, volatile uint8_t *touchReadyFlag,
            TIM_HandleTypeDef *timer);
    virtual ~Touch()
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    {
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <_ZN5TouchD1Ev+0x1c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	601a      	str	r2, [r3, #0]
    }
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	08042104 	.word	0x08042104

080024cc <_ZN5TouchD0Ev>:
    virtual ~Touch()
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    }
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffe9 	bl	80024ac <_ZN5TouchD1Ev>
 80024da:	2118      	movs	r1, #24
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f004 febb 	bl	8007258 <_ZdlPvj>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZN5TouchC1EP17ADC_HandleTypeDefS1_PVhP17TIM_HandleTypeDef>:
 *      Author: Johan
 */

#include "Touch.h"

Touch::Touch(ADC_HandleTypeDef *adcX, ADC_HandleTypeDef *adcY, volatile uint8_t *touchReadyFlag,
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
        TIM_HandleTypeDef *timer)
        : m_adcX(adcX), m_adcY(adcY), m_touchReady(touchReadyFlag), m_timer(timer)
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <_ZN5TouchC1EP17ADC_HandleTypeDefS1_PVhP17TIM_HandleTypeDef+0x7c>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	611a      	str	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a3a      	ldr	r2, [r7, #32]
 8002516:	615a      	str	r2, [r3, #20]
{
    uint16_t timer_fequency_hz = 84000000 / (m_timer->Instance->PSC + 1);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	3301      	adds	r3, #1
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <_ZN5TouchC1EP17ADC_HandleTypeDefS1_PVhP17TIM_HandleTypeDef+0x80>)
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	82fb      	strh	r3, [r7, #22]
    uint16_t timer_reload_counter = timer_fequency_hz / 1000 * DELAY_TOUCH_MS;
 800252a:	8afb      	ldrh	r3, [r7, #22]
 800252c:	4a10      	ldr	r2, [pc, #64]	; (8002570 <_ZN5TouchC1EP17ADC_HandleTypeDefS1_PVhP17TIM_HandleTypeDef+0x84>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	b29b      	uxth	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	4413      	add	r3, r2
 800253c:	461a      	mov	r2, r3
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	82bb      	strh	r3, [r7, #20]

    if (timer_reload_counter > 0xffff)
        timer_reload_counter = 0xffff;

    m_timer->Instance->ARR = timer_reload_counter - 1;
 8002546:	8abb      	ldrh	r3, [r7, #20]
 8002548:	1e5a      	subs	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_TIM_Base_Start_IT(m_timer);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4618      	mov	r0, r3
 8002558:	f004 fa7d 	bl	8006a56 <HAL_TIM_Base_Start_IT>
}
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	08042104 	.word	0x08042104
 800256c:	0501bd00 	.word	0x0501bd00
 8002570:	10624dd3 	.word	0x10624dd3

08002574 <_ZN5Touch6UpdateEv>:

void Touch::Update()
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
    ReadX();
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f859 	bl	8002634 <_ZN5Touch5ReadXEv>
    ReadY();
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8a8 	bl	80026d8 <_ZN5Touch5ReadYEv>
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZN5Touch11CheckRegionEP10img_data_t>:

    return 0;
}

uint8_t Touch::CheckRegion(img_data_t *img)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
    Update();
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffea 	bl	8002574 <_ZN5Touch6UpdateEv>

    if (*m_touchReady)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d028      	beq.n	8002608 <_ZN5Touch11CheckRegionEP10img_data_t+0x78>
    {
        uint16_t x0 = img->x, x1 = x0 + img->w, y0 = img->y, y1 = y0 + img->h;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	889b      	ldrh	r3, [r3, #4]
 80025ba:	81fb      	strh	r3, [r7, #14]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	891a      	ldrh	r2, [r3, #8]
 80025c0:	89fb      	ldrh	r3, [r7, #14]
 80025c2:	4413      	add	r3, r2
 80025c4:	81bb      	strh	r3, [r7, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	88db      	ldrh	r3, [r3, #6]
 80025ca:	817b      	strh	r3, [r7, #10]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	895a      	ldrh	r2, [r3, #10]
 80025d0:	897b      	ldrh	r3, [r7, #10]
 80025d2:	4413      	add	r3, r2
 80025d4:	813b      	strh	r3, [r7, #8]

        if (m_point.x > x0 && m_point.x < x1 && m_point.y > y0 && m_point.y < y1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	899b      	ldrh	r3, [r3, #12]
 80025da:	89fa      	ldrh	r2, [r7, #14]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d213      	bcs.n	8002608 <_ZN5Touch11CheckRegionEP10img_data_t+0x78>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	899b      	ldrh	r3, [r3, #12]
 80025e4:	89ba      	ldrh	r2, [r7, #12]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d90e      	bls.n	8002608 <_ZN5Touch11CheckRegionEP10img_data_t+0x78>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	89db      	ldrh	r3, [r3, #14]
 80025ee:	897a      	ldrh	r2, [r7, #10]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d209      	bcs.n	8002608 <_ZN5Touch11CheckRegionEP10img_data_t+0x78>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	89db      	ldrh	r3, [r3, #14]
 80025f8:	893a      	ldrh	r2, [r7, #8]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d904      	bls.n	8002608 <_ZN5Touch11CheckRegionEP10img_data_t+0x78>
        {
            StartTouchDelay();
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f807 	bl	8002612 <_ZN5Touch15StartTouchDelayEv>
            return 1;
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <_ZN5Touch11CheckRegionEP10img_data_t+0x7a>
        }
    }

    return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <_ZN5Touch15StartTouchDelayEv>:

void Touch::StartTouchDelay()
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
    *m_touchReady = 0;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(m_timer);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4618      	mov	r0, r3
 8002628:	f004 fa15 	bl	8006a56 <HAL_TIM_Base_Start_IT>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_ZN5Touch5ReadXEv>:

void Touch::ReadX()
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
    uint16_t raw_x;

    uint32_t tempC = GPIOC->MODER;
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <_ZN5Touch5ReadXEv+0x9c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	613b      	str	r3, [r7, #16]
    uint32_t tempA = GPIOA->MODER;
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <_ZN5Touch5ReadXEv+0xa0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

    GPIOC->MODER |= GPIO_MODER_MODER5;
 8002648:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <_ZN5Touch5ReadXEv+0x9c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <_ZN5Touch5ReadXEv+0x9c>)
 800264e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002652:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER11;
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <_ZN5Touch5ReadXEv+0xa0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <_ZN5Touch5ReadXEv+0xa0>)
 800265a:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800265e:	6013      	str	r3, [r2, #0]
    XP_PORT->BSRR = XP_PIN;
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <_ZN5Touch5ReadXEv+0xa0>)
 8002662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002666:	619a      	str	r2, [r3, #24]
    XM_PORT->BSRR = (uint32_t) XM_PIN << 16U;
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <_ZN5Touch5ReadXEv+0x9c>)
 800266a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800266e:	619a      	str	r2, [r3, #24]

    HAL_ADC_Start(m_adcX);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4618      	mov	r0, r3
 8002676:	f002 fb23 	bl	8004cc0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(m_adcX, 100);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2164      	movs	r1, #100	; 0x64
 8002680:	4618      	mov	r0, r3
 8002682:	f002 fbe3 	bl	8004e4c <HAL_ADC_PollForConversion>
    raw_x = HAL_ADC_GetValue(m_adcX);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fc62 	bl	8004f54 <HAL_ADC_GetValue>
 8002690:	4603      	mov	r3, r0
 8002692:	82fb      	strh	r3, [r7, #22]

    GPIOC->MODER = tempC;
 8002694:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <_ZN5Touch5ReadXEv+0x9c>)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	6013      	str	r3, [r2, #0]
    GPIOA->MODER = tempA;
 800269a:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <_ZN5Touch5ReadXEv+0xa0>)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6013      	str	r3, [r2, #0]

    if (raw_x > 4095)
 80026a0:	8afb      	ldrh	r3, [r7, #22]
 80026a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a6:	d301      	bcc.n	80026ac <_ZN5Touch5ReadXEv+0x78>
        raw_x = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	82fb      	strh	r3, [r7, #22]

    raw_x -= OFFSET_X;
 80026ac:	8afb      	ldrh	r3, [r7, #22]
 80026ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026b2:	82fb      	strh	r3, [r7, #22]
    m_point.x = MapX(raw_x);
 80026b4:	8afb      	ldrh	r3, [r7, #22]
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f85d 	bl	8002778 <_ZN5Touch4MapXEt>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	819a      	strh	r2, [r3, #12]
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020000 	.word	0x40020000

080026d8 <_ZN5Touch5ReadYEv>:

void Touch::ReadY()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
    uint16_t raw_y;

    uint32_t tempC = GPIOC->MODER;
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <_ZN5Touch5ReadYEv+0x98>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	613b      	str	r3, [r7, #16]
    uint32_t tempA = GPIOA->MODER;
 80026e6:	4b23      	ldr	r3, [pc, #140]	; (8002774 <_ZN5Touch5ReadYEv+0x9c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]

    GPIOC->MODER |= GPIO_MODER_MODER4;    // TFT_D0 als analoger Input
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <_ZN5Touch5ReadYEv+0x98>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <_ZN5Touch5ReadYEv+0x98>)
 80026f2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80026f6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER10;    // TFT_RS als analoger Input
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <_ZN5Touch5ReadYEv+0x9c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <_ZN5Touch5ReadYEv+0x9c>)
 80026fe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002702:	6013      	str	r3, [r2, #0]
    YP_PORT->BSRR = YP_PIN;
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <_ZN5Touch5ReadYEv+0x98>)
 8002706:	2220      	movs	r2, #32
 8002708:	619a      	str	r2, [r3, #24]
    YM_PORT->BSRR = (uint32_t) YM_PIN << 16U;
 800270a:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <_ZN5Touch5ReadYEv+0x9c>)
 800270c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002710:	619a      	str	r2, [r3, #24]

    HAL_ADC_Start(m_adcY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fad2 	bl	8004cc0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(m_adcY, 100);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2164      	movs	r1, #100	; 0x64
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fb92 	bl	8004e4c <HAL_ADC_PollForConversion>
    raw_y = HAL_ADC_GetValue(m_adcY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4618      	mov	r0, r3
 800272e:	f002 fc11 	bl	8004f54 <HAL_ADC_GetValue>
 8002732:	4603      	mov	r3, r0
 8002734:	82fb      	strh	r3, [r7, #22]

    GPIOC->MODER = tempC;
 8002736:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <_ZN5Touch5ReadYEv+0x98>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER = tempA;
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <_ZN5Touch5ReadYEv+0x9c>)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6013      	str	r3, [r2, #0]

    if (raw_y > 4095)
 8002742:	8afb      	ldrh	r3, [r7, #22]
 8002744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002748:	d301      	bcc.n	800274e <_ZN5Touch5ReadYEv+0x76>
        raw_y = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	82fb      	strh	r3, [r7, #22]

    raw_y -= OFFSET_Y;
 800274e:	8afb      	ldrh	r3, [r7, #22]
 8002750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002754:	82fb      	strh	r3, [r7, #22]
    m_point.y = MapY(raw_y);
 8002756:	8afb      	ldrh	r3, [r7, #22]
 8002758:	4619      	mov	r1, r3
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f826 	bl	80027ac <_ZN5Touch4MapYEt>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	81da      	strh	r2, [r3, #14]
}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40020800 	.word	0x40020800
 8002774:	40020000 	.word	0x40020000

08002778 <_ZN5Touch4MapXEt>:

uint16_t Touch::MapX(uint16_t rawX)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
    return rawX * MAP_X / RAW_MAX;    // (RAW_MAX - rawX) * MAP_X / RAW_MAX;
 8002784:	887a      	ldrh	r2, [r7, #2]
 8002786:	4613      	mov	r3, r2
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <_ZN5Touch4MapXEt+0x30>)
 8002790:	fb82 1203 	smull	r1, r2, r2, r3
 8002794:	1292      	asrs	r2, r2, #10
 8002796:	17db      	asrs	r3, r3, #31
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	b29b      	uxth	r3, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	51eb851f 	.word	0x51eb851f

080027ac <_ZN5Touch4MapYEt>:

uint16_t Touch::MapY(uint16_t rawY)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
    return rawY * MAP_Y / RAW_MAX;
 80027b8:	887a      	ldrh	r2, [r7, #2]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	019b      	lsls	r3, r3, #6
 80027c2:	4a06      	ldr	r2, [pc, #24]	; (80027dc <_ZN5Touch4MapYEt+0x30>)
 80027c4:	fb82 1203 	smull	r1, r2, r2, r3
 80027c8:	1292      	asrs	r2, r2, #10
 80027ca:	17db      	asrs	r3, r3, #31
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	b29b      	uxth	r3, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	51eb851f 	.word	0x51eb851f

080027e0 <_Z41__static_initialization_and_destruction_0ii>:
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af04      	add	r7, sp, #16
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d179      	bne.n	80028e4 <_Z41__static_initialization_and_destruction_0ii+0x104>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d174      	bne.n	80028e4 <_Z41__static_initialization_and_destruction_0ii+0x104>
static img_data_t lightOffImg(lightOffData, 0, 0, 64, 64, 4096);
 80027fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2340      	movs	r3, #64	; 0x40
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	2340      	movs	r3, #64	; 0x40
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	2200      	movs	r2, #0
 800280c:	4937      	ldr	r1, [pc, #220]	; (80028ec <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800280e:	4838      	ldr	r0, [pc, #224]	; (80028f0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8002810:	f7fe fd08 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t lightOnImg(lightOnData, 0, 0, 64, 64, 4096);
 8002814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002818:	9302      	str	r3, [sp, #8]
 800281a:	2340      	movs	r3, #64	; 0x40
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	2340      	movs	r3, #64	; 0x40
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	2300      	movs	r3, #0
 8002824:	2200      	movs	r2, #0
 8002826:	4933      	ldr	r1, [pc, #204]	; (80028f4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8002828:	4833      	ldr	r0, [pc, #204]	; (80028f8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800282a:	f7fe fcfb 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t minusImg(minusData, 0, 0, 48, 48, 2304);
 800282e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2330      	movs	r3, #48	; 0x30
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	2330      	movs	r3, #48	; 0x30
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	2300      	movs	r3, #0
 800283e:	2200      	movs	r2, #0
 8002840:	492e      	ldr	r1, [pc, #184]	; (80028fc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8002842:	482f      	ldr	r0, [pc, #188]	; (8002900 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8002844:	f7fe fcee 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t pauseImg(pauseData, 0, 0, 64, 64, 4096);
 8002848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	2340      	movs	r3, #64	; 0x40
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2340      	movs	r3, #64	; 0x40
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2300      	movs	r3, #0
 8002858:	2200      	movs	r2, #0
 800285a:	492a      	ldr	r1, [pc, #168]	; (8002904 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800285c:	482a      	ldr	r0, [pc, #168]	; (8002908 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800285e:	f7fe fce1 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t pcbImg(pcbData, 0, 0, 128, 128, 16384);
 8002862:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002866:	9302      	str	r3, [sp, #8]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2300      	movs	r3, #0
 8002872:	2200      	movs	r2, #0
 8002874:	4925      	ldr	r1, [pc, #148]	; (800290c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8002876:	4826      	ldr	r0, [pc, #152]	; (8002910 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8002878:	f7fe fcd4 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t playImg(playData, 0, 0, 64, 64, 4096);
 800287c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002880:	9302      	str	r3, [sp, #8]
 8002882:	2340      	movs	r3, #64	; 0x40
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2300      	movs	r3, #0
 800288c:	2200      	movs	r2, #0
 800288e:	4921      	ldr	r1, [pc, #132]	; (8002914 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8002890:	4821      	ldr	r0, [pc, #132]	; (8002918 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8002892:	f7fe fcc7 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t plusImg(plusData, 0, 0, 48, 48, 2304);
 8002896:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800289a:	9302      	str	r3, [sp, #8]
 800289c:	2330      	movs	r3, #48	; 0x30
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2330      	movs	r3, #48	; 0x30
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2300      	movs	r3, #0
 80028a6:	2200      	movs	r2, #0
 80028a8:	491c      	ldr	r1, [pc, #112]	; (800291c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80028aa:	481d      	ldr	r0, [pc, #116]	; (8002920 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80028ac:	f7fe fcba 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t returnImg(returnData, 0, 0, 64, 64, 4096);
 80028b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b4:	9302      	str	r3, [sp, #8]
 80028b6:	2340      	movs	r3, #64	; 0x40
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	2340      	movs	r3, #64	; 0x40
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	2200      	movs	r2, #0
 80028c2:	4918      	ldr	r1, [pc, #96]	; (8002924 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80028c4:	4818      	ldr	r0, [pc, #96]	; (8002928 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80028c6:	f7fe fcad 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t thermometerImg(thermometerData, 0, 0, 128, 128, 16384);
 80028ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ce:	9302      	str	r3, [sp, #8]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2300      	movs	r3, #0
 80028da:	2200      	movs	r2, #0
 80028dc:	4913      	ldr	r1, [pc, #76]	; (800292c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80028de:	4814      	ldr	r0, [pc, #80]	; (8002930 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80028e0:	f7fe fca0 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	08025cfc 	.word	0x08025cfc
 80028f0:	2000028c 	.word	0x2000028c
 80028f4:	08027cfc 	.word	0x08027cfc
 80028f8:	2000029c 	.word	0x2000029c
 80028fc:	08029cfc 	.word	0x08029cfc
 8002900:	200002ac 	.word	0x200002ac
 8002904:	0802aefc 	.word	0x0802aefc
 8002908:	200002bc 	.word	0x200002bc
 800290c:	0802cefc 	.word	0x0802cefc
 8002910:	200002cc 	.word	0x200002cc
 8002914:	08034efc 	.word	0x08034efc
 8002918:	200002dc 	.word	0x200002dc
 800291c:	08036efc 	.word	0x08036efc
 8002920:	200002ec 	.word	0x200002ec
 8002924:	080380fc 	.word	0x080380fc
 8002928:	200002fc 	.word	0x200002fc
 800292c:	0803a0fc 	.word	0x0803a0fc
 8002930:	2000030c 	.word	0x2000030c

08002934 <_GLOBAL__sub_I__ZN5TouchC2EP17ADC_HandleTypeDefS1_PVhP17TIM_HandleTypeDef>:
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
 8002938:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800293c:	2001      	movs	r0, #1
 800293e:	f7ff ff4f 	bl	80027e0 <_Z41__static_initialization_and_destruction_0ii>
 8002942:	bd80      	pop	{r7, pc}

08002944 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800294a:	463b      	mov	r3, r7
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <MX_ADC1_Init+0x98>)
 8002958:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <MX_ADC1_Init+0x9c>)
 800295a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <MX_ADC1_Init+0x98>)
 800295e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002962:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002964:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <MX_ADC1_Init+0x98>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <MX_ADC1_Init+0x98>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002970:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <MX_ADC1_Init+0x98>)
 8002972:	2200      	movs	r2, #0
 8002974:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002976:	4b19      	ldr	r3, [pc, #100]	; (80029dc <MX_ADC1_Init+0x98>)
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <MX_ADC1_Init+0x98>)
 8002980:	2200      	movs	r2, #0
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <MX_ADC1_Init+0x98>)
 8002986:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <MX_ADC1_Init+0xa0>)
 8002988:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <MX_ADC1_Init+0x98>)
 800298c:	2200      	movs	r2, #0
 800298e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <MX_ADC1_Init+0x98>)
 8002992:	2201      	movs	r2, #1
 8002994:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MX_ADC1_Init+0x98>)
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <MX_ADC1_Init+0x98>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029a4:	480d      	ldr	r0, [pc, #52]	; (80029dc <MX_ADC1_Init+0x98>)
 80029a6:	f002 f947 	bl	8004c38 <HAL_ADC_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029b0:	f001 fb2c 	bl	800400c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80029b4:	2307      	movs	r3, #7
 80029b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029b8:	2301      	movs	r3, #1
 80029ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c0:	463b      	mov	r3, r7
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_ADC1_Init+0x98>)
 80029c6:	f002 fad3 	bl	8004f70 <HAL_ADC_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029d0:	f001 fb1c 	bl	800400c <Error_Handler>
  }

}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	2000057c 	.word	0x2000057c
 80029e0:	40012000 	.word	0x40012000
 80029e4:	0f000001 	.word	0x0f000001

080029e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80029ee:	463b      	mov	r3, r7
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <MX_ADC2_Init+0x98>)
 80029fc:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <MX_ADC2_Init+0x9c>)
 80029fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a00:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a06:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002a14:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <MX_ADC2_Init+0xa0>)
 8002a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a4a:	f002 f8f5 	bl	8004c38 <HAL_ADC_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002a54:	f001 fada 	bl	800400c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a64:	463b      	mov	r3, r7
 8002a66:	4619      	mov	r1, r3
 8002a68:	4805      	ldr	r0, [pc, #20]	; (8002a80 <MX_ADC2_Init+0x98>)
 8002a6a:	f002 fa81 	bl	8004f70 <HAL_ADC_ConfigChannel>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002a74:	f001 faca 	bl	800400c <Error_Handler>
  }

}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000534 	.word	0x20000534
 8002a84:	40012100 	.word	0x40012100
 8002a88:	0f000001 	.word	0x0f000001

08002a8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08c      	sub	sp, #48	; 0x30
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2e      	ldr	r2, [pc, #184]	; (8002b64 <HAL_ADC_MspInit+0xd8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d128      	bne.n	8002b00 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a25      	ldr	r2, [pc, #148]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = TOUCH_X_Pin;
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aea:	2303      	movs	r3, #3
 8002aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TOUCH_X_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	4619      	mov	r1, r3
 8002af8:	481c      	ldr	r0, [pc, #112]	; (8002b6c <HAL_ADC_MspInit+0xe0>)
 8002afa:	f002 fd69 	bl	80055d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002afe:	e02c      	b.n	8002b5a <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d127      	bne.n	8002b5a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b18:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a0e      	ldr	r2, [pc, #56]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TOUCH_Y_Pin;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b46:	2303      	movs	r3, #3
 8002b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TOUCH_Y_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	4619      	mov	r1, r3
 8002b54:	4807      	ldr	r0, [pc, #28]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b56:	f002 fd3b 	bl	80055d0 <HAL_GPIO_Init>
}
 8002b5a:	bf00      	nop
 8002b5c:	3730      	adds	r7, #48	; 0x30
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40012000 	.word	0x40012000
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020000 	.word	0x40020000
 8002b70:	40012100 	.word	0x40012100
 8002b74:	40020400 	.word	0x40020400

08002b78 <_ZN7label_tC1EPcttttt>:
    label_t(char *_str, uint16_t _size, uint16_t _x, uint16_t _y, uint16_t _color_fg, uint16_t _color_bg)
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	460b      	mov	r3, r1
 8002b88:	80fb      	strh	r3, [r7, #6]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80bb      	strh	r3, [r7, #4]
        : size(_size), x(_x), y(_y), color_fg(_color_fg), color_bg(_color_bg)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	829a      	strh	r2, [r3, #20]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88ba      	ldrh	r2, [r7, #4]
 8002b98:	82da      	strh	r2, [r3, #22]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8b3a      	ldrh	r2, [r7, #24]
 8002b9e:	831a      	strh	r2, [r3, #24]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8bba      	ldrh	r2, [r7, #28]
 8002ba4:	835a      	strh	r2, [r3, #26]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8c3a      	ldrh	r2, [r7, #32]
 8002baa:	839a      	strh	r2, [r3, #28]
        strcpy(str, _str);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f005 f8cb 	bl	8007d4c <strcpy>
    }
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_ZN7label_tC1Ettttt>:
    label_t(uint16_t _size, uint16_t _x, uint16_t _y, uint16_t _color_fg, uint16_t _color_bg)
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	4608      	mov	r0, r1
 8002bca:	4611      	mov	r1, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	813b      	strh	r3, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]
        : size(_size), x(_x), y(_y), color_fg(_color_fg), color_bg(_color_bg)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	897a      	ldrh	r2, [r7, #10]
 8002bde:	829a      	strh	r2, [r3, #20]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	893a      	ldrh	r2, [r7, #8]
 8002be4:	82da      	strh	r2, [r3, #22]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	831a      	strh	r2, [r3, #24]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8b3a      	ldrh	r2, [r7, #24]
 8002bf0:	835a      	strh	r2, [r3, #26]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8bba      	ldrh	r2, [r7, #28]
 8002bf6:	839a      	strh	r2, [r3, #28]
    }
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <_Z15boot_initSystemP9context_t>:

/*
 * Initialisiert System.
 */
void boot_initSystem(context_t *context)
{
 8002c06:	b590      	push	{r4, r7, lr}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
    // Display initialisieren
    context->tft->Reset();
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fcba 	bl	800158c <_ZN7ILI93415ResetEv>
    context->tft->Init();
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe fc04 	bl	800142a <_ZN7ILI93414InitEv>

    context->fan->On();
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f95e 	bl	8001ee8 <_ZN4Load2OnEv>

    // Raumtemperatur bestimmen und PID-Regler auf Raumtemperatur setzten
    context->temp->Update();
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fbee 	bl	8002412 <_ZN8MAX318556UpdateEv>

    uint8_t roomTemp = (uint8_t) context->temp->ExternalTemp();
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fc26 	bl	800248c <_ZNK8MAX3185512ExternalTempEv>
 8002c40:	eef0 7a40 	vmov.f32	s15, s0
 8002c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c48:	edc7 7a00 	vstr	s15, [r7]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	73fb      	strb	r3, [r7, #15]
    float setTemp = (float) (roomTemp + 1);
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	3301      	adds	r3, #1
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5c:	edc7 7a02 	vstr	s15, [r7, #8]

    // PID-Regler Initialisieren
    context->pid->SetTarget(setTemp);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fa5f 	bl	800112c <_ZN13ControllerPID9SetTargetEf>
    context->pid->Update(context->temp->ExternalTemp());
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68dc      	ldr	r4, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fc08 	bl	800248c <_ZNK8MAX3185512ExternalTempEv>
 8002c7c:	eef0 7a40 	vmov.f32	s15, s0
 8002c80:	eeb0 0a67 	vmov.f32	s0, s15
 8002c84:	4620      	mov	r0, r4
 8002c86:	f7fe f9b9 	bl	8000ffc <_ZN13ControllerPID6UpdateEf>

    // Temperate-Modus inaktiv schalten
    context->temperate_active = 0;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	779a      	strb	r2, [r3, #30]

    // Übergabe an Menu-State
    context->currentState = STATE_MENU_INIT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	771a      	strb	r2, [r3, #28]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd90      	pop	{r4, r7, pc}
	...

08002ca0 <_Z9menu_initP9context_t>:

/*
 * Initialisiert Menü.
 */
void menu_init(context_t *context)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    context->tft->Fill(COLOR_WHITE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe fcfc 	bl	80016ae <_ZN7ILI93414FillEt>

    uint16_t gap = (HEIGHT - pcbImg.h - thermometerImg.h) / 3;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe ff40 	bl	8001b40 <_ZNK7ILI93416HeightEv>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <_Z9menu_initP9context_t+0xc0>)
 8002cc6:	895b      	ldrh	r3, [r3, #10]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <_Z9menu_initP9context_t+0xc4>)
 8002ccc:	8952      	ldrh	r2, [r2, #10]
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <_Z9menu_initP9context_t+0xc8>)
 8002cd2:	fb82 1203 	smull	r1, r2, r2, r3
 8002cd6:	17db      	asrs	r3, r3, #31
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	81fb      	strh	r3, [r7, #14]

    pcbImg.x = (WIDTH - pcbImg.w) / 2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe ff21 	bl	8001b28 <_ZNK7ILI93415WidthEv>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <_Z9menu_initP9context_t+0xc0>)
 8002cec:	891b      	ldrh	r3, [r3, #8]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	0fda      	lsrs	r2, r3, #31
 8002cf2:	4413      	add	r3, r2
 8002cf4:	105b      	asrs	r3, r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <_Z9menu_initP9context_t+0xc0>)
 8002cfa:	809a      	strh	r2, [r3, #4]
    pcbImg.y = gap;
 8002cfc:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <_Z9menu_initP9context_t+0xc0>)
 8002cfe:	89fb      	ldrh	r3, [r7, #14]
 8002d00:	80d3      	strh	r3, [r2, #6]
    context->tft->Image(&pcbImg);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4916      	ldr	r1, [pc, #88]	; (8002d60 <_Z9menu_initP9context_t+0xc0>)
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe ff64 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>

    thermometerImg.x = (WIDTH - thermometerImg.w) / 2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe ff08 	bl	8001b28 <_ZNK7ILI93415WidthEv>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <_Z9menu_initP9context_t+0xc4>)
 8002d1e:	891b      	ldrh	r3, [r3, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	0fda      	lsrs	r2, r3, #31
 8002d24:	4413      	add	r3, r2
 8002d26:	105b      	asrs	r3, r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <_Z9menu_initP9context_t+0xc4>)
 8002d2c:	809a      	strh	r2, [r3, #4]
    thermometerImg.y = pcbImg.y + pcbImg.h + gap;
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <_Z9menu_initP9context_t+0xc0>)
 8002d30:	88da      	ldrh	r2, [r3, #6]
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <_Z9menu_initP9context_t+0xc0>)
 8002d34:	895b      	ldrh	r3, [r3, #10]
 8002d36:	4413      	add	r3, r2
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	89fb      	ldrh	r3, [r7, #14]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <_Z9menu_initP9context_t+0xc4>)
 8002d42:	80da      	strh	r2, [r3, #6]
    context->tft->Image(&thermometerImg);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4906      	ldr	r1, [pc, #24]	; (8002d64 <_Z9menu_initP9context_t+0xc4>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe ff43 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>

    context->currentState = STATE_MENU;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	771a      	strb	r2, [r3, #28]
}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000035c 	.word	0x2000035c
 8002d64:	2000039c 	.word	0x2000039c
 8002d68:	55555556 	.word	0x55555556

08002d6c <_Z11menu_updateP9context_t>:
/*
 * Ruft User-Input über Touch-Screen ab und verarbeitet diesen.
 * Leitet Programfluss entsprechend des User-Inputs weiter.
 */
void menu_update(context_t *context)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

    if (context->touch->CheckRegion(&pcbImg))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4911      	ldr	r1, [pc, #68]	; (8002dc0 <_Z11menu_updateP9context_t+0x54>)
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fc08 	bl	8002590 <_ZN5Touch11CheckRegionEP10img_data_t>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf14      	ite	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	2300      	moveq	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <_Z11menu_updateP9context_t+0x2a>
        context->currentState = STATE_REFLOW_INIT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2203      	movs	r2, #3
 8002d94:	771a      	strb	r2, [r3, #28]

    if (context->touch->CheckRegion(&thermometerImg))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	490a      	ldr	r1, [pc, #40]	; (8002dc4 <_Z11menu_updateP9context_t+0x58>)
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fbf7 	bl	8002590 <_ZN5Touch11CheckRegionEP10img_data_t>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <_Z11menu_updateP9context_t+0x4c>
        context->currentState = STATE_TEMPERATE_INIT;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2205      	movs	r2, #5
 8002db6:	771a      	strb	r2, [r3, #28]
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	2000035c 	.word	0x2000035c
 8002dc4:	2000039c 	.word	0x2000039c

08002dc8 <_Z11reflow_initP9context_t>:

/*
 *
 */
void reflow_init(context_t *context)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
    context->currentState = STATE_MENU_INIT;    // noch nicht implementiert
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	771a      	strb	r2, [r3, #28]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_Z13reflow_updateP9context_t>:

void reflow_update(context_t *context)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <_Z14temperate_initP9context_t>:

/*
 * Initialisiert Temperierungs-Modus
 */
void temperate_init(context_t *context)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b09d      	sub	sp, #116	; 0x74
 8002dfc:	af04      	add	r7, sp, #16
 8002dfe:	6078      	str	r0, [r7, #4]
    // Temperaturen aktualisieren
    context->temp->Update();
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fb04 	bl	8002412 <_ZN8MAX318556UpdateEv>

    context->tft->Fill(COLOR_WHITE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fc4b 	bl	80016ae <_ZN7ILI93414FillEt>

    uint16_t pad = 10;
 8002e18:	230a      	movs	r3, #10
 8002e1a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

    minusImg.x = WIDTH - minusImg.w - pad;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fe80 	bl	8001b28 <_ZNK7ILI93415WidthEv>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b9a      	ldr	r3, [pc, #616]	; (8003098 <_Z14temperate_initP9context_t+0x2a0>)
 8002e2e:	891b      	ldrh	r3, [r3, #8]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b96      	ldr	r3, [pc, #600]	; (8003098 <_Z14temperate_initP9context_t+0x2a0>)
 8002e3e:	809a      	strh	r2, [r3, #4]
    minusImg.y = pad;
 8002e40:	4a95      	ldr	r2, [pc, #596]	; (8003098 <_Z14temperate_initP9context_t+0x2a0>)
 8002e42:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e46:	80d3      	strh	r3, [r2, #6]
    plusImg.x = minusImg.x - pad - plusImg.w;
 8002e48:	4b93      	ldr	r3, [pc, #588]	; (8003098 <_Z14temperate_initP9context_t+0x2a0>)
 8002e4a:	889a      	ldrh	r2, [r3, #4]
 8002e4c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	4b91      	ldr	r3, [pc, #580]	; (800309c <_Z14temperate_initP9context_t+0x2a4>)
 8002e56:	891b      	ldrh	r3, [r3, #8]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	4b8f      	ldr	r3, [pc, #572]	; (800309c <_Z14temperate_initP9context_t+0x2a4>)
 8002e5e:	809a      	strh	r2, [r3, #4]
    plusImg.y = pad;
 8002e60:	4a8e      	ldr	r2, [pc, #568]	; (800309c <_Z14temperate_initP9context_t+0x2a4>)
 8002e62:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e66:	80d3      	strh	r3, [r2, #6]
    context->tft->Image(&minusImg);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	498a      	ldr	r1, [pc, #552]	; (8003098 <_Z14temperate_initP9context_t+0x2a0>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe feb1 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>
    context->tft->Image(&plusImg);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4988      	ldr	r1, [pc, #544]	; (800309c <_Z14temperate_initP9context_t+0x2a4>)
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe feab 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>

    uint16_t gap = ((HEIGHT - pad - minusImg.h) - pauseImg.h - lightOnImg.h - returnImg.h) / 4;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fe5b 	bl	8001b40 <_ZNK7ILI93416HeightEv>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	4a80      	ldr	r2, [pc, #512]	; (8003098 <_Z14temperate_initP9context_t+0x2a0>)
 8002e96:	8952      	ldrh	r2, [r2, #10]
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	4a81      	ldr	r2, [pc, #516]	; (80030a0 <_Z14temperate_initP9context_t+0x2a8>)
 8002e9c:	8952      	ldrh	r2, [r2, #10]
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	4a80      	ldr	r2, [pc, #512]	; (80030a4 <_Z14temperate_initP9context_t+0x2ac>)
 8002ea2:	8952      	ldrh	r2, [r2, #10]
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	4a80      	ldr	r2, [pc, #512]	; (80030a8 <_Z14temperate_initP9context_t+0x2b0>)
 8002ea8:	8952      	ldrh	r2, [r2, #10]
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	da00      	bge.n	8002eb2 <_Z14temperate_initP9context_t+0xba>
 8002eb0:	3303      	adds	r3, #3
 8002eb2:	109b      	asrs	r3, r3, #2
 8002eb4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pauseImg.x = WIDTH - pad - pauseImg.w;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fe33 	bl	8001b28 <_ZNK7ILI93415WidthEv>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	4b74      	ldr	r3, [pc, #464]	; (80030a0 <_Z14temperate_initP9context_t+0x2a8>)
 8002ed0:	891b      	ldrh	r3, [r3, #8]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	4b72      	ldr	r3, [pc, #456]	; (80030a0 <_Z14temperate_initP9context_t+0x2a8>)
 8002ed8:	809a      	strh	r2, [r3, #4]
    pauseImg.y = minusImg.y + minusImg.h + gap;
 8002eda:	4b6f      	ldr	r3, [pc, #444]	; (8003098 <_Z14temperate_initP9context_t+0x2a0>)
 8002edc:	88da      	ldrh	r2, [r3, #6]
 8002ede:	4b6e      	ldr	r3, [pc, #440]	; (8003098 <_Z14temperate_initP9context_t+0x2a0>)
 8002ee0:	895b      	ldrh	r3, [r3, #10]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002eea:	4413      	add	r3, r2
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	4b6c      	ldr	r3, [pc, #432]	; (80030a0 <_Z14temperate_initP9context_t+0x2a8>)
 8002ef0:	80da      	strh	r2, [r3, #6]
    playImg.x = pauseImg.x;
 8002ef2:	4b6b      	ldr	r3, [pc, #428]	; (80030a0 <_Z14temperate_initP9context_t+0x2a8>)
 8002ef4:	889a      	ldrh	r2, [r3, #4]
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <_Z14temperate_initP9context_t+0x2b4>)
 8002ef8:	809a      	strh	r2, [r3, #4]
    playImg.y = pauseImg.y;
 8002efa:	4b69      	ldr	r3, [pc, #420]	; (80030a0 <_Z14temperate_initP9context_t+0x2a8>)
 8002efc:	88da      	ldrh	r2, [r3, #6]
 8002efe:	4b6b      	ldr	r3, [pc, #428]	; (80030ac <_Z14temperate_initP9context_t+0x2b4>)
 8002f00:	80da      	strh	r2, [r3, #6]

    if (context->temperate_active)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7f9b      	ldrb	r3, [r3, #30]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <_Z14temperate_initP9context_t+0x120>
        context->tft->Image(&pauseImg);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4964      	ldr	r1, [pc, #400]	; (80030a0 <_Z14temperate_initP9context_t+0x2a8>)
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe fe60 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>
 8002f16:	e005      	b.n	8002f24 <_Z14temperate_initP9context_t+0x12c>
    else
        context->tft->Image(&playImg);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4963      	ldr	r1, [pc, #396]	; (80030ac <_Z14temperate_initP9context_t+0x2b4>)
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fe59 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>

    lightOnImg.x = WIDTH - pad - lightOnImg.w;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fdfd 	bl	8001b28 <_ZNK7ILI93415WidthEv>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461a      	mov	r2, r3
 8002f32:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	4b5a      	ldr	r3, [pc, #360]	; (80030a4 <_Z14temperate_initP9context_t+0x2ac>)
 8002f3c:	891b      	ldrh	r3, [r3, #8]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	4b58      	ldr	r3, [pc, #352]	; (80030a4 <_Z14temperate_initP9context_t+0x2ac>)
 8002f44:	809a      	strh	r2, [r3, #4]
    lightOnImg.y = pauseImg.y + pauseImg.h + gap;
 8002f46:	4b56      	ldr	r3, [pc, #344]	; (80030a0 <_Z14temperate_initP9context_t+0x2a8>)
 8002f48:	88da      	ldrh	r2, [r3, #6]
 8002f4a:	4b55      	ldr	r3, [pc, #340]	; (80030a0 <_Z14temperate_initP9context_t+0x2a8>)
 8002f4c:	895b      	ldrh	r3, [r3, #10]
 8002f4e:	4413      	add	r3, r2
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002f56:	4413      	add	r3, r2
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	4b52      	ldr	r3, [pc, #328]	; (80030a4 <_Z14temperate_initP9context_t+0x2ac>)
 8002f5c:	80da      	strh	r2, [r3, #6]
    lightOffImg.x = lightOnImg.x;
 8002f5e:	4b51      	ldr	r3, [pc, #324]	; (80030a4 <_Z14temperate_initP9context_t+0x2ac>)
 8002f60:	889a      	ldrh	r2, [r3, #4]
 8002f62:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <_Z14temperate_initP9context_t+0x2b8>)
 8002f64:	809a      	strh	r2, [r3, #4]
    lightOffImg.y = lightOnImg.y;
 8002f66:	4b4f      	ldr	r3, [pc, #316]	; (80030a4 <_Z14temperate_initP9context_t+0x2ac>)
 8002f68:	88da      	ldrh	r2, [r3, #6]
 8002f6a:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <_Z14temperate_initP9context_t+0x2b8>)
 8002f6c:	80da      	strh	r2, [r3, #6]

    if (context->light->GetDuty() == 0)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe ffac 	bl	8001ed0 <_ZNK4Load7GetDutyEv>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d006      	beq.n	8002f96 <_Z14temperate_initP9context_t+0x19e>
        context->tft->Image(&lightOffImg);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4948      	ldr	r1, [pc, #288]	; (80030b0 <_Z14temperate_initP9context_t+0x2b8>)
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fe21 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>
 8002f94:	e005      	b.n	8002fa2 <_Z14temperate_initP9context_t+0x1aa>
    else
        context->tft->Image(&lightOnImg);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4942      	ldr	r1, [pc, #264]	; (80030a4 <_Z14temperate_initP9context_t+0x2ac>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe fe1a 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>

    returnImg.x = WIDTH - pad - returnImg.w;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fdbe 	bl	8001b28 <_ZNK7ILI93415WidthEv>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <_Z14temperate_initP9context_t+0x2b0>)
 8002fba:	891b      	ldrh	r3, [r3, #8]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <_Z14temperate_initP9context_t+0x2b0>)
 8002fc2:	809a      	strh	r2, [r3, #4]
    returnImg.y = lightOnImg.y + lightOnImg.h + gap;
 8002fc4:	4b37      	ldr	r3, [pc, #220]	; (80030a4 <_Z14temperate_initP9context_t+0x2ac>)
 8002fc6:	88da      	ldrh	r2, [r3, #6]
 8002fc8:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <_Z14temperate_initP9context_t+0x2ac>)
 8002fca:	895b      	ldrh	r3, [r3, #10]
 8002fcc:	4413      	add	r3, r2
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002fd4:	4413      	add	r3, r2
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <_Z14temperate_initP9context_t+0x2b0>)
 8002fda:	80da      	strh	r2, [r3, #6]
    context->tft->Image(&returnImg);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4931      	ldr	r1, [pc, #196]	; (80030a8 <_Z14temperate_initP9context_t+0x2b0>)
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fdf7 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>

    char str[20];

    sprintf(str, "SOLL-TEMP");
 8002fe8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fec:	4a31      	ldr	r2, [pc, #196]	; (80030b4 <_Z14temperate_initP9context_t+0x2bc>)
 8002fee:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ff0:	c303      	stmia	r3!, {r0, r1}
 8002ff2:	801a      	strh	r2, [r3, #0]
    label_t soll_label(str, 1, pad, pad, COLOR_BLACK, COLOR_WHITE);
 8002ff4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002ff8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002ffc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003004:	9302      	str	r3, [sp, #8]
 8003006:	2300      	movs	r3, #0
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	2201      	movs	r2, #1
 8003014:	f7ff fdb0 	bl	8002b78 <_ZN7label_tC1EPcttttt>
    context->tft->Print(&soll_label);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fd98 	bl	8001b58 <_ZN7ILI93415PrintEP7label_t>

    sprintf(str, "IST-TEMP");
 8003028:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800302c:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <_Z14temperate_initP9context_t+0x2c0>)
 800302e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003030:	c303      	stmia	r3!, {r0, r1}
 8003032:	701a      	strb	r2, [r3, #0]
    label_t ist_label(str, 1, pad, playImg.y, COLOR_BLACK, COLOR_WHITE);
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <_Z14temperate_initP9context_t+0x2b4>)
 8003036:	88db      	ldrh	r3, [r3, #6]
 8003038:	f8b7 405e 	ldrh.w	r4, [r7, #94]	; 0x5e
 800303c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003040:	f107 0008 	add.w	r0, r7, #8
 8003044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003048:	9202      	str	r2, [sp, #8]
 800304a:	2200      	movs	r2, #0
 800304c:	9201      	str	r2, [sp, #4]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	4623      	mov	r3, r4
 8003052:	2201      	movs	r2, #1
 8003054:	f7ff fd90 	bl	8002b78 <_ZN7label_tC1EPcttttt>
    context->tft->Print(&ist_label);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f107 0208 	add.w	r2, r7, #8
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fd78 	bl	8001b58 <_ZN7ILI93415PrintEP7label_t>

    temperate_render(context);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f981 	bl	8003370 <_Z16temperate_renderP9context_t>

    context->pid_delay_ms = Millis();
 800306e:	f000 fbb7 	bl	80037e0 <_Z6Millisv>
 8003072:	4603      	mov	r3, r0
 8003074:	460c      	mov	r4, r1
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	e9c2 3408 	strd	r3, r4, [r2, #32]
    context->temperate_display_delay_ms = Millis();
 800307c:	f000 fbb0 	bl	80037e0 <_Z6Millisv>
 8003080:	4603      	mov	r3, r0
 8003082:	460c      	mov	r4, r1
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

    context->currentState = STATE_TEMPERATE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2206      	movs	r2, #6
 800308e:	771a      	strb	r2, [r3, #28]
}
 8003090:	bf00      	nop
 8003092:	3764      	adds	r7, #100	; 0x64
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}
 8003098:	2000033c 	.word	0x2000033c
 800309c:	2000037c 	.word	0x2000037c
 80030a0:	2000034c 	.word	0x2000034c
 80030a4:	2000032c 	.word	0x2000032c
 80030a8:	2000038c 	.word	0x2000038c
 80030ac:	2000036c 	.word	0x2000036c
 80030b0:	2000031c 	.word	0x2000031c
 80030b4:	08009378 	.word	0x08009378
 80030b8:	08009384 	.word	0x08009384

080030bc <_Z16temperate_updateP9context_t>:

void temperate_update(context_t *context)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
    uint8_t updateDisplay = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]

    if (context->touch->CheckRegion(&plusImg))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	49a1      	ldr	r1, [pc, #644]	; (8003354 <_Z16temperate_updateP9context_t+0x298>)
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fa5e 	bl	8002590 <_ZN5Touch11CheckRegionEP10img_data_t>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01c      	beq.n	800311e <_Z16temperate_updateP9context_t+0x62>
    {
        uint16_t target = context->pid->GetTarget();
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe f810 	bl	800110e <_ZNK13ControllerPID9GetTargetEv>
 80030ee:	eef0 7a40 	vmov.f32	s15, s0
 80030f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030f6:	ee17 3a90 	vmov	r3, s15
 80030fa:	817b      	strh	r3, [r7, #10]
        target++;
 80030fc:	897b      	ldrh	r3, [r7, #10]
 80030fe:	3301      	adds	r3, #1
 8003100:	817b      	strh	r3, [r7, #10]
        context->pid->SetTarget(target);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	897a      	ldrh	r2, [r7, #10]
 8003108:	ee07 2a90 	vmov	s15, r2
 800310c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003110:	eeb0 0a67 	vmov.f32	s0, s15
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe f809 	bl	800112c <_ZN13ControllerPID9SetTargetEf>
        updateDisplay = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
    }

    if (context->touch->CheckRegion(&minusImg))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	498d      	ldr	r1, [pc, #564]	; (8003358 <_Z16temperate_updateP9context_t+0x29c>)
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fa33 	bl	8002590 <_ZN5Touch11CheckRegionEP10img_data_t>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01f      	beq.n	800317a <_Z16temperate_updateP9context_t+0xbe>
    {
        uint16_t target = context->pid->GetTarget();
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd ffe5 	bl	800110e <_ZNK13ControllerPID9GetTargetEv>
 8003144:	eef0 7a40 	vmov.f32	s15, s0
 8003148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800314c:	ee17 3a90 	vmov	r3, s15
 8003150:	81bb      	strh	r3, [r7, #12]
        if (target != 0)
 8003152:	89bb      	ldrh	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <_Z16temperate_updateP9context_t+0xa2>
            target--;
 8003158:	89bb      	ldrh	r3, [r7, #12]
 800315a:	3b01      	subs	r3, #1
 800315c:	81bb      	strh	r3, [r7, #12]
        context->pid->SetTarget(target);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	89ba      	ldrh	r2, [r7, #12]
 8003164:	ee07 2a90 	vmov	s15, r2
 8003168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316c:	eeb0 0a67 	vmov.f32	s0, s15
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd ffdb 	bl	800112c <_ZN13ControllerPID9SetTargetEf>
        updateDisplay = 1;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
    }

    if (context->temperate_active == 0)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7f9b      	ldrb	r3, [r3, #30]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d117      	bne.n	80031b2 <_Z16temperate_updateP9context_t+0xf6>
    {
        if (context->touch->CheckRegion(&playImg))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	4975      	ldr	r1, [pc, #468]	; (800335c <_Z16temperate_updateP9context_t+0x2a0>)
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fa01 	bl	8002590 <_ZN5Touch11CheckRegionEP10img_data_t>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d020      	beq.n	80031e0 <_Z16temperate_updateP9context_t+0x124>
        {
            context->tft->Image(&pauseImg);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	496f      	ldr	r1, [pc, #444]	; (8003360 <_Z16temperate_updateP9context_t+0x2a4>)
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fd16 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>
            context->temperate_active = 1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	779a      	strb	r2, [r3, #30]
 80031b0:	e016      	b.n	80031e0 <_Z16temperate_updateP9context_t+0x124>
        }
    }
    else
    {
        if (context->touch->CheckRegion(&pauseImg))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	496a      	ldr	r1, [pc, #424]	; (8003360 <_Z16temperate_updateP9context_t+0x2a4>)
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f9e9 	bl	8002590 <_ZN5Touch11CheckRegionEP10img_data_t>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <_Z16temperate_updateP9context_t+0x124>
        {
            context->tft->Image(&playImg);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4962      	ldr	r1, [pc, #392]	; (800335c <_Z16temperate_updateP9context_t+0x2a0>)
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fcfe 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>
            context->temperate_active = 0;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	779a      	strb	r2, [r3, #30]
        }
    }

    if (context->touch->CheckRegion(&lightOnImg))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	495f      	ldr	r1, [pc, #380]	; (8003364 <_Z16temperate_updateP9context_t+0x2a8>)
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f9d2 	bl	8002590 <_ZN5Touch11CheckRegionEP10img_data_t>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf14      	ite	ne
 80031f2:	2301      	movne	r3, #1
 80031f4:	2300      	moveq	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d023      	beq.n	8003244 <_Z16temperate_updateP9context_t+0x188>
    {
        if (context->light->GetDuty() == 0)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fe65 	bl	8001ed0 <_ZNK4Load7GetDutyEv>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <_Z16temperate_updateP9context_t+0x172>
        {
            context->light->On();
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fe64 	bl	8001ee8 <_ZN4Load2OnEv>
            context->tft->Image(&lightOnImg);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	494f      	ldr	r1, [pc, #316]	; (8003364 <_Z16temperate_updateP9context_t+0x2a8>)
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fcd5 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>
 800322c:	e00a      	b.n	8003244 <_Z16temperate_updateP9context_t+0x188>
        }
        else
        {
            context->light->Off();
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fe64 	bl	8001f00 <_ZN4Load3OffEv>
            context->tft->Image(&lightOffImg);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	494a      	ldr	r1, [pc, #296]	; (8003368 <_Z16temperate_updateP9context_t+0x2ac>)
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fcc9 	bl	8001bd6 <_ZN7ILI93415ImageEP10img_data_t>
        }
    }

    if (context->touch->CheckRegion(&returnImg))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4948      	ldr	r1, [pc, #288]	; (800336c <_Z16temperate_updateP9context_t+0x2b0>)
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff f9a0 	bl	8002590 <_ZN5Touch11CheckRegionEP10img_data_t>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf14      	ite	ne
 8003256:	2301      	movne	r3, #1
 8003258:	2300      	moveq	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <_Z16temperate_updateP9context_t+0x1aa>
    {
        context->currentState = STATE_MENU_INIT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	771a      	strb	r2, [r3, #28]
    }

    // PID-Controller aktualisieren und Heater ansteuern, wenn aktiv.
    if (Millis() > context->pid_delay_ms)
 8003266:	f000 fabb 	bl	80037e0 <_Z6Millisv>
 800326a:	460a      	mov	r2, r1
 800326c:	4601      	mov	r1, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003274:	4294      	cmp	r4, r2
 8003276:	bf08      	it	eq
 8003278:	428b      	cmpeq	r3, r1
 800327a:	bf34      	ite	cc
 800327c:	2301      	movcc	r3, #1
 800327e:	2300      	movcs	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d03b      	beq.n	80032fe <_Z16temperate_updateP9context_t+0x242>
    {
        if (context->temperate_active)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7f9b      	ldrb	r3, [r3, #30]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d027      	beq.n	80032de <_Z16temperate_updateP9context_t+0x222>
        {
            context->temp->Update();
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f8bd 	bl	8002412 <_ZN8MAX318556UpdateEv>
            context->pid->Update(context->temp->ExternalTemp());
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68dc      	ldr	r4, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff f8f3 	bl	800248c <_ZNK8MAX3185512ExternalTempEv>
 80032a6:	eef0 7a40 	vmov.f32	s15, s0
 80032aa:	eeb0 0a67 	vmov.f32	s0, s15
 80032ae:	4620      	mov	r0, r4
 80032b0:	f7fd fea4 	bl	8000ffc <_ZN13ControllerPID6UpdateEf>
            uint8_t duty = (uint8_t) context->pid->GetOutput();
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd ff19 	bl	80010f0 <_ZNK13ControllerPID9GetOutputEv>
 80032be:	eef0 7a40 	vmov.f32	s15, s0
 80032c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c6:	edc7 7a00 	vstr	s15, [r7]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	727b      	strb	r3, [r7, #9]
            context->heater->SetDuty(duty);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	7a7a      	ldrb	r2, [r7, #9]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fdb4 	bl	8001e44 <_ZN4Load7SetDutyEh>
 80032dc:	e004      	b.n	80032e8 <_Z16temperate_updateP9context_t+0x22c>
        }
        else
        {
            context->heater->Off();
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fe0c 	bl	8001f00 <_ZN4Load3OffEv>
        }

        context->pid_delay_ms = Millis() + PID_DELAY_MS;
 80032e8:	f000 fa7a 	bl	80037e0 <_Z6Millisv>
 80032ec:	460a      	mov	r2, r1
 80032ee:	4601      	mov	r1, r0
 80032f0:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
 80032f4:	f142 0400 	adc.w	r4, r2, #0
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	e9c2 3408 	strd	r3, r4, [r2, #32]
    }

    // Display aktualisieren, wenn Input erfolgt, oder Delay abgelaufen ist.
    if (updateDisplay || Millis() > context->temperate_display_delay_ms)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <_Z16temperate_updateP9context_t+0x25e>
 8003304:	f000 fa6c 	bl	80037e0 <_Z6Millisv>
 8003308:	460a      	mov	r2, r1
 800330a:	4601      	mov	r1, r0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003312:	4294      	cmp	r4, r2
 8003314:	bf08      	it	eq
 8003316:	428b      	cmpeq	r3, r1
 8003318:	d201      	bcs.n	800331e <_Z16temperate_updateP9context_t+0x262>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <_Z16temperate_updateP9context_t+0x264>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d012      	beq.n	800334a <_Z16temperate_updateP9context_t+0x28e>
    {
        context->temp->Update();
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f872 	bl	8002412 <_ZN8MAX318556UpdateEv>
        temperate_render(context);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f81e 	bl	8003370 <_Z16temperate_renderP9context_t>

        context->temperate_display_delay_ms = Millis() + DELAY_DISPLAY_UPDATE_MS;
 8003334:	f000 fa54 	bl	80037e0 <_Z6Millisv>
 8003338:	460a      	mov	r2, r1
 800333a:	4601      	mov	r1, r0
 800333c:	f511 737a 	adds.w	r3, r1, #1000	; 0x3e8
 8003340:	f142 0400 	adc.w	r4, r2, #0
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    }
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bd90      	pop	{r4, r7, pc}
 8003352:	bf00      	nop
 8003354:	2000037c 	.word	0x2000037c
 8003358:	2000033c 	.word	0x2000033c
 800335c:	2000036c 	.word	0x2000036c
 8003360:	2000034c 	.word	0x2000034c
 8003364:	2000032c 	.word	0x2000032c
 8003368:	2000031c 	.word	0x2000031c
 800336c:	2000038c 	.word	0x2000038c

08003370 <_Z16temperate_renderP9context_t>:

/*
 * Hilfsfunktion, die die Benutzeroberfläche im Temperier-Modus aktualisiert
 */
void temperate_render(context_t *context)
{
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af02      	add	r7, sp, #8
 8003376:	6078      	str	r0, [r7, #4]
    uint16_t pad = 10;
 8003378:	230a      	movs	r3, #10
 800337a:	81fb      	strh	r3, [r7, #14]
    static label_t soll_value(3, pad, CHAR_HEIGHT + 2 * pad, COLOR_BLUE, COLOR_WHITE);
 800337c:	4bad      	ldr	r3, [pc, #692]	; (8003634 <_Z16temperate_renderP9context_t+0x2c4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d112      	bne.n	80033ae <_Z16temperate_renderP9context_t+0x3e>
 8003388:	89fb      	ldrh	r3, [r7, #14]
 800338a:	3304      	adds	r3, #4
 800338c:	b29b      	uxth	r3, r3
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	b299      	uxth	r1, r3
 8003392:	89fa      	ldrh	r2, [r7, #14]
 8003394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	231f      	movs	r3, #31
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	460b      	mov	r3, r1
 80033a0:	2103      	movs	r1, #3
 80033a2:	48a5      	ldr	r0, [pc, #660]	; (8003638 <_Z16temperate_renderP9context_t+0x2c8>)
 80033a4:	f7ff fc0c 	bl	8002bc0 <_ZN7label_tC1Ettttt>
 80033a8:	4ba2      	ldr	r3, [pc, #648]	; (8003634 <_Z16temperate_renderP9context_t+0x2c4>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
    static label_t ist_value(3, pad, playImg.y + CHAR_HEIGHT + pad, COLOR_BLUE, COLOR_WHITE);
 80033ae:	4ba3      	ldr	r3, [pc, #652]	; (800363c <_Z16temperate_renderP9context_t+0x2cc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d114      	bne.n	80033e4 <_Z16temperate_renderP9context_t+0x74>
 80033ba:	4ba1      	ldr	r3, [pc, #644]	; (8003640 <_Z16temperate_renderP9context_t+0x2d0>)
 80033bc:	88da      	ldrh	r2, [r3, #6]
 80033be:	89fb      	ldrh	r3, [r7, #14]
 80033c0:	4413      	add	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3308      	adds	r3, #8
 80033c6:	b299      	uxth	r1, r3
 80033c8:	89fa      	ldrh	r2, [r7, #14]
 80033ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	231f      	movs	r3, #31
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	2103      	movs	r1, #3
 80033d8:	489a      	ldr	r0, [pc, #616]	; (8003644 <_Z16temperate_renderP9context_t+0x2d4>)
 80033da:	f7ff fbf1 	bl	8002bc0 <_ZN7label_tC1Ettttt>
 80033de:	4b97      	ldr	r3, [pc, #604]	; (800363c <_Z16temperate_renderP9context_t+0x2cc>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
    static label_t duty_label(1, pad, lightOnImg.y, COLOR_BLACK, COLOR_WHITE);
 80033e4:	4b98      	ldr	r3, [pc, #608]	; (8003648 <_Z16temperate_renderP9context_t+0x2d8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10f      	bne.n	8003410 <_Z16temperate_renderP9context_t+0xa0>
 80033f0:	4b96      	ldr	r3, [pc, #600]	; (800364c <_Z16temperate_renderP9context_t+0x2dc>)
 80033f2:	88d9      	ldrh	r1, [r3, #6]
 80033f4:	89fa      	ldrh	r2, [r7, #14]
 80033f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	2300      	movs	r3, #0
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	460b      	mov	r3, r1
 8003402:	2101      	movs	r1, #1
 8003404:	4892      	ldr	r0, [pc, #584]	; (8003650 <_Z16temperate_renderP9context_t+0x2e0>)
 8003406:	f7ff fbdb 	bl	8002bc0 <_ZN7label_tC1Ettttt>
 800340a:	4b8f      	ldr	r3, [pc, #572]	; (8003648 <_Z16temperate_renderP9context_t+0x2d8>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]
    static label_t p_label(2, pad, lightOnImg.y + lightOnImg.h + pad, COLOR_BLACK, COLOR_WHITE);
 8003410:	4b90      	ldr	r3, [pc, #576]	; (8003654 <_Z16temperate_renderP9context_t+0x2e4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d116      	bne.n	800344a <_Z16temperate_renderP9context_t+0xda>
 800341c:	4b8b      	ldr	r3, [pc, #556]	; (800364c <_Z16temperate_renderP9context_t+0x2dc>)
 800341e:	88da      	ldrh	r2, [r3, #6]
 8003420:	4b8a      	ldr	r3, [pc, #552]	; (800364c <_Z16temperate_renderP9context_t+0x2dc>)
 8003422:	895b      	ldrh	r3, [r3, #10]
 8003424:	4413      	add	r3, r2
 8003426:	b29a      	uxth	r2, r3
 8003428:	89fb      	ldrh	r3, [r7, #14]
 800342a:	4413      	add	r3, r2
 800342c:	b299      	uxth	r1, r3
 800342e:	89fa      	ldrh	r2, [r7, #14]
 8003430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	460b      	mov	r3, r1
 800343c:	2102      	movs	r1, #2
 800343e:	4886      	ldr	r0, [pc, #536]	; (8003658 <_Z16temperate_renderP9context_t+0x2e8>)
 8003440:	f7ff fbbe 	bl	8002bc0 <_ZN7label_tC1Ettttt>
 8003444:	4b83      	ldr	r3, [pc, #524]	; (8003654 <_Z16temperate_renderP9context_t+0x2e4>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]
    static label_t i_label(2, pad, p_label.y + p_label.size * CHAR_HEIGHT + pad, COLOR_BLACK, COLOR_WHITE);
 800344a:	4b84      	ldr	r3, [pc, #528]	; (800365c <_Z16temperate_renderP9context_t+0x2ec>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <_Z16temperate_renderP9context_t+0x118>
 8003456:	4b80      	ldr	r3, [pc, #512]	; (8003658 <_Z16temperate_renderP9context_t+0x2e8>)
 8003458:	8b1a      	ldrh	r2, [r3, #24]
 800345a:	4b7f      	ldr	r3, [pc, #508]	; (8003658 <_Z16temperate_renderP9context_t+0x2e8>)
 800345c:	8a9b      	ldrh	r3, [r3, #20]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	b29b      	uxth	r3, r3
 8003462:	4413      	add	r3, r2
 8003464:	b29a      	uxth	r2, r3
 8003466:	89fb      	ldrh	r3, [r7, #14]
 8003468:	4413      	add	r3, r2
 800346a:	b299      	uxth	r1, r3
 800346c:	89fa      	ldrh	r2, [r7, #14]
 800346e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	2300      	movs	r3, #0
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	460b      	mov	r3, r1
 800347a:	2102      	movs	r1, #2
 800347c:	4878      	ldr	r0, [pc, #480]	; (8003660 <_Z16temperate_renderP9context_t+0x2f0>)
 800347e:	f7ff fb9f 	bl	8002bc0 <_ZN7label_tC1Ettttt>
 8003482:	4b76      	ldr	r3, [pc, #472]	; (800365c <_Z16temperate_renderP9context_t+0x2ec>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
    static label_t d_label(2, pad, i_label.y + i_label.size * CHAR_HEIGHT + pad, COLOR_BLACK, COLOR_WHITE);
 8003488:	4b76      	ldr	r3, [pc, #472]	; (8003664 <_Z16temperate_renderP9context_t+0x2f4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d118      	bne.n	80034c6 <_Z16temperate_renderP9context_t+0x156>
 8003494:	4b72      	ldr	r3, [pc, #456]	; (8003660 <_Z16temperate_renderP9context_t+0x2f0>)
 8003496:	8b1a      	ldrh	r2, [r3, #24]
 8003498:	4b71      	ldr	r3, [pc, #452]	; (8003660 <_Z16temperate_renderP9context_t+0x2f0>)
 800349a:	8a9b      	ldrh	r3, [r3, #20]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	89fb      	ldrh	r3, [r7, #14]
 80034a6:	4413      	add	r3, r2
 80034a8:	b299      	uxth	r1, r3
 80034aa:	89fa      	ldrh	r2, [r7, #14]
 80034ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	2300      	movs	r3, #0
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	460b      	mov	r3, r1
 80034b8:	2102      	movs	r1, #2
 80034ba:	486b      	ldr	r0, [pc, #428]	; (8003668 <_Z16temperate_renderP9context_t+0x2f8>)
 80034bc:	f7ff fb80 	bl	8002bc0 <_ZN7label_tC1Ettttt>
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <_Z16temperate_renderP9context_t+0x2f4>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

    sprintf(soll_value.str, "%.2f", context->pid->GetTarget());
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fe1f 	bl	800110e <_ZNK13ControllerPID9GetTargetEv>
 80034d0:	ee10 3a10 	vmov	r3, s0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd f837 	bl	8000548 <__aeabi_f2d>
 80034da:	4603      	mov	r3, r0
 80034dc:	460c      	mov	r4, r1
 80034de:	461a      	mov	r2, r3
 80034e0:	4623      	mov	r3, r4
 80034e2:	4962      	ldr	r1, [pc, #392]	; (800366c <_Z16temperate_renderP9context_t+0x2fc>)
 80034e4:	4854      	ldr	r0, [pc, #336]	; (8003638 <_Z16temperate_renderP9context_t+0x2c8>)
 80034e6:	f004 fc11 	bl	8007d0c <siprintf>
    sprintf(ist_value.str, "%.2f", context->temp->ExternalTemp());
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe ffcc 	bl	800248c <_ZNK8MAX3185512ExternalTempEv>
 80034f4:	ee10 3a10 	vmov	r3, s0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd f825 	bl	8000548 <__aeabi_f2d>
 80034fe:	4603      	mov	r3, r0
 8003500:	460c      	mov	r4, r1
 8003502:	461a      	mov	r2, r3
 8003504:	4623      	mov	r3, r4
 8003506:	4959      	ldr	r1, [pc, #356]	; (800366c <_Z16temperate_renderP9context_t+0x2fc>)
 8003508:	484e      	ldr	r0, [pc, #312]	; (8003644 <_Z16temperate_renderP9context_t+0x2d4>)
 800350a:	f004 fbff 	bl	8007d0c <siprintf>
    sprintf(duty_label.str, "Duty: %3i", context->heater->GetDuty());
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fcdc 	bl	8001ed0 <_ZNK4Load7GetDutyEv>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	4954      	ldr	r1, [pc, #336]	; (8003670 <_Z16temperate_renderP9context_t+0x300>)
 800351e:	484c      	ldr	r0, [pc, #304]	; (8003650 <_Z16temperate_renderP9context_t+0x2e0>)
 8003520:	f004 fbf4 	bl	8007d0c <siprintf>
    sprintf(p_label.str, "P %.2f", context->pid->GetProportional());
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fe2e 	bl	800118a <_ZNK13ControllerPID15GetProportionalEv>
 800352e:	ee10 3a10 	vmov	r3, s0
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd f808 	bl	8000548 <__aeabi_f2d>
 8003538:	4603      	mov	r3, r0
 800353a:	460c      	mov	r4, r1
 800353c:	461a      	mov	r2, r3
 800353e:	4623      	mov	r3, r4
 8003540:	494c      	ldr	r1, [pc, #304]	; (8003674 <_Z16temperate_renderP9context_t+0x304>)
 8003542:	4845      	ldr	r0, [pc, #276]	; (8003658 <_Z16temperate_renderP9context_t+0x2e8>)
 8003544:	f004 fbe2 	bl	8007d0c <siprintf>
    sprintf(i_label.str, "I %.2f", context->pid->GetIntegral());
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fd fe2b 	bl	80011a8 <_ZNK13ControllerPID11GetIntegralEv>
 8003552:	ee10 3a10 	vmov	r3, s0
 8003556:	4618      	mov	r0, r3
 8003558:	f7fc fff6 	bl	8000548 <__aeabi_f2d>
 800355c:	4603      	mov	r3, r0
 800355e:	460c      	mov	r4, r1
 8003560:	461a      	mov	r2, r3
 8003562:	4623      	mov	r3, r4
 8003564:	4944      	ldr	r1, [pc, #272]	; (8003678 <_Z16temperate_renderP9context_t+0x308>)
 8003566:	483e      	ldr	r0, [pc, #248]	; (8003660 <_Z16temperate_renderP9context_t+0x2f0>)
 8003568:	f004 fbd0 	bl	8007d0c <siprintf>
    sprintf(d_label.str, "D %.2f", context->pid->GetDerivative());
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fe28 	bl	80011c6 <_ZNK13ControllerPID13GetDerivativeEv>
 8003576:	ee10 3a10 	vmov	r3, s0
 800357a:	4618      	mov	r0, r3
 800357c:	f7fc ffe4 	bl	8000548 <__aeabi_f2d>
 8003580:	4603      	mov	r3, r0
 8003582:	460c      	mov	r4, r1
 8003584:	461a      	mov	r2, r3
 8003586:	4623      	mov	r3, r4
 8003588:	493c      	ldr	r1, [pc, #240]	; (800367c <_Z16temperate_renderP9context_t+0x30c>)
 800358a:	4837      	ldr	r0, [pc, #220]	; (8003668 <_Z16temperate_renderP9context_t+0x2f8>)
 800358c:	f004 fbbe 	bl	8007d0c <siprintf>

    context->tft->Print(&soll_value);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4928      	ldr	r1, [pc, #160]	; (8003638 <_Z16temperate_renderP9context_t+0x2c8>)
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fade 	bl	8001b58 <_ZN7ILI93415PrintEP7label_t>
    context->tft->Print(&ist_value);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4928      	ldr	r1, [pc, #160]	; (8003644 <_Z16temperate_renderP9context_t+0x2d4>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fad8 	bl	8001b58 <_ZN7ILI93415PrintEP7label_t>
    context->tft->Print(&duty_label);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4928      	ldr	r1, [pc, #160]	; (8003650 <_Z16temperate_renderP9context_t+0x2e0>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fad2 	bl	8001b58 <_ZN7ILI93415PrintEP7label_t>
    context->tft->Print(&p_label);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4927      	ldr	r1, [pc, #156]	; (8003658 <_Z16temperate_renderP9context_t+0x2e8>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe facc 	bl	8001b58 <_ZN7ILI93415PrintEP7label_t>
    context->tft->Print(&i_label);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4926      	ldr	r1, [pc, #152]	; (8003660 <_Z16temperate_renderP9context_t+0x2f0>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fac6 	bl	8001b58 <_ZN7ILI93415PrintEP7label_t>
    context->tft->Print(&d_label);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4925      	ldr	r1, [pc, #148]	; (8003668 <_Z16temperate_renderP9context_t+0x2f8>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fac0 	bl	8001b58 <_ZN7ILI93415PrintEP7label_t>

    uint16_t x1 = pad + (context->heater->GetDuty() * (lightOnImg.x - 2 * pad) / 100);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fc77 	bl	8001ed0 <_ZNK4Load7GetDutyEv>
 80035e2:	4603      	mov	r3, r0
 80035e4:	461a      	mov	r2, r3
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <_Z16temperate_renderP9context_t+0x2dc>)
 80035e8:	889b      	ldrh	r3, [r3, #4]
 80035ea:	4619      	mov	r1, r3
 80035ec:	89fb      	ldrh	r3, [r7, #14]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	1acb      	subs	r3, r1, r3
 80035f2:	fb03 f302 	mul.w	r3, r3, r2
 80035f6:	4a22      	ldr	r2, [pc, #136]	; (8003680 <_Z16temperate_renderP9context_t+0x310>)
 80035f8:	fb82 1203 	smull	r1, r2, r2, r3
 80035fc:	1152      	asrs	r2, r2, #5
 80035fe:	17db      	asrs	r3, r3, #31
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	b29a      	uxth	r2, r3
 8003604:	89fb      	ldrh	r3, [r7, #14]
 8003606:	4413      	add	r3, r2
 8003608:	81bb      	strh	r3, [r7, #12]

    context->tft->FillRect(pad, duty_label.y + duty_label.size * CHAR_HEIGHT + pad,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <_Z16temperate_renderP9context_t+0x2e0>)
 8003610:	8b1a      	ldrh	r2, [r3, #24]
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <_Z16temperate_renderP9context_t+0x2e0>)
 8003614:	8a9b      	ldrh	r3, [r3, #20]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	b29b      	uxth	r3, r3
 800361a:	4413      	add	r3, r2
 800361c:	b29a      	uxth	r2, r3
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	4413      	add	r3, r2
 8003622:	b29c      	uxth	r4, r3
            lightOnImg.x - pad, lightOnImg.y + lightOnImg.h, COLOR_WHITE);
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <_Z16temperate_renderP9context_t+0x2dc>)
 8003626:	889a      	ldrh	r2, [r3, #4]
    context->tft->FillRect(pad, duty_label.y + duty_label.size * CHAR_HEIGHT + pad,
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	b29d      	uxth	r5, r3
            lightOnImg.x - pad, lightOnImg.y + lightOnImg.h, COLOR_WHITE);
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <_Z16temperate_renderP9context_t+0x2dc>)
 8003630:	88da      	ldrh	r2, [r3, #6]
 8003632:	e027      	b.n	8003684 <_Z16temperate_renderP9context_t+0x314>
 8003634:	200003cc 	.word	0x200003cc
 8003638:	200003ac 	.word	0x200003ac
 800363c:	200003f0 	.word	0x200003f0
 8003640:	2000036c 	.word	0x2000036c
 8003644:	200003d0 	.word	0x200003d0
 8003648:	20000414 	.word	0x20000414
 800364c:	2000032c 	.word	0x2000032c
 8003650:	200003f4 	.word	0x200003f4
 8003654:	20000438 	.word	0x20000438
 8003658:	20000418 	.word	0x20000418
 800365c:	2000045c 	.word	0x2000045c
 8003660:	2000043c 	.word	0x2000043c
 8003664:	20000480 	.word	0x20000480
 8003668:	20000460 	.word	0x20000460
 800366c:	08009390 	.word	0x08009390
 8003670:	08009398 	.word	0x08009398
 8003674:	080093a4 	.word	0x080093a4
 8003678:	080093ac 	.word	0x080093ac
 800367c:	080093b4 	.word	0x080093b4
 8003680:	51eb851f 	.word	0x51eb851f
 8003684:	4b26      	ldr	r3, [pc, #152]	; (8003720 <_Z16temperate_renderP9context_t+0x3b0>)
 8003686:	895b      	ldrh	r3, [r3, #10]
    context->tft->FillRect(pad, duty_label.y + duty_label.size * CHAR_HEIGHT + pad,
 8003688:	4413      	add	r3, r2
 800368a:	b29b      	uxth	r3, r3
 800368c:	89f9      	ldrh	r1, [r7, #14]
 800368e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003692:	9201      	str	r2, [sp, #4]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	462b      	mov	r3, r5
 8003698:	4622      	mov	r2, r4
 800369a:	f7fe f86c 	bl	8001776 <_ZN7ILI93418FillRectEttttt>
    context->tft->DrawRect(pad, duty_label.y + duty_label.size * CHAR_HEIGHT + pad,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <_Z16temperate_renderP9context_t+0x3b4>)
 80036a4:	8b1a      	ldrh	r2, [r3, #24]
 80036a6:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <_Z16temperate_renderP9context_t+0x3b4>)
 80036a8:	8a9b      	ldrh	r3, [r3, #20]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	89fb      	ldrh	r3, [r7, #14]
 80036b4:	4413      	add	r3, r2
 80036b6:	b29c      	uxth	r4, r3
            lightOnImg.x - pad, lightOnImg.y + lightOnImg.h, COLOR_BLACK);
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <_Z16temperate_renderP9context_t+0x3b0>)
 80036ba:	889a      	ldrh	r2, [r3, #4]
    context->tft->DrawRect(pad, duty_label.y + duty_label.size * CHAR_HEIGHT + pad,
 80036bc:	89fb      	ldrh	r3, [r7, #14]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	b29d      	uxth	r5, r3
            lightOnImg.x - pad, lightOnImg.y + lightOnImg.h, COLOR_BLACK);
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <_Z16temperate_renderP9context_t+0x3b0>)
 80036c4:	88da      	ldrh	r2, [r3, #6]
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <_Z16temperate_renderP9context_t+0x3b0>)
 80036c8:	895b      	ldrh	r3, [r3, #10]
    context->tft->DrawRect(pad, duty_label.y + duty_label.size * CHAR_HEIGHT + pad,
 80036ca:	4413      	add	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	89f9      	ldrh	r1, [r7, #14]
 80036d0:	2200      	movs	r2, #0
 80036d2:	9201      	str	r2, [sp, #4]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	462b      	mov	r3, r5
 80036d8:	4622      	mov	r2, r4
 80036da:	f7fe f803 	bl	80016e4 <_ZN7ILI93418DrawRectEttttt>
    context->tft->FillRect(pad, duty_label.y + duty_label.size * CHAR_HEIGHT + pad,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <_Z16temperate_renderP9context_t+0x3b4>)
 80036e4:	8b1a      	ldrh	r2, [r3, #24]
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <_Z16temperate_renderP9context_t+0x3b4>)
 80036e8:	8a9b      	ldrh	r3, [r3, #20]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	89fb      	ldrh	r3, [r7, #14]
 80036f4:	4413      	add	r3, r2
 80036f6:	b29c      	uxth	r4, r3
            x1, lightOnImg.y + lightOnImg.h, COLOR_RED);
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <_Z16temperate_renderP9context_t+0x3b0>)
 80036fa:	88da      	ldrh	r2, [r3, #6]
 80036fc:	4b08      	ldr	r3, [pc, #32]	; (8003720 <_Z16temperate_renderP9context_t+0x3b0>)
 80036fe:	895b      	ldrh	r3, [r3, #10]
    context->tft->FillRect(pad, duty_label.y + duty_label.size * CHAR_HEIGHT + pad,
 8003700:	4413      	add	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	89bd      	ldrh	r5, [r7, #12]
 8003706:	89f9      	ldrh	r1, [r7, #14]
 8003708:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800370c:	9201      	str	r2, [sp, #4]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	462b      	mov	r3, r5
 8003712:	4622      	mov	r2, r4
 8003714:	f7fe f82f 	bl	8001776 <_ZN7ILI93418FillRectEttttt>
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bdb0      	pop	{r4, r5, r7, pc}
 8003720:	2000032c 	.word	0x2000032c
 8003724:	200003f4 	.word	0x200003f4

08003728 <_Z12options_initP9context_t>:

/*
 * Initialisiert Optionen.
 */
void options_init(context_t *context)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
    context->currentState = STATE_OPTIONS;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2208      	movs	r2, #8
 8003734:	771a      	strb	r2, [r3, #28]
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <_Z14options_updateP9context_t>:

/*
 * Initialisiert System.
 */
void options_update(context_t *context)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
    context->currentState = STATE_MENU_INIT;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	771a      	strb	r2, [r3, #28]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <_Z10error_showP9context_t>:

/*
 * Gibt Fehlermeldung auf Display aus.
 */
void error_show(context_t *context)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <_Z6Microsv>:
 * Zeit seit Systemstart in µs.
 * Basis für alle Zeiterfassung ist TIM2 (32-bit timer).
 * Zusammen mit interrupt_data.timer_overflow kann eine Gesamtzeit von ca. 3257 Tagen erreicht werden
 */
uint64_t Micros()
{
 8003770:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8003774:	af00      	add	r7, sp, #0
    return TIM2->CNT + (interrupt_data.timerOverflow - 1) * 0xffffffff;
 8003776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	4698      	mov	r8, r3
 800377e:	f04f 0900 	mov.w	r9, #0
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <_Z6Microsv+0x6c>)
 8003784:	e9d3 5600 	ldrd	r5, r6, [r3]
 8003788:	46ab      	mov	fp, r5
 800378a:	46b4      	mov	ip, r6
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	ea4f 72cc 	mov.w	r2, ip, lsl #31
 8003798:	ea42 025b 	orr.w	r2, r2, fp, lsr #1
 800379c:	ea4f 71cb 	mov.w	r1, fp, lsl #31
 80037a0:	468b      	mov	fp, r1
 80037a2:	4694      	mov	ip, r2
 80037a4:	ebbb 0b05 	subs.w	fp, fp, r5
 80037a8:	eb6c 0c06 	sbc.w	ip, ip, r6
 80037ac:	eb1b 030b 	adds.w	r3, fp, fp
 80037b0:	eb4c 040c 	adc.w	r4, ip, ip
 80037b4:	469b      	mov	fp, r3
 80037b6:	46a4      	mov	ip, r4
 80037b8:	eb1b 0305 	adds.w	r3, fp, r5
 80037bc:	eb4c 0406 	adc.w	r4, ip, r6
 80037c0:	eb13 0108 	adds.w	r1, r3, r8
 80037c4:	eb44 0209 	adc.w	r2, r4, r9
 80037c8:	1c4b      	adds	r3, r1, #1
 80037ca:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	4621      	mov	r1, r4
 80037d2:	46bd      	mov	sp, r7
 80037d4:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000518 	.word	0x20000518

080037e0 <_Z6Millisv>:

/*
 * Zeit seit Systemstart in ms.
 */
uint64_t Millis()
{
 80037e0:	b598      	push	{r3, r4, r7, lr}
 80037e2:	af00      	add	r7, sp, #0
    return Micros() / 1000;
 80037e4:	f7ff ffc4 	bl	8003770 <_Z6Microsv>
 80037e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	f7fd f9da 	bl	8000ba8 <__aeabi_uldivmod>
 80037f4:	4603      	mov	r3, r0
 80037f6:	460c      	mov	r4, r1
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	4621      	mov	r1, r4
 80037fc:	bd98      	pop	{r3, r4, r7, pc}
	...

08003800 <_Z41__static_initialization_and_destruction_0ii>:
 */
void Delay_MS(uint64_t ms)
{
    uint64_t delay = Millis() + ms;
    while (Millis() < delay);
}
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af04      	add	r7, sp, #16
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d179      	bne.n	8003904 <_Z41__static_initialization_and_destruction_0ii+0x104>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003816:	4293      	cmp	r3, r2
 8003818:	d174      	bne.n	8003904 <_Z41__static_initialization_and_destruction_0ii+0x104>
static img_data_t lightOffImg(lightOffData, 0, 0, 64, 64, 4096);
 800381a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800381e:	9302      	str	r3, [sp, #8]
 8003820:	2340      	movs	r3, #64	; 0x40
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	2340      	movs	r3, #64	; 0x40
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2300      	movs	r3, #0
 800382a:	2200      	movs	r2, #0
 800382c:	4937      	ldr	r1, [pc, #220]	; (800390c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800382e:	4838      	ldr	r0, [pc, #224]	; (8003910 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8003830:	f7fd fcf8 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t lightOnImg(lightOnData, 0, 0, 64, 64, 4096);
 8003834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003838:	9302      	str	r3, [sp, #8]
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	2200      	movs	r2, #0
 8003846:	4933      	ldr	r1, [pc, #204]	; (8003914 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8003848:	4833      	ldr	r0, [pc, #204]	; (8003918 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800384a:	f7fd fceb 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t minusImg(minusData, 0, 0, 48, 48, 2304);
 800384e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003852:	9302      	str	r3, [sp, #8]
 8003854:	2330      	movs	r3, #48	; 0x30
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	2330      	movs	r3, #48	; 0x30
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2300      	movs	r3, #0
 800385e:	2200      	movs	r2, #0
 8003860:	492e      	ldr	r1, [pc, #184]	; (800391c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8003862:	482f      	ldr	r0, [pc, #188]	; (8003920 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8003864:	f7fd fcde 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t pauseImg(pauseData, 0, 0, 64, 64, 4096);
 8003868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800386c:	9302      	str	r3, [sp, #8]
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	2340      	movs	r3, #64	; 0x40
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	2200      	movs	r2, #0
 800387a:	492a      	ldr	r1, [pc, #168]	; (8003924 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800387c:	482a      	ldr	r0, [pc, #168]	; (8003928 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800387e:	f7fd fcd1 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t pcbImg(pcbData, 0, 0, 128, 128, 16384);
 8003882:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003886:	9302      	str	r3, [sp, #8]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2300      	movs	r3, #0
 8003892:	2200      	movs	r2, #0
 8003894:	4925      	ldr	r1, [pc, #148]	; (800392c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003896:	4826      	ldr	r0, [pc, #152]	; (8003930 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003898:	f7fd fcc4 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t playImg(playData, 0, 0, 64, 64, 4096);
 800389c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a0:	9302      	str	r3, [sp, #8]
 80038a2:	2340      	movs	r3, #64	; 0x40
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	2340      	movs	r3, #64	; 0x40
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2300      	movs	r3, #0
 80038ac:	2200      	movs	r2, #0
 80038ae:	4921      	ldr	r1, [pc, #132]	; (8003934 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80038b0:	4821      	ldr	r0, [pc, #132]	; (8003938 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80038b2:	f7fd fcb7 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t plusImg(plusData, 0, 0, 48, 48, 2304);
 80038b6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80038ba:	9302      	str	r3, [sp, #8]
 80038bc:	2330      	movs	r3, #48	; 0x30
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	2330      	movs	r3, #48	; 0x30
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2300      	movs	r3, #0
 80038c6:	2200      	movs	r2, #0
 80038c8:	491c      	ldr	r1, [pc, #112]	; (800393c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80038ca:	481d      	ldr	r0, [pc, #116]	; (8003940 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80038cc:	f7fd fcaa 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t returnImg(returnData, 0, 0, 64, 64, 4096);
 80038d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038d4:	9302      	str	r3, [sp, #8]
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	2340      	movs	r3, #64	; 0x40
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2300      	movs	r3, #0
 80038e0:	2200      	movs	r2, #0
 80038e2:	4918      	ldr	r1, [pc, #96]	; (8003944 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80038e4:	4818      	ldr	r0, [pc, #96]	; (8003948 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80038e6:	f7fd fc9d 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t thermometerImg(thermometerData, 0, 0, 128, 128, 16384);
 80038ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	2300      	movs	r3, #0
 80038fa:	2200      	movs	r2, #0
 80038fc:	4913      	ldr	r1, [pc, #76]	; (800394c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80038fe:	4814      	ldr	r0, [pc, #80]	; (8003950 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8003900:	f7fd fc90 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	0804210c 	.word	0x0804210c
 8003910:	2000031c 	.word	0x2000031c
 8003914:	0804410c 	.word	0x0804410c
 8003918:	2000032c 	.word	0x2000032c
 800391c:	0804610c 	.word	0x0804610c
 8003920:	2000033c 	.word	0x2000033c
 8003924:	0804730c 	.word	0x0804730c
 8003928:	2000034c 	.word	0x2000034c
 800392c:	0804930c 	.word	0x0804930c
 8003930:	2000035c 	.word	0x2000035c
 8003934:	0805130c 	.word	0x0805130c
 8003938:	2000036c 	.word	0x2000036c
 800393c:	0805330c 	.word	0x0805330c
 8003940:	2000037c 	.word	0x2000037c
 8003944:	0805450c 	.word	0x0805450c
 8003948:	2000038c 	.word	0x2000038c
 800394c:	0805650c 	.word	0x0805650c
 8003950:	2000039c 	.word	0x2000039c

08003954 <_GLOBAL__sub_I__Z15boot_initSystemP9context_t>:
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
 8003958:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800395c:	2001      	movs	r0, #1
 800395e:	f7ff ff4f 	bl	8003800 <_Z41__static_initialization_and_destruction_0ii>
 8003962:	bd80      	pop	{r7, pc}

08003964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396a:	f107 0314 	add.w	r3, r7, #20
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	60da      	str	r2, [r3, #12]
 8003978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	4b45      	ldr	r3, [pc, #276]	; (8003a94 <MX_GPIO_Init+0x130>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4a44      	ldr	r2, [pc, #272]	; (8003a94 <MX_GPIO_Init+0x130>)
 8003984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	4b42      	ldr	r3, [pc, #264]	; (8003a94 <MX_GPIO_Init+0x130>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <MX_GPIO_Init+0x130>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a3d      	ldr	r2, [pc, #244]	; (8003a94 <MX_GPIO_Init+0x130>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <MX_GPIO_Init+0x130>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <MX_GPIO_Init+0x130>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	4a36      	ldr	r2, [pc, #216]	; (8003a94 <MX_GPIO_Init+0x130>)
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	6313      	str	r3, [r2, #48]	; 0x30
 80039c2:	4b34      	ldr	r3, [pc, #208]	; (8003a94 <MX_GPIO_Init+0x130>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	4b30      	ldr	r3, [pc, #192]	; (8003a94 <MX_GPIO_Init+0x130>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <MX_GPIO_Init+0x130>)
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	6313      	str	r3, [r2, #48]	; 0x30
 80039de:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <MX_GPIO_Init+0x130>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEMP_CS_Pin|TFT_RD_Pin|TFT_WR_Pin|TFT_RS_Pin
 80039ea:	2201      	movs	r2, #1
 80039ec:	f641 7110 	movw	r1, #7952	; 0x1f10
 80039f0:	4829      	ldr	r0, [pc, #164]	; (8003a98 <MX_GPIO_Init+0x134>)
 80039f2:	f001 ff87 	bl	8005904 <HAL_GPIO_WritePin>
                          |TFT_CS_Pin|TFT_RST_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_D0_Pin|TFT_D1_Pin|TFT_D2_Pin|TFT_D3_Pin
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 80039fc:	4827      	ldr	r0, [pc, #156]	; (8003a9c <MX_GPIO_Init+0x138>)
 80039fe:	f001 ff81 	bl	8005904 <HAL_GPIO_WritePin>
                          |TFT_D4_Pin|TFT_D5_Pin|TFT_D6_Pin|TFT_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIGHT_Pin|HEATER_Pin|FAN_Pin, GPIO_PIN_RESET);
 8003a02:	2200      	movs	r2, #0
 8003a04:	21e0      	movs	r1, #224	; 0xe0
 8003a06:	4826      	ldr	r0, [pc, #152]	; (8003aa0 <MX_GPIO_Init+0x13c>)
 8003a08:	f001 ff7c 	bl	8005904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = TEMP_CS_Pin|TFT_RD_Pin|TFT_WR_Pin|TFT_RS_Pin
 8003a0c:	f641 7310 	movw	r3, #7952	; 0x1f10
 8003a10:	617b      	str	r3, [r7, #20]
                          |TFT_CS_Pin|TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a12:	2301      	movs	r3, #1
 8003a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1e:	f107 0314 	add.w	r3, r7, #20
 8003a22:	4619      	mov	r1, r3
 8003a24:	481c      	ldr	r0, [pc, #112]	; (8003a98 <MX_GPIO_Init+0x134>)
 8003a26:	f001 fdd3 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_D0_Pin|TFT_D1_Pin|TFT_D2_Pin|TFT_D3_Pin
 8003a2a:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8003a2e:	617b      	str	r3, [r7, #20]
                          |TFT_D4_Pin|TFT_D5_Pin|TFT_D6_Pin|TFT_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a30:	2301      	movs	r3, #1
 8003a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a3c:	f107 0314 	add.w	r3, r7, #20
 8003a40:	4619      	mov	r1, r3
 8003a42:	4816      	ldr	r0, [pc, #88]	; (8003a9c <MX_GPIO_Init+0x138>)
 8003a44:	f001 fdc4 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 8003a48:	2310      	movs	r3, #16
 8003a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a4c:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <MX_GPIO_Init+0x140>)
 8003a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4811      	ldr	r0, [pc, #68]	; (8003aa0 <MX_GPIO_Init+0x13c>)
 8003a5c:	f001 fdb8 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LIGHT_Pin|HEATER_Pin|FAN_Pin;
 8003a60:	23e0      	movs	r3, #224	; 0xe0
 8003a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a64:	2301      	movs	r3, #1
 8003a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	4619      	mov	r1, r3
 8003a76:	480a      	ldr	r0, [pc, #40]	; (8003aa0 <MX_GPIO_Init+0x13c>)
 8003a78:	f001 fdaa 	bl	80055d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2100      	movs	r1, #0
 8003a80:	200a      	movs	r0, #10
 8003a82:	f001 fd6e 	bl	8005562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003a86:	200a      	movs	r0, #10
 8003a88:	f001 fd87 	bl	800559a <HAL_NVIC_EnableIRQ>

}
 8003a8c:	bf00      	nop
 8003a8e:	3728      	adds	r7, #40	; 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40020000 	.word	0x40020000
 8003a9c:	40020800 	.word	0x40020800
 8003aa0:	40020400 	.word	0x40020400
 8003aa4:	10210000 	.word	0x10210000

08003aa8 <_ZN9context_tC1EP7ILI9341P8MAX31855P5TouchP13ControllerPIDP4LoadS9_S9_>:
    uint8_t temperate_active;

    uint64_t pid_delay_ms;
    uint64_t temperate_display_delay_ms;

    context_t(ILI9341 *_tft, MAX31855 *_temp, Touch *_touch, ControllerPID *_pid, Load *_heater,
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
            Load *_fan, Load *_light)
            : tft(_tft), temp(_temp), touch(_touch), pid(_pid), heater(_heater), fan(_fan), light(
                    _light), currentState(STATE_BOOT), error(ERROR_NO_ERROR)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	611a      	str	r2, [r3, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a3a      	ldr	r2, [r7, #32]
 8003ad8:	615a      	str	r2, [r3, #20]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ade:	619a      	str	r2, [r3, #24]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	771a      	strb	r2, [r3, #28]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	775a      	strb	r2, [r3, #29]
    {
    }
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b0c1      	sub	sp, #260	; 0x104
 8003b00:	af04      	add	r7, sp, #16
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8003b02:	f001 f805 	bl	8004b10 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8003b06:	f000 f8d1 	bl	8003cac <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8003b0a:	f7ff ff2b 	bl	8003964 <MX_GPIO_Init>
    MX_ADC1_Init();
 8003b0e:	f7fe ff19 	bl	8002944 <MX_ADC1_Init>
    MX_ADC2_Init();
 8003b12:	f7fe ff69 	bl	80029e8 <MX_ADC2_Init>
    MX_SPI1_Init();
 8003b16:	f000 fb33 	bl	8004180 <MX_SPI1_Init>
    MX_TIM6_Init();
 8003b1a:	f000 fe0d 	bl	8004738 <MX_TIM6_Init>
    MX_TIM2_Init();
 8003b1e:	f000 fcd5 	bl	80044cc <MX_TIM2_Init>
    MX_TIM3_Init();
 8003b22:	f000 fd1f 	bl	8004564 <MX_TIM3_Init>
    MX_TIM7_Init();
 8003b26:	f000 fe3d 	bl	80047a4 <MX_TIM7_Init>
    MX_TIM4_Init();
 8003b2a:	f000 fd69 	bl	8004600 <MX_TIM4_Init>
    MX_TIM5_Init();
 8003b2e:	f000 fdb5 	bl	800469c <MX_TIM5_Init>
    MX_TIM9_Init();
 8003b32:	f000 fe6d 	bl	8004810 <MX_TIM9_Init>
    MX_TIM10_Init();
 8003b36:	f000 fea5 	bl	8004884 <MX_TIM10_Init>
    /* USER CODE BEGIN 2 */

    SPI_Repair();    // Rekonfiguration des SPI-Peripherals für MAX31855
 8003b3a:	f000 fba1 	bl	8004280 <SPI_Repair>

    HAL_TIM_Base_Start_IT(&htim2);    // Globalen Timer starten.
 8003b3e:	484b      	ldr	r0, [pc, #300]	; (8003c6c <main+0x170>)
 8003b40:	f002 ff89 	bl	8006a56 <HAL_TIM_Base_Start_IT>

    ILI9341 tft(TFT_ROATION_PORTRAIT);    // TFT-Display mit Rotation 4 (Ladnscape)
 8003b44:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd fbae 	bl	80012ac <_ZN7ILI9341C1Eh>
    MAX31855 temp(&hspi1, TEMP_CS_GPIO_Port, TEMP_CS_Pin);
 8003b50:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8003b54:	2310      	movs	r3, #16
 8003b56:	4a46      	ldr	r2, [pc, #280]	; (8003c70 <main+0x174>)
 8003b58:	4946      	ldr	r1, [pc, #280]	; (8003c74 <main+0x178>)
 8003b5a:	f7fe f9fd 	bl	8001f58 <_ZN8MAX31855C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
    Touch touch(&hadc2, &hadc1, &interrupt_data.touchReadyFlag, &htim10);
 8003b5e:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8003b62:	4b45      	ldr	r3, [pc, #276]	; (8003c78 <main+0x17c>)
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	4b45      	ldr	r3, [pc, #276]	; (8003c7c <main+0x180>)
 8003b68:	4a45      	ldr	r2, [pc, #276]	; (8003c80 <main+0x184>)
 8003b6a:	4946      	ldr	r1, [pc, #280]	; (8003c84 <main+0x188>)
 8003b6c:	f7fe fcbe 	bl	80024ec <_ZN5TouchC1EP17ADC_HandleTypeDefS1_PVhP17TIM_HandleTypeDef>
    ControllerPID pid;    // PID-Controller
 8003b70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fd f997 	bl	8000ea8 <_ZN13ControllerPIDC1Ev>

    Load heater(&htim3, &htim4, &interrupt_data.heater_state);
 8003b7a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8003b7e:	4b42      	ldr	r3, [pc, #264]	; (8003c88 <main+0x18c>)
 8003b80:	4a42      	ldr	r2, [pc, #264]	; (8003c8c <main+0x190>)
 8003b82:	4943      	ldr	r1, [pc, #268]	; (8003c90 <main+0x194>)
 8003b84:	f7fe f91e 	bl	8001dc4 <_ZN4LoadC1EP17TIM_HandleTypeDefS1_PV12load_state_t>
    Load fan(&htim5, &htim6, &interrupt_data.fan_state);
 8003b88:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003b8c:	4b41      	ldr	r3, [pc, #260]	; (8003c94 <main+0x198>)
 8003b8e:	4a42      	ldr	r2, [pc, #264]	; (8003c98 <main+0x19c>)
 8003b90:	4942      	ldr	r1, [pc, #264]	; (8003c9c <main+0x1a0>)
 8003b92:	f7fe f917 	bl	8001dc4 <_ZN4LoadC1EP17TIM_HandleTypeDefS1_PV12load_state_t>
    Load light(&htim7, &htim9, &interrupt_data.light_state);
 8003b96:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003b9a:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <main+0x1a4>)
 8003b9c:	4a41      	ldr	r2, [pc, #260]	; (8003ca4 <main+0x1a8>)
 8003b9e:	4942      	ldr	r1, [pc, #264]	; (8003ca8 <main+0x1ac>)
 8003ba0:	f7fe f910 	bl	8001dc4 <_ZN4LoadC1EP17TIM_HandleTypeDefS1_PV12load_state_t>

    context_t context(&tft, &temp, &touch, &pid, &heater, &fan, &light);
 8003ba4:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8003ba8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8003bac:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bb6:	9303      	str	r3, [sp, #12]
 8003bb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bbc:	9302      	str	r3, [sp, #8]
 8003bbe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	4623      	mov	r3, r4
 8003bcc:	f7ff ff6c 	bl	8003aa8 <_ZN9context_tC1EP7ILI9341P8MAX31855P5TouchP13ControllerPIDP4LoadS9_S9_>
    {
        //////////////////////////////////
        //   ---- STATE-MACHINE ----    //
        //////////////////////////////////

        switch (context.currentState) {
 8003bd0:	7f3b      	ldrb	r3, [r7, #28]
 8003bd2:	2b09      	cmp	r3, #9
 8003bd4:	d8fc      	bhi.n	8003bd0 <main+0xd4>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <main+0xe0>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003c05 	.word	0x08003c05
 8003be0:	08003c0f 	.word	0x08003c0f
 8003be4:	08003c19 	.word	0x08003c19
 8003be8:	08003c23 	.word	0x08003c23
 8003bec:	08003c2d 	.word	0x08003c2d
 8003bf0:	08003c37 	.word	0x08003c37
 8003bf4:	08003c41 	.word	0x08003c41
 8003bf8:	08003c4b 	.word	0x08003c4b
 8003bfc:	08003c55 	.word	0x08003c55
 8003c00:	08003c5f 	.word	0x08003c5f

            case STATE_BOOT:
                boot_initSystem(&context);
 8003c04:	463b      	mov	r3, r7
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fffd 	bl	8002c06 <_Z15boot_initSystemP9context_t>
                break;
 8003c0c:	e02c      	b.n	8003c68 <main+0x16c>

            case STATE_MENU_INIT:
                menu_init(&context);
 8003c0e:	463b      	mov	r3, r7
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff f845 	bl	8002ca0 <_Z9menu_initP9context_t>
                break;
 8003c16:	e027      	b.n	8003c68 <main+0x16c>

            case STATE_MENU:
                menu_update(&context);
 8003c18:	463b      	mov	r3, r7
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff f8a6 	bl	8002d6c <_Z11menu_updateP9context_t>
                break;
 8003c20:	e022      	b.n	8003c68 <main+0x16c>

            case STATE_REFLOW_INIT:
                reflow_init(&context);
 8003c22:	463b      	mov	r3, r7
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff f8cf 	bl	8002dc8 <_Z11reflow_initP9context_t>
                break;
 8003c2a:	e01d      	b.n	8003c68 <main+0x16c>

            case STATE_REFLOW:
                reflow_update(&context);
 8003c2c:	463b      	mov	r3, r7
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff f8d7 	bl	8002de2 <_Z13reflow_updateP9context_t>
                break;
 8003c34:	e018      	b.n	8003c68 <main+0x16c>

            case STATE_TEMPERATE_INIT:
                temperate_init(&context);
 8003c36:	463b      	mov	r3, r7
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff f8dd 	bl	8002df8 <_Z14temperate_initP9context_t>
                break;
 8003c3e:	e013      	b.n	8003c68 <main+0x16c>

            case STATE_TEMPERATE:
                temperate_update(&context);
 8003c40:	463b      	mov	r3, r7
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fa3a 	bl	80030bc <_Z16temperate_updateP9context_t>
                break;
 8003c48:	e00e      	b.n	8003c68 <main+0x16c>

            case STATE_OPTIONS_INIT:
                options_init(&context);
 8003c4a:	463b      	mov	r3, r7
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff fd6b 	bl	8003728 <_Z12options_initP9context_t>
                break;
 8003c52:	e009      	b.n	8003c68 <main+0x16c>

            case STATE_OPTIONS:
                options_update(&context);
 8003c54:	463b      	mov	r3, r7
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fd73 	bl	8003742 <_Z14options_updateP9context_t>
                break;
 8003c5c:	e004      	b.n	8003c68 <main+0x16c>

            case STATE_ERROR:
                error_show(&context);
 8003c5e:	463b      	mov	r3, r7
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fd7b 	bl	800375c <_Z10error_showP9context_t>
                while (1);
 8003c66:	e7fe      	b.n	8003c66 <main+0x16a>
        switch (context.currentState) {
 8003c68:	e7b2      	b.n	8003bd0 <main+0xd4>
 8003c6a:	bf00      	nop
 8003c6c:	2000079c 	.word	0x2000079c
 8003c70:	40020000 	.word	0x40020000
 8003c74:	200005c4 	.word	0x200005c4
 8003c78:	2000065c 	.word	0x2000065c
 8003c7c:	20000520 	.word	0x20000520
 8003c80:	2000057c 	.word	0x2000057c
 8003c84:	20000534 	.word	0x20000534
 8003c88:	20000521 	.word	0x20000521
 8003c8c:	2000061c 	.word	0x2000061c
 8003c90:	200006dc 	.word	0x200006dc
 8003c94:	20000522 	.word	0x20000522
 8003c98:	2000071c 	.word	0x2000071c
 8003c9c:	2000069c 	.word	0x2000069c
 8003ca0:	20000523 	.word	0x20000523
 8003ca4:	2000075c 	.word	0x2000075c
 8003ca8:	200007dc 	.word	0x200007dc

08003cac <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b094      	sub	sp, #80	; 0x50
 8003cb0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8003cb2:	f107 0320 	add.w	r3, r7, #32
 8003cb6:	2230      	movs	r2, #48	; 0x30
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f003 fb0a 	bl	80072d4 <memset>
        { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8003cc0:	f107 030c 	add.w	r3, r7, #12
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	611a      	str	r2, [r3, #16]
        { 0 };

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	4b2d      	ldr	r3, [pc, #180]	; (8003d8c <_Z18SystemClock_Configv+0xe0>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	4a2c      	ldr	r2, [pc, #176]	; (8003d8c <_Z18SystemClock_Configv+0xe0>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce0:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <_Z18SystemClock_Configv+0xe0>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cec:	2300      	movs	r3, #0
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <_Z18SystemClock_Configv+0xe4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <_Z18SystemClock_Configv+0xe4>)
 8003cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <_Z18SystemClock_Configv+0xe4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d12:	2302      	movs	r3, #2
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8003d20:	23a8      	movs	r3, #168	; 0xa8
 8003d22:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d24:	2302      	movs	r3, #2
 8003d26:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8003d28:	2307      	movs	r3, #7
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d2c:	f107 0320 	add.w	r3, r7, #32
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 fe19 	bl	8005968 <HAL_RCC_OscConfig>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <_Z18SystemClock_Configv+0x9e>
    {
        Error_Handler();
 8003d46:	f000 f961 	bl	800400c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8003d4a:	230f      	movs	r3, #15
 8003d4c:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d5a:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d60:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d62:	f107 030c 	add.w	r3, r7, #12
 8003d66:	2105      	movs	r1, #5
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 f86d 	bl	8005e48 <HAL_RCC_ClockConfig>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <_Z18SystemClock_Configv+0xd6>
    {
        Error_Handler();
 8003d7e:	f000 f945 	bl	800400c <Error_Handler>
    }
}
 8003d82:	bf00      	nop
 8003d84:	3750      	adds	r7, #80	; 0x50
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40007000 	.word	0x40007000

08003d94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d000      	beq.n	8003da6 <HAL_GPIO_EXTI_Callback+0x12>
                LIGHT_GPIO_Port->BSRR = (uint32_t) LIGHT_Pin << 16U;

            break;

        default:
            break;
 8003da4:	e087      	b.n	8003eb6 <HAL_GPIO_EXTI_Callback+0x122>
            if (interrupt_data.heater_state == LOAD_DUTY)
 8003da6:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003da8:	7a5b      	ldrb	r3, [r3, #9]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	bf0c      	ite	eq
 8003db0:	2301      	moveq	r3, #1
 8003db2:	2300      	movne	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <HAL_GPIO_EXTI_Callback+0x34>
                HAL_TIM_Base_Start_IT(&htim3);
 8003dba:	4842      	ldr	r0, [pc, #264]	; (8003ec4 <HAL_GPIO_EXTI_Callback+0x130>)
 8003dbc:	f002 fe4b 	bl	8006a56 <HAL_TIM_Base_Start_IT>
                HAL_TIM_Base_Start_IT(&htim4);
 8003dc0:	4841      	ldr	r0, [pc, #260]	; (8003ec8 <HAL_GPIO_EXTI_Callback+0x134>)
 8003dc2:	f002 fe48 	bl	8006a56 <HAL_TIM_Base_Start_IT>
 8003dc6:	e01b      	b.n	8003e00 <HAL_GPIO_EXTI_Callback+0x6c>
            else if (interrupt_data.heater_state == LOAD_ON)
 8003dc8:	4b3d      	ldr	r3, [pc, #244]	; (8003ec0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003dca:	7a5b      	ldrb	r3, [r3, #9]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_EXTI_Callback+0x50>
                HEATER_GPIO_Port->BSRR = HEATER_Pin;
 8003ddc:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <HAL_GPIO_EXTI_Callback+0x138>)
 8003dde:	2240      	movs	r2, #64	; 0x40
 8003de0:	619a      	str	r2, [r3, #24]
 8003de2:	e00d      	b.n	8003e00 <HAL_GPIO_EXTI_Callback+0x6c>
            else if (interrupt_data.heater_state == LOAD_OFF)
 8003de4:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003de6:	7a5b      	ldrb	r3, [r3, #9]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_EXTI_Callback+0x6c>
                HEATER_GPIO_Port->BSRR = (uint32_t) HEATER_Pin << 16U;
 8003df8:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <HAL_GPIO_EXTI_Callback+0x138>)
 8003dfa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003dfe:	619a      	str	r2, [r3, #24]
            if (interrupt_data.fan_state == LOAD_DUTY)
 8003e00:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003e02:	7a9b      	ldrb	r3, [r3, #10]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d006      	beq.n	8003e22 <HAL_GPIO_EXTI_Callback+0x8e>
                HAL_TIM_Base_Start_IT(&htim5);
 8003e14:	482e      	ldr	r0, [pc, #184]	; (8003ed0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8003e16:	f002 fe1e 	bl	8006a56 <HAL_TIM_Base_Start_IT>
                HAL_TIM_Base_Start_IT(&htim6);
 8003e1a:	482e      	ldr	r0, [pc, #184]	; (8003ed4 <HAL_GPIO_EXTI_Callback+0x140>)
 8003e1c:	f002 fe1b 	bl	8006a56 <HAL_TIM_Base_Start_IT>
 8003e20:	e01b      	b.n	8003e5a <HAL_GPIO_EXTI_Callback+0xc6>
            else if (interrupt_data.fan_state == LOAD_ON)
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003e24:	7a9b      	ldrb	r3, [r3, #10]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_EXTI_Callback+0xaa>
                FAN_GPIO_Port->BSRR = FAN_Pin;
 8003e36:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_GPIO_EXTI_Callback+0x138>)
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	619a      	str	r2, [r3, #24]
 8003e3c:	e00d      	b.n	8003e5a <HAL_GPIO_EXTI_Callback+0xc6>
            else if (interrupt_data.fan_state == LOAD_OFF)
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003e40:	7a9b      	ldrb	r3, [r3, #10]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_EXTI_Callback+0xc6>
                FAN_GPIO_Port->BSRR = (uint32_t) FAN_Pin << 16U;
 8003e52:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <HAL_GPIO_EXTI_Callback+0x138>)
 8003e54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e58:	619a      	str	r2, [r3, #24]
            if (interrupt_data.light_state == LOAD_DUTY)
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003e5c:	7adb      	ldrb	r3, [r3, #11]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <HAL_GPIO_EXTI_Callback+0xe8>
                HAL_TIM_Base_Start_IT(&htim7);
 8003e6e:	481a      	ldr	r0, [pc, #104]	; (8003ed8 <HAL_GPIO_EXTI_Callback+0x144>)
 8003e70:	f002 fdf1 	bl	8006a56 <HAL_TIM_Base_Start_IT>
                HAL_TIM_Base_Start_IT(&htim9);
 8003e74:	4819      	ldr	r0, [pc, #100]	; (8003edc <HAL_GPIO_EXTI_Callback+0x148>)
 8003e76:	f002 fdee 	bl	8006a56 <HAL_TIM_Base_Start_IT>
            break;
 8003e7a:	e01b      	b.n	8003eb4 <HAL_GPIO_EXTI_Callback+0x120>
            else if (interrupt_data.light_state == LOAD_ON)
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003e7e:	7adb      	ldrb	r3, [r3, #11]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_EXTI_Callback+0x104>
                LIGHT_GPIO_Port->BSRR = LIGHT_Pin;
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_GPIO_EXTI_Callback+0x138>)
 8003e92:	2220      	movs	r2, #32
 8003e94:	619a      	str	r2, [r3, #24]
            break;
 8003e96:	e00d      	b.n	8003eb4 <HAL_GPIO_EXTI_Callback+0x120>
            else if (interrupt_data.light_state == LOAD_OFF)
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003e9a:	7adb      	ldrb	r3, [r3, #11]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bf0c      	ite	eq
 8003ea2:	2301      	moveq	r3, #1
 8003ea4:	2300      	movne	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_GPIO_EXTI_Callback+0x120>
                LIGHT_GPIO_Port->BSRR = (uint32_t) LIGHT_Pin << 16U;
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <HAL_GPIO_EXTI_Callback+0x138>)
 8003eae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003eb2:	619a      	str	r2, [r3, #24]
            break;
 8003eb4:	bf00      	nop
    }
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000518 	.word	0x20000518
 8003ec4:	200006dc 	.word	0x200006dc
 8003ec8:	2000061c 	.word	0x2000061c
 8003ecc:	40020400 	.word	0x40020400
 8003ed0:	2000069c 	.word	0x2000069c
 8003ed4:	2000071c 	.word	0x2000071c
 8003ed8:	200007dc 	.word	0x200007dc
 8003edc:	2000075c 	.word	0x2000075c

08003ee0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
    if (htim == &htim2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3e      	ldr	r2, [pc, #248]	; (8003fe4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d109      	bne.n	8003f04 <HAL_TIM_PeriodElapsedCallback+0x24>
    {
        interrupt_data.timerOverflow++;
 8003ef0:	4b3d      	ldr	r3, [pc, #244]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003ef2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003ef6:	1c4b      	adds	r3, r1, #1
 8003ef8:	f142 0400 	adc.w	r4, r2, #0
 8003efc:	4a3a      	ldr	r2, [pc, #232]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003efe:	e9c2 3400 	strd	r3, r4, [r2]
    {
        interrupt_data.touchReadyFlag = 1;
        HAL_TIM_Base_Stop_IT(htim);
        htim->Instance->CNT = 0;
    }
}
 8003f02:	e06a      	b.n	8003fda <HAL_TIM_PeriodElapsedCallback+0xfa>
    else if (htim == &htim3)    // Heizelement AN - Impuls START
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a39      	ldr	r2, [pc, #228]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d10a      	bne.n	8003f22 <HAL_TIM_PeriodElapsedCallback+0x42>
        HEATER_GPIO_Port->BSRR = HEATER_Pin;
 8003f0c:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003f0e:	2240      	movs	r2, #64	; 0x40
 8003f10:	619a      	str	r2, [r3, #24]
        HAL_TIM_Base_Stop_IT(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f002 fdc3 	bl	8006a9e <HAL_TIM_Base_Stop_IT>
        htim->Instance->CNT = 0;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f20:	e05b      	b.n	8003fda <HAL_TIM_PeriodElapsedCallback+0xfa>
    else if (htim == &htim4)    // Heizelement AN - Impuls STOP
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a33      	ldr	r2, [pc, #204]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10b      	bne.n	8003f42 <HAL_TIM_PeriodElapsedCallback+0x62>
        HEATER_GPIO_Port->BSRR = (uint32_t) HEATER_Pin << 16U;
 8003f2a:	4b31      	ldr	r3, [pc, #196]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003f2c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003f30:	619a      	str	r2, [r3, #24]
        HAL_TIM_Base_Stop_IT(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f002 fdb3 	bl	8006a9e <HAL_TIM_Base_Stop_IT>
        htim->Instance->CNT = 0;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f40:	e04b      	b.n	8003fda <HAL_TIM_PeriodElapsedCallback+0xfa>
    else if (htim == &htim5)    // Lüfter AN - Impuls START
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2c      	ldr	r2, [pc, #176]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d10a      	bne.n	8003f60 <HAL_TIM_PeriodElapsedCallback+0x80>
        FAN_GPIO_Port->BSRR = FAN_Pin;
 8003f4a:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003f4c:	2280      	movs	r2, #128	; 0x80
 8003f4e:	619a      	str	r2, [r3, #24]
        HAL_TIM_Base_Stop_IT(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f002 fda4 	bl	8006a9e <HAL_TIM_Base_Stop_IT>
        htim->Instance->CNT = 0;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f5e:	e03c      	b.n	8003fda <HAL_TIM_PeriodElapsedCallback+0xfa>
    else if (htim == &htim6)    // Lüfter AN - Impuls STOP
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d10b      	bne.n	8003f80 <HAL_TIM_PeriodElapsedCallback+0xa0>
        FAN_GPIO_Port->BSRR = (uint32_t) FAN_Pin << 16U;
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003f6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f6e:	619a      	str	r2, [r3, #24]
        HAL_TIM_Base_Stop_IT(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f002 fd94 	bl	8006a9e <HAL_TIM_Base_Stop_IT>
        htim->Instance->CNT = 0;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f7e:	e02c      	b.n	8003fda <HAL_TIM_PeriodElapsedCallback+0xfa>
    else if (htim == &htim7)    // Licht AN - Impuls START
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10a      	bne.n	8003f9e <HAL_TIM_PeriodElapsedCallback+0xbe>
        LIGHT_GPIO_Port->BSRR = LIGHT_Pin;
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	619a      	str	r2, [r3, #24]
        HAL_TIM_Base_Stop_IT(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f002 fd85 	bl	8006a9e <HAL_TIM_Base_Stop_IT>
        htim->Instance->CNT = 0;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f9c:	e01d      	b.n	8003fda <HAL_TIM_PeriodElapsedCallback+0xfa>
    else if (htim == &htim9)    // Licht AN - Impuls STOP
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10b      	bne.n	8003fbe <HAL_TIM_PeriodElapsedCallback+0xde>
        LIGHT_GPIO_Port->BSRR = (uint32_t) LIGHT_Pin << 16U;
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003fa8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003fac:	619a      	str	r2, [r3, #24]
        HAL_TIM_Base_Stop_IT(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f002 fd75 	bl	8006a9e <HAL_TIM_Base_Stop_IT>
        htim->Instance->CNT = 0;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003fbc:	e00d      	b.n	8003fda <HAL_TIM_PeriodElapsedCallback+0xfa>
    else if (htim == &htim10)    // Touch-Delay
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a11      	ldr	r2, [pc, #68]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d109      	bne.n	8003fda <HAL_TIM_PeriodElapsedCallback+0xfa>
        interrupt_data.touchReadyFlag = 1;
 8003fc6:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	721a      	strb	r2, [r3, #8]
        HAL_TIM_Base_Stop_IT(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f002 fd66 	bl	8006a9e <HAL_TIM_Base_Stop_IT>
        htim->Instance->CNT = 0;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd90      	pop	{r4, r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2000079c 	.word	0x2000079c
 8003fe8:	20000518 	.word	0x20000518
 8003fec:	200006dc 	.word	0x200006dc
 8003ff0:	40020400 	.word	0x40020400
 8003ff4:	2000061c 	.word	0x2000061c
 8003ff8:	2000069c 	.word	0x2000069c
 8003ffc:	2000071c 	.word	0x2000071c
 8004000:	200007dc 	.word	0x200007dc
 8004004:	2000075c 	.word	0x2000075c
 8004008:	2000065c 	.word	0x2000065c

0800400c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <_Z41__static_initialization_and_destruction_0ii>:
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af04      	add	r7, sp, #16
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d179      	bne.n	8004120 <_Z41__static_initialization_and_destruction_0ii+0x104>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004032:	4293      	cmp	r3, r2
 8004034:	d174      	bne.n	8004120 <_Z41__static_initialization_and_destruction_0ii+0x104>
static img_data_t lightOffImg(lightOffData, 0, 0, 64, 64, 4096);
 8004036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800403a:	9302      	str	r3, [sp, #8]
 800403c:	2340      	movs	r3, #64	; 0x40
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	2340      	movs	r3, #64	; 0x40
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	2200      	movs	r2, #0
 8004048:	4937      	ldr	r1, [pc, #220]	; (8004128 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800404a:	4838      	ldr	r0, [pc, #224]	; (800412c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800404c:	f7fd f8ea 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t lightOnImg(lightOnData, 0, 0, 64, 64, 4096);
 8004050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004054:	9302      	str	r3, [sp, #8]
 8004056:	2340      	movs	r3, #64	; 0x40
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	2340      	movs	r3, #64	; 0x40
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2300      	movs	r3, #0
 8004060:	2200      	movs	r2, #0
 8004062:	4933      	ldr	r1, [pc, #204]	; (8004130 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8004064:	4833      	ldr	r0, [pc, #204]	; (8004134 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8004066:	f7fd f8dd 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t minusImg(minusData, 0, 0, 48, 48, 2304);
 800406a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800406e:	9302      	str	r3, [sp, #8]
 8004070:	2330      	movs	r3, #48	; 0x30
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	2330      	movs	r3, #48	; 0x30
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	2200      	movs	r2, #0
 800407c:	492e      	ldr	r1, [pc, #184]	; (8004138 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800407e:	482f      	ldr	r0, [pc, #188]	; (800413c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8004080:	f7fd f8d0 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t pauseImg(pauseData, 0, 0, 64, 64, 4096);
 8004084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004088:	9302      	str	r3, [sp, #8]
 800408a:	2340      	movs	r3, #64	; 0x40
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	2340      	movs	r3, #64	; 0x40
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	2300      	movs	r3, #0
 8004094:	2200      	movs	r2, #0
 8004096:	492a      	ldr	r1, [pc, #168]	; (8004140 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004098:	482a      	ldr	r0, [pc, #168]	; (8004144 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800409a:	f7fd f8c3 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t pcbImg(pcbData, 0, 0, 128, 128, 16384);
 800409e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040a2:	9302      	str	r3, [sp, #8]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2300      	movs	r3, #0
 80040ae:	2200      	movs	r2, #0
 80040b0:	4925      	ldr	r1, [pc, #148]	; (8004148 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80040b2:	4826      	ldr	r0, [pc, #152]	; (800414c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80040b4:	f7fd f8b6 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t playImg(playData, 0, 0, 64, 64, 4096);
 80040b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040bc:	9302      	str	r3, [sp, #8]
 80040be:	2340      	movs	r3, #64	; 0x40
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	2340      	movs	r3, #64	; 0x40
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2300      	movs	r3, #0
 80040c8:	2200      	movs	r2, #0
 80040ca:	4921      	ldr	r1, [pc, #132]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80040cc:	4821      	ldr	r0, [pc, #132]	; (8004154 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80040ce:	f7fd f8a9 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t plusImg(plusData, 0, 0, 48, 48, 2304);
 80040d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	2330      	movs	r3, #48	; 0x30
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	2330      	movs	r3, #48	; 0x30
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2300      	movs	r3, #0
 80040e2:	2200      	movs	r2, #0
 80040e4:	491c      	ldr	r1, [pc, #112]	; (8004158 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80040e6:	481d      	ldr	r0, [pc, #116]	; (800415c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80040e8:	f7fd f89c 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t returnImg(returnData, 0, 0, 64, 64, 4096);
 80040ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f0:	9302      	str	r3, [sp, #8]
 80040f2:	2340      	movs	r3, #64	; 0x40
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	2340      	movs	r3, #64	; 0x40
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	2300      	movs	r3, #0
 80040fc:	2200      	movs	r2, #0
 80040fe:	4918      	ldr	r1, [pc, #96]	; (8004160 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004100:	4818      	ldr	r0, [pc, #96]	; (8004164 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004102:	f7fd f88f 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
static img_data_t thermometerImg(thermometerData, 0, 0, 128, 128, 16384);
 8004106:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2300      	movs	r3, #0
 8004116:	2200      	movs	r2, #0
 8004118:	4913      	ldr	r1, [pc, #76]	; (8004168 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800411a:	4814      	ldr	r0, [pc, #80]	; (800416c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800411c:	f7fd f882 	bl	8001224 <_ZN10img_data_tC1EPKtttttm>
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	0805e50c 	.word	0x0805e50c
 800412c:	20000484 	.word	0x20000484
 8004130:	0806050c 	.word	0x0806050c
 8004134:	20000494 	.word	0x20000494
 8004138:	0806250c 	.word	0x0806250c
 800413c:	200004a4 	.word	0x200004a4
 8004140:	0806370c 	.word	0x0806370c
 8004144:	200004b4 	.word	0x200004b4
 8004148:	0806570c 	.word	0x0806570c
 800414c:	200004c4 	.word	0x200004c4
 8004150:	0806d70c 	.word	0x0806d70c
 8004154:	200004d4 	.word	0x200004d4
 8004158:	0806f70c 	.word	0x0806f70c
 800415c:	200004e4 	.word	0x200004e4
 8004160:	0807090c 	.word	0x0807090c
 8004164:	200004f4 	.word	0x200004f4
 8004168:	0807290c 	.word	0x0807290c
 800416c:	20000504 	.word	0x20000504

08004170 <_GLOBAL__sub_I_interrupt_data>:
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
 8004174:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004178:	2001      	movs	r0, #1
 800417a:	f7ff ff4f 	bl	800401c <_Z41__static_initialization_and_destruction_0ii>
 800417e:	bd80      	pop	{r7, pc}

08004180 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004184:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <MX_SPI1_Init+0x68>)
 8004186:	4a19      	ldr	r2, [pc, #100]	; (80041ec <MX_SPI1_Init+0x6c>)
 8004188:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <MX_SPI1_Init+0x68>)
 800418c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004190:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <MX_SPI1_Init+0x68>)
 8004194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004198:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <MX_SPI1_Init+0x68>)
 800419c:	2200      	movs	r2, #0
 800419e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <MX_SPI1_Init+0x68>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <MX_SPI1_Init+0x68>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041ac:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <MX_SPI1_Init+0x68>)
 80041ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <MX_SPI1_Init+0x68>)
 80041b6:	2228      	movs	r2, #40	; 0x28
 80041b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <MX_SPI1_Init+0x68>)
 80041bc:	2200      	movs	r2, #0
 80041be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <MX_SPI1_Init+0x68>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c6:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <MX_SPI1_Init+0x68>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <MX_SPI1_Init+0x68>)
 80041ce:	220a      	movs	r2, #10
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041d2:	4805      	ldr	r0, [pc, #20]	; (80041e8 <MX_SPI1_Init+0x68>)
 80041d4:	f001 fff4 	bl	80061c0 <HAL_SPI_Init>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80041de:	f7ff ff15 	bl	800400c <Error_Handler>
  }

}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	200005c4 	.word	0x200005c4
 80041ec:	40013000 	.word	0x40013000

080041f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	60da      	str	r2, [r3, #12]
 8004206:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_SPI_MspInit+0x84>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d12b      	bne.n	800426a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_SPI_MspInit+0x88>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <HAL_SPI_MspInit+0x88>)
 800421c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004220:	6453      	str	r3, [r2, #68]	; 0x44
 8004222:	4b15      	ldr	r3, [pc, #84]	; (8004278 <HAL_SPI_MspInit+0x88>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_SPI_MspInit+0x88>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <HAL_SPI_MspInit+0x88>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	6313      	str	r3, [r2, #48]	; 0x30
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_SPI_MspInit+0x88>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800424a:	2360      	movs	r3, #96	; 0x60
 800424c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424e:	2302      	movs	r3, #2
 8004250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004256:	2303      	movs	r3, #3
 8004258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800425a:	2305      	movs	r3, #5
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	4619      	mov	r1, r3
 8004264:	4805      	ldr	r0, [pc, #20]	; (800427c <HAL_SPI_MspInit+0x8c>)
 8004266:	f001 f9b3 	bl	80055d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800426a:	bf00      	nop
 800426c:	3728      	adds	r7, #40	; 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40013000 	.word	0x40013000
 8004278:	40023800 	.word	0x40023800
 800427c:	40020000 	.word	0x40020000

08004280 <SPI_Repair>:
}

/* USER CODE BEGIN 1 */

void SPI_Repair(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <SPI_Repair+0x64>)
 8004286:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <SPI_Repair+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800428a:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <SPI_Repair+0x64>)
 800428c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004290:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <SPI_Repair+0x64>)
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004298:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <SPI_Repair+0x64>)
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <SPI_Repair+0x64>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <SPI_Repair+0x64>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80042aa:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <SPI_Repair+0x64>)
 80042ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b0:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80042b2:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <SPI_Repair+0x64>)
 80042b4:	2228      	movs	r2, #40	; 0x28
 80042b6:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <SPI_Repair+0x64>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042be:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <SPI_Repair+0x64>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <SPI_Repair+0x64>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <SPI_Repair+0x64>)
 80042cc:	220a      	movs	r2, #10
 80042ce:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042d0:	4804      	ldr	r0, [pc, #16]	; (80042e4 <SPI_Repair+0x64>)
 80042d2:	f001 ff75 	bl	80061c0 <HAL_SPI_Init>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <SPI_Repair+0x60>
    {
        Error_Handler();
 80042dc:	f7ff fe96 	bl	800400c <Error_Handler>
    }
}
 80042e0:	bf00      	nop
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	200005c4 	.word	0x200005c4
 80042e8:	40013000 	.word	0x40013000

080042ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <HAL_MspInit+0x4c>)
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	4a0f      	ldr	r2, [pc, #60]	; (8004338 <HAL_MspInit+0x4c>)
 80042fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004300:	6453      	str	r3, [r2, #68]	; 0x44
 8004302:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <HAL_MspInit+0x4c>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	4b09      	ldr	r3, [pc, #36]	; (8004338 <HAL_MspInit+0x4c>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	4a08      	ldr	r2, [pc, #32]	; (8004338 <HAL_MspInit+0x4c>)
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431c:	6413      	str	r3, [r2, #64]	; 0x40
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_MspInit+0x4c>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800

0800433c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800434a:	b480      	push	{r7}
 800434c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800434e:	e7fe      	b.n	800434e <HardFault_Handler+0x4>

08004350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004354:	e7fe      	b.n	8004354 <MemManage_Handler+0x4>

08004356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800435a:	e7fe      	b.n	800435a <BusFault_Handler+0x4>

0800435c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004360:	e7fe      	b.n	8004360 <UsageFault_Handler+0x4>

08004362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004362:	b480      	push	{r7}
 8004364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004390:	f000 fc10 	bl	8004bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004394:	bf00      	nop
 8004396:	bd80      	pop	{r7, pc}

08004398 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800439c:	2010      	movs	r0, #16
 800439e:	f001 facb 	bl	8005938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80043ac:	4802      	ldr	r0, [pc, #8]	; (80043b8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80043ae:	f002 fba1 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2000075c 	.word	0x2000075c

080043bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80043c0:	4802      	ldr	r0, [pc, #8]	; (80043cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80043c2:	f002 fb97 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2000065c 	.word	0x2000065c

080043d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043d4:	4802      	ldr	r0, [pc, #8]	; (80043e0 <TIM2_IRQHandler+0x10>)
 80043d6:	f002 fb8d 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	2000079c 	.word	0x2000079c

080043e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80043e8:	4802      	ldr	r0, [pc, #8]	; (80043f4 <TIM3_IRQHandler+0x10>)
 80043ea:	f002 fb83 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	200006dc 	.word	0x200006dc

080043f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80043fc:	4802      	ldr	r0, [pc, #8]	; (8004408 <TIM4_IRQHandler+0x10>)
 80043fe:	f002 fb79 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2000061c 	.word	0x2000061c

0800440c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004410:	4802      	ldr	r0, [pc, #8]	; (800441c <TIM5_IRQHandler+0x10>)
 8004412:	f002 fb6f 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	2000069c 	.word	0x2000069c

08004420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004424:	4802      	ldr	r0, [pc, #8]	; (8004430 <TIM6_DAC_IRQHandler+0x10>)
 8004426:	f002 fb65 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	2000071c 	.word	0x2000071c

08004434 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004438:	4802      	ldr	r0, [pc, #8]	; (8004444 <TIM7_IRQHandler+0x10>)
 800443a:	f002 fb5b 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200007dc 	.word	0x200007dc

08004448 <_sbrk>:
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <_sbrk+0x50>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <_sbrk+0x16>
 8004458:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <_sbrk+0x50>)
 800445a:	4a10      	ldr	r2, [pc, #64]	; (800449c <_sbrk+0x54>)
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <_sbrk+0x50>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <_sbrk+0x50>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4413      	add	r3, r2
 800446c:	466a      	mov	r2, sp
 800446e:	4293      	cmp	r3, r2
 8004470:	d907      	bls.n	8004482 <_sbrk+0x3a>
 8004472:	f002 fef5 	bl	8007260 <__errno>
 8004476:	4602      	mov	r2, r0
 8004478:	230c      	movs	r3, #12
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004480:	e006      	b.n	8004490 <_sbrk+0x48>
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <_sbrk+0x50>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	4a03      	ldr	r2, [pc, #12]	; (8004498 <_sbrk+0x50>)
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000528 	.word	0x20000528
 800449c:	20000828 	.word	0x20000828

080044a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <SystemInit+0x28>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	4a07      	ldr	r2, [pc, #28]	; (80044c8 <SystemInit+0x28>)
 80044ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <SystemInit+0x28>)
 80044b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044ba:	609a      	str	r2, [r3, #8]
#endif
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	609a      	str	r2, [r3, #8]
 80044de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044e0:	463b      	mov	r3, r7
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80044e8:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <MX_TIM2_Init+0x94>)
 80044ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 - 1;
 80044f0:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <MX_TIM2_Init+0x94>)
 80044f2:	2253      	movs	r2, #83	; 0x53
 80044f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f6:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <MX_TIM2_Init+0x94>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80044fc:	4b18      	ldr	r3, [pc, #96]	; (8004560 <MX_TIM2_Init+0x94>)
 80044fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004502:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004504:	4b16      	ldr	r3, [pc, #88]	; (8004560 <MX_TIM2_Init+0x94>)
 8004506:	2200      	movs	r2, #0
 8004508:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800450a:	4b15      	ldr	r3, [pc, #84]	; (8004560 <MX_TIM2_Init+0x94>)
 800450c:	2200      	movs	r2, #0
 800450e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004510:	4813      	ldr	r0, [pc, #76]	; (8004560 <MX_TIM2_Init+0x94>)
 8004512:	f002 fa75 	bl	8006a00 <HAL_TIM_Base_Init>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800451c:	f7ff fd76 	bl	800400c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004524:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	4619      	mov	r1, r3
 800452c:	480c      	ldr	r0, [pc, #48]	; (8004560 <MX_TIM2_Init+0x94>)
 800452e:	f002 fbe9 	bl	8006d04 <HAL_TIM_ConfigClockSource>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004538:	f7ff fd68 	bl	800400c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800453c:	2300      	movs	r3, #0
 800453e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004540:	2300      	movs	r3, #0
 8004542:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004544:	463b      	mov	r3, r7
 8004546:	4619      	mov	r1, r3
 8004548:	4805      	ldr	r0, [pc, #20]	; (8004560 <MX_TIM2_Init+0x94>)
 800454a:	f002 fdf5 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004554:	f7ff fd5a 	bl	800400c <Error_Handler>
  }

}
 8004558:	bf00      	nop
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	2000079c 	.word	0x2000079c

08004564 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	605a      	str	r2, [r3, #4]
 8004574:	609a      	str	r2, [r3, #8]
 8004576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004578:	463b      	mov	r3, r7
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8004580:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <MX_TIM3_Init+0x94>)
 8004582:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <MX_TIM3_Init+0x98>)
 8004584:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 - 1;
 8004586:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <MX_TIM3_Init+0x94>)
 8004588:	2253      	movs	r2, #83	; 0x53
 800458a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <MX_TIM3_Init+0x94>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <MX_TIM3_Init+0x94>)
 8004594:	f242 7210 	movw	r2, #10000	; 0x2710
 8004598:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800459a:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <MX_TIM3_Init+0x94>)
 800459c:	2200      	movs	r2, #0
 800459e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045a0:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <MX_TIM3_Init+0x94>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045a6:	4814      	ldr	r0, [pc, #80]	; (80045f8 <MX_TIM3_Init+0x94>)
 80045a8:	f002 fa2a 	bl	8006a00 <HAL_TIM_Base_Init>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80045b2:	f7ff fd2b 	bl	800400c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80045bc:	f107 0308 	add.w	r3, r7, #8
 80045c0:	4619      	mov	r1, r3
 80045c2:	480d      	ldr	r0, [pc, #52]	; (80045f8 <MX_TIM3_Init+0x94>)
 80045c4:	f002 fb9e 	bl	8006d04 <HAL_TIM_ConfigClockSource>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80045ce:	f7ff fd1d 	bl	800400c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045d2:	2300      	movs	r3, #0
 80045d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045da:	463b      	mov	r3, r7
 80045dc:	4619      	mov	r1, r3
 80045de:	4806      	ldr	r0, [pc, #24]	; (80045f8 <MX_TIM3_Init+0x94>)
 80045e0:	f002 fdaa 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80045ea:	f7ff fd0f 	bl	800400c <Error_Handler>
  }

}
 80045ee:	bf00      	nop
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200006dc 	.word	0x200006dc
 80045fc:	40000400 	.word	0x40000400

08004600 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004606:	f107 0308 	add.w	r3, r7, #8
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004614:	463b      	mov	r3, r7
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800461c:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <MX_TIM4_Init+0x94>)
 800461e:	4a1e      	ldr	r2, [pc, #120]	; (8004698 <MX_TIM4_Init+0x98>)
 8004620:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84 - 1;
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <MX_TIM4_Init+0x94>)
 8004624:	2253      	movs	r2, #83	; 0x53
 8004626:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <MX_TIM4_Init+0x94>)
 800462a:	2200      	movs	r2, #0
 800462c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 800462e:	4b19      	ldr	r3, [pc, #100]	; (8004694 <MX_TIM4_Init+0x94>)
 8004630:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004634:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004636:	4b17      	ldr	r3, [pc, #92]	; (8004694 <MX_TIM4_Init+0x94>)
 8004638:	2200      	movs	r2, #0
 800463a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800463c:	4b15      	ldr	r3, [pc, #84]	; (8004694 <MX_TIM4_Init+0x94>)
 800463e:	2200      	movs	r2, #0
 8004640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004642:	4814      	ldr	r0, [pc, #80]	; (8004694 <MX_TIM4_Init+0x94>)
 8004644:	f002 f9dc 	bl	8006a00 <HAL_TIM_Base_Init>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800464e:	f7ff fcdd 	bl	800400c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004656:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004658:	f107 0308 	add.w	r3, r7, #8
 800465c:	4619      	mov	r1, r3
 800465e:	480d      	ldr	r0, [pc, #52]	; (8004694 <MX_TIM4_Init+0x94>)
 8004660:	f002 fb50 	bl	8006d04 <HAL_TIM_ConfigClockSource>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800466a:	f7ff fccf 	bl	800400c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800466e:	2300      	movs	r3, #0
 8004670:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004672:	2300      	movs	r3, #0
 8004674:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004676:	463b      	mov	r3, r7
 8004678:	4619      	mov	r1, r3
 800467a:	4806      	ldr	r0, [pc, #24]	; (8004694 <MX_TIM4_Init+0x94>)
 800467c:	f002 fd5c 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004686:	f7ff fcc1 	bl	800400c <Error_Handler>
  }

}
 800468a:	bf00      	nop
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	2000061c 	.word	0x2000061c
 8004698:	40000800 	.word	0x40000800

0800469c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046a2:	f107 0308 	add.w	r3, r7, #8
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	609a      	str	r2, [r3, #8]
 80046ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046b0:	463b      	mov	r3, r7
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <MX_TIM5_Init+0x94>)
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <MX_TIM5_Init+0x98>)
 80046bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84 - 1;
 80046be:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <MX_TIM5_Init+0x94>)
 80046c0:	2253      	movs	r2, #83	; 0x53
 80046c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046c4:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <MX_TIM5_Init+0x94>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 80046ca:	4b19      	ldr	r3, [pc, #100]	; (8004730 <MX_TIM5_Init+0x94>)
 80046cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80046d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <MX_TIM5_Init+0x94>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <MX_TIM5_Init+0x94>)
 80046da:	2200      	movs	r2, #0
 80046dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80046de:	4814      	ldr	r0, [pc, #80]	; (8004730 <MX_TIM5_Init+0x94>)
 80046e0:	f002 f98e 	bl	8006a00 <HAL_TIM_Base_Init>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80046ea:	f7ff fc8f 	bl	800400c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80046f4:	f107 0308 	add.w	r3, r7, #8
 80046f8:	4619      	mov	r1, r3
 80046fa:	480d      	ldr	r0, [pc, #52]	; (8004730 <MX_TIM5_Init+0x94>)
 80046fc:	f002 fb02 	bl	8006d04 <HAL_TIM_ConfigClockSource>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004706:	f7ff fc81 	bl	800400c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004712:	463b      	mov	r3, r7
 8004714:	4619      	mov	r1, r3
 8004716:	4806      	ldr	r0, [pc, #24]	; (8004730 <MX_TIM5_Init+0x94>)
 8004718:	f002 fd0e 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004722:	f7ff fc73 	bl	800400c <Error_Handler>
  }

}
 8004726:	bf00      	nop
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	2000069c 	.word	0x2000069c
 8004734:	40000c00 	.word	0x40000c00

08004738 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800473e:	463b      	mov	r3, r7
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <MX_TIM6_Init+0x64>)
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <MX_TIM6_Init+0x68>)
 800474a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84 - 1;
 800474c:	4b13      	ldr	r3, [pc, #76]	; (800479c <MX_TIM6_Init+0x64>)
 800474e:	2253      	movs	r2, #83	; 0x53
 8004750:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <MX_TIM6_Init+0x64>)
 8004754:	2200      	movs	r2, #0
 8004756:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <MX_TIM6_Init+0x64>)
 800475a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800475e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004760:	4b0e      	ldr	r3, [pc, #56]	; (800479c <MX_TIM6_Init+0x64>)
 8004762:	2200      	movs	r2, #0
 8004764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004766:	480d      	ldr	r0, [pc, #52]	; (800479c <MX_TIM6_Init+0x64>)
 8004768:	f002 f94a 	bl	8006a00 <HAL_TIM_Base_Init>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004772:	f7ff fc4b 	bl	800400c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800477e:	463b      	mov	r3, r7
 8004780:	4619      	mov	r1, r3
 8004782:	4806      	ldr	r0, [pc, #24]	; (800479c <MX_TIM6_Init+0x64>)
 8004784:	f002 fcd8 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800478e:	f7ff fc3d 	bl	800400c <Error_Handler>
  }

}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000071c 	.word	0x2000071c
 80047a0:	40001000 	.word	0x40001000

080047a4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047aa:	463b      	mov	r3, r7
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <MX_TIM7_Init+0x64>)
 80047b4:	4a15      	ldr	r2, [pc, #84]	; (800480c <MX_TIM7_Init+0x68>)
 80047b6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84 - 1;
 80047b8:	4b13      	ldr	r3, [pc, #76]	; (8004808 <MX_TIM7_Init+0x64>)
 80047ba:	2253      	movs	r2, #83	; 0x53
 80047bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <MX_TIM7_Init+0x64>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 80047c4:	4b10      	ldr	r3, [pc, #64]	; (8004808 <MX_TIM7_Init+0x64>)
 80047c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80047ca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <MX_TIM7_Init+0x64>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80047d2:	480d      	ldr	r0, [pc, #52]	; (8004808 <MX_TIM7_Init+0x64>)
 80047d4:	f002 f914 	bl	8006a00 <HAL_TIM_Base_Init>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80047de:	f7ff fc15 	bl	800400c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80047ea:	463b      	mov	r3, r7
 80047ec:	4619      	mov	r1, r3
 80047ee:	4806      	ldr	r0, [pc, #24]	; (8004808 <MX_TIM7_Init+0x64>)
 80047f0:	f002 fca2 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80047fa:	f7ff fc07 	bl	800400c <Error_Handler>
  }

}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	200007dc 	.word	0x200007dc
 800480c:	40001400 	.word	0x40001400

08004810 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004816:	463b      	mov	r3, r7
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <MX_TIM9_Init+0x6c>)
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <MX_TIM9_Init+0x70>)
 8004826:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84 - 1;
 8004828:	4b14      	ldr	r3, [pc, #80]	; (800487c <MX_TIM9_Init+0x6c>)
 800482a:	2253      	movs	r2, #83	; 0x53
 800482c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800482e:	4b13      	ldr	r3, [pc, #76]	; (800487c <MX_TIM9_Init+0x6c>)
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 500;
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <MX_TIM9_Init+0x6c>)
 8004836:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800483a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <MX_TIM9_Init+0x6c>)
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004842:	4b0e      	ldr	r3, [pc, #56]	; (800487c <MX_TIM9_Init+0x6c>)
 8004844:	2200      	movs	r2, #0
 8004846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004848:	480c      	ldr	r0, [pc, #48]	; (800487c <MX_TIM9_Init+0x6c>)
 800484a:	f002 f8d9 	bl	8006a00 <HAL_TIM_Base_Init>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8004854:	f7ff fbda 	bl	800400c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800485c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800485e:	463b      	mov	r3, r7
 8004860:	4619      	mov	r1, r3
 8004862:	4806      	ldr	r0, [pc, #24]	; (800487c <MX_TIM9_Init+0x6c>)
 8004864:	f002 fa4e 	bl	8006d04 <HAL_TIM_ConfigClockSource>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800486e:	f7ff fbcd 	bl	800400c <Error_Handler>
  }

}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	2000075c 	.word	0x2000075c
 8004880:	40014000 	.word	0x40014000

08004884 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <MX_TIM10_Init+0x40>)
 800488a:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <MX_TIM10_Init+0x44>)
 800488c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400 - 1;
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <MX_TIM10_Init+0x40>)
 8004890:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004894:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <MX_TIM10_Init+0x40>)
 8004898:	2200      	movs	r2, #0
 800489a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <MX_TIM10_Init+0x40>)
 800489e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048a2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048a4:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <MX_TIM10_Init+0x40>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <MX_TIM10_Init+0x40>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80048b0:	4804      	ldr	r0, [pc, #16]	; (80048c4 <MX_TIM10_Init+0x40>)
 80048b2:	f002 f8a5 	bl	8006a00 <HAL_TIM_Base_Init>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80048bc:	f7ff fba6 	bl	800400c <Error_Handler>
  }

}
 80048c0:	bf00      	nop
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	2000065c 	.word	0x2000065c
 80048c8:	40014400 	.word	0x40014400

080048cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08a      	sub	sp, #40	; 0x28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048dc:	d116      	bne.n	800490c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
 80048e2:	4b6e      	ldr	r3, [pc, #440]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	4a6d      	ldr	r2, [pc, #436]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	6413      	str	r3, [r2, #64]	; 0x40
 80048ee:	4b6b      	ldr	r3, [pc, #428]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80048fa:	2200      	movs	r2, #0
 80048fc:	2100      	movs	r1, #0
 80048fe:	201c      	movs	r0, #28
 8004900:	f000 fe2f 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004904:	201c      	movs	r0, #28
 8004906:	f000 fe48 	bl	800559a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800490a:	e0c2      	b.n	8004a92 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM3)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a63      	ldr	r2, [pc, #396]	; (8004aa0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d116      	bne.n	8004944 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
 800491a:	4b60      	ldr	r3, [pc, #384]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	4a5f      	ldr	r2, [pc, #380]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004920:	f043 0302 	orr.w	r3, r3, #2
 8004924:	6413      	str	r3, [r2, #64]	; 0x40
 8004926:	4b5d      	ldr	r3, [pc, #372]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004932:	2200      	movs	r2, #0
 8004934:	2100      	movs	r1, #0
 8004936:	201d      	movs	r0, #29
 8004938:	f000 fe13 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800493c:	201d      	movs	r0, #29
 800493e:	f000 fe2c 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8004942:	e0a6      	b.n	8004a92 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM4)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a56      	ldr	r2, [pc, #344]	; (8004aa4 <HAL_TIM_Base_MspInit+0x1d8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d116      	bne.n	800497c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	4b52      	ldr	r3, [pc, #328]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	4a51      	ldr	r2, [pc, #324]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	6413      	str	r3, [r2, #64]	; 0x40
 800495e:	4b4f      	ldr	r3, [pc, #316]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800496a:	2200      	movs	r2, #0
 800496c:	2100      	movs	r1, #0
 800496e:	201e      	movs	r0, #30
 8004970:	f000 fdf7 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004974:	201e      	movs	r0, #30
 8004976:	f000 fe10 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 800497a:	e08a      	b.n	8004a92 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM5)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a49      	ldr	r2, [pc, #292]	; (8004aa8 <HAL_TIM_Base_MspInit+0x1dc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d116      	bne.n	80049b4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	4b44      	ldr	r3, [pc, #272]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a43      	ldr	r2, [pc, #268]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004990:	f043 0308 	orr.w	r3, r3, #8
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
 8004996:	4b41      	ldr	r3, [pc, #260]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	61bb      	str	r3, [r7, #24]
 80049a0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2100      	movs	r1, #0
 80049a6:	2032      	movs	r0, #50	; 0x32
 80049a8:	f000 fddb 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80049ac:	2032      	movs	r0, #50	; 0x32
 80049ae:	f000 fdf4 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 80049b2:	e06e      	b.n	8004a92 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM6)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a3c      	ldr	r2, [pc, #240]	; (8004aac <HAL_TIM_Base_MspInit+0x1e0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d116      	bne.n	80049ec <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	4a35      	ldr	r2, [pc, #212]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 80049c8:	f043 0310 	orr.w	r3, r3, #16
 80049cc:	6413      	str	r3, [r2, #64]	; 0x40
 80049ce:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80049da:	2200      	movs	r2, #0
 80049dc:	2100      	movs	r1, #0
 80049de:	2036      	movs	r0, #54	; 0x36
 80049e0:	f000 fdbf 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049e4:	2036      	movs	r0, #54	; 0x36
 80049e6:	f000 fdd8 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 80049ea:	e052      	b.n	8004a92 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM7)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2f      	ldr	r2, [pc, #188]	; (8004ab0 <HAL_TIM_Base_MspInit+0x1e4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d116      	bne.n	8004a24 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	4b28      	ldr	r3, [pc, #160]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	4a27      	ldr	r2, [pc, #156]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004a00:	f043 0320 	orr.w	r3, r3, #32
 8004a04:	6413      	str	r3, [r2, #64]	; 0x40
 8004a06:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004a12:	2200      	movs	r2, #0
 8004a14:	2100      	movs	r1, #0
 8004a16:	2037      	movs	r0, #55	; 0x37
 8004a18:	f000 fda3 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004a1c:	2037      	movs	r0, #55	; 0x37
 8004a1e:	f000 fdbc 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8004a22:	e036      	b.n	8004a92 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM9)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a22      	ldr	r2, [pc, #136]	; (8004ab4 <HAL_TIM_Base_MspInit+0x1e8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d116      	bne.n	8004a5c <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a3e:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	2018      	movs	r0, #24
 8004a50:	f000 fd87 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004a54:	2018      	movs	r0, #24
 8004a56:	f000 fda0 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8004a5a:	e01a      	b.n	8004a92 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM10)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <HAL_TIM_Base_MspInit+0x1ec>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d115      	bne.n	8004a92 <HAL_TIM_Base_MspInit+0x1c6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a74:	6453      	str	r3, [r2, #68]	; 0x44
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <HAL_TIM_Base_MspInit+0x1d0>)
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004a82:	2200      	movs	r2, #0
 8004a84:	2100      	movs	r1, #0
 8004a86:	2019      	movs	r0, #25
 8004a88:	f000 fd6b 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004a8c:	2019      	movs	r0, #25
 8004a8e:	f000 fd84 	bl	800559a <HAL_NVIC_EnableIRQ>
}
 8004a92:	bf00      	nop
 8004a94:	3728      	adds	r7, #40	; 0x28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40001000 	.word	0x40001000
 8004ab0:	40001400 	.word	0x40001400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40014400 	.word	0x40014400

08004abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004af4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ac2:	e003      	b.n	8004acc <LoopCopyDataInit>

08004ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004aca:	3104      	adds	r1, #4

08004acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004acc:	480b      	ldr	r0, [pc, #44]	; (8004afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ad4:	d3f6      	bcc.n	8004ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8004ad6:	4a0b      	ldr	r2, [pc, #44]	; (8004b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ad8:	e002      	b.n	8004ae0 <LoopFillZerobss>

08004ada <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004adc:	f842 3b04 	str.w	r3, [r2], #4

08004ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ae0:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ae4:	d3f9      	bcc.n	8004ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ae6:	f7ff fcdb 	bl	80044a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aea:	f002 fbbf 	bl	800726c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aee:	f7ff f805 	bl	8003afc <main>
  bx  lr    
 8004af2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004af4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004af8:	0807ab98 	.word	0x0807ab98
  ldr  r0, =_sdata
 8004afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b00:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8004b04:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8004b08:	20000824 	.word	0x20000824

08004b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b0c:	e7fe      	b.n	8004b0c <ADC_IRQHandler>
	...

08004b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_Init+0x40>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a0d      	ldr	r2, [pc, #52]	; (8004b50 <HAL_Init+0x40>)
 8004b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_Init+0x40>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <HAL_Init+0x40>)
 8004b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b2c:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_Init+0x40>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a07      	ldr	r2, [pc, #28]	; (8004b50 <HAL_Init+0x40>)
 8004b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b38:	2003      	movs	r0, #3
 8004b3a:	f000 fd07 	bl	800554c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f000 f808 	bl	8004b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b44:	f7ff fbd2 	bl	80042ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40023c00 	.word	0x40023c00

08004b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b5c:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_InitTick+0x54>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b12      	ldr	r3, [pc, #72]	; (8004bac <HAL_InitTick+0x58>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	4619      	mov	r1, r3
 8004b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fd1f 	bl	80055b6 <HAL_SYSTICK_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e00e      	b.n	8004ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b0f      	cmp	r3, #15
 8004b86:	d80a      	bhi.n	8004b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b88:	2200      	movs	r2, #0
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b90:	f000 fce7 	bl	8005562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b94:	4a06      	ldr	r2, [pc, #24]	; (8004bb0 <HAL_InitTick+0x5c>)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000000 	.word	0x20000000
 8004bac:	20000008 	.word	0x20000008
 8004bb0:	20000004 	.word	0x20000004

08004bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_IncTick+0x20>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <HAL_IncTick+0x24>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <HAL_IncTick+0x24>)
 8004bc6:	6013      	str	r3, [r2, #0]
}
 8004bc8:	bf00      	nop
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000008 	.word	0x20000008
 8004bd8:	2000081c 	.word	0x2000081c

08004bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return uwTick;
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <HAL_GetTick+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	2000081c 	.word	0x2000081c

08004bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bfc:	f7ff ffee 	bl	8004bdc <HAL_GetTick>
 8004c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c0c:	d005      	beq.n	8004c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c0e:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_Delay+0x40>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c1a:	bf00      	nop
 8004c1c:	f7ff ffde 	bl	8004bdc <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d8f7      	bhi.n	8004c1c <HAL_Delay+0x28>
  {
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20000008 	.word	0x20000008

08004c38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e033      	b.n	8004cb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fd ff18 	bl	8002a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d118      	bne.n	8004ca8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c7e:	f023 0302 	bic.w	r3, r3, #2
 8004c82:	f043 0202 	orr.w	r2, r3, #2
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fa92 	bl	80051b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	f043 0201 	orr.w	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ca6:	e001      	b.n	8004cac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_ADC_Start+0x1a>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e0a5      	b.n	8004e26 <HAL_ADC_Start+0x166>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d018      	beq.n	8004d22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d00:	4b4c      	ldr	r3, [pc, #304]	; (8004e34 <HAL_ADC_Start+0x174>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a4c      	ldr	r2, [pc, #304]	; (8004e38 <HAL_ADC_Start+0x178>)
 8004d06:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0a:	0c9a      	lsrs	r2, r3, #18
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d14:	e002      	b.n	8004d1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f9      	bne.n	8004d16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d179      	bne.n	8004e24 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6e:	d106      	bne.n	8004d7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d74:	f023 0206 	bic.w	r2, r3, #6
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44
 8004d7c:	e002      	b.n	8004d84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_ADC_Start+0x17c>)
 8004d8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004d98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 031f 	and.w	r3, r3, #31
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d12a      	bne.n	8004dfc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <HAL_ADC_Start+0x180>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d015      	beq.n	8004ddc <HAL_ADC_Start+0x11c>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <HAL_ADC_Start+0x184>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d105      	bne.n	8004dc6 <HAL_ADC_Start+0x106>
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <HAL_ADC_Start+0x17c>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <HAL_ADC_Start+0x188>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d129      	bne.n	8004e24 <HAL_ADC_Start+0x164>
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <HAL_ADC_Start+0x17c>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	2b0f      	cmp	r3, #15
 8004dda:	d823      	bhi.n	8004e24 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d11c      	bne.n	8004e24 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004df8:	609a      	str	r2, [r3, #8]
 8004dfa:	e013      	b.n	8004e24 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0f      	ldr	r2, [pc, #60]	; (8004e40 <HAL_ADC_Start+0x180>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10e      	bne.n	8004e24 <HAL_ADC_Start+0x164>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d107      	bne.n	8004e24 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e22:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000000 	.word	0x20000000
 8004e38:	431bde83 	.word	0x431bde83
 8004e3c:	40012300 	.word	0x40012300
 8004e40:	40012000 	.word	0x40012000
 8004e44:	40012100 	.word	0x40012100
 8004e48:	40012200 	.word	0x40012200

08004e4c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e68:	d113      	bne.n	8004e92 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e78:	d10b      	bne.n	8004e92 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e05c      	b.n	8004f4c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004e92:	f7ff fea3 	bl	8004bdc <HAL_GetTick>
 8004e96:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e98:	e01a      	b.n	8004ed0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea0:	d016      	beq.n	8004ed0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <HAL_ADC_PollForConversion+0x6c>
 8004ea8:	f7ff fe98 	bl	8004bdc <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d20b      	bcs.n	8004ed0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	f043 0204 	orr.w	r2, r3, #4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e03d      	b.n	8004f4c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d1dd      	bne.n	8004e9a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f06f 0212 	mvn.w	r2, #18
 8004ee6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d123      	bne.n	8004f4a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d11f      	bne.n	8004f4a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d111      	bne.n	8004f4a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d105      	bne.n	8004f4a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0201 	orr.w	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x1c>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e105      	b.n	8005198 <HAL_ADC_ConfigChannel+0x228>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b09      	cmp	r3, #9
 8004f9a:	d925      	bls.n	8004fe8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68d9      	ldr	r1, [r3, #12]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	3b1e      	subs	r3, #30
 8004fb2:	2207      	movs	r2, #7
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43da      	mvns	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68d9      	ldr	r1, [r3, #12]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	4403      	add	r3, r0
 8004fda:	3b1e      	subs	r3, #30
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e022      	b.n	800502e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6919      	ldr	r1, [r3, #16]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	2207      	movs	r2, #7
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43da      	mvns	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	400a      	ands	r2, r1
 800500a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6919      	ldr	r1, [r3, #16]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	4618      	mov	r0, r3
 800501e:	4603      	mov	r3, r0
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4403      	add	r3, r0
 8005024:	409a      	lsls	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b06      	cmp	r3, #6
 8005034:	d824      	bhi.n	8005080 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	3b05      	subs	r3, #5
 8005048:	221f      	movs	r2, #31
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43da      	mvns	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	400a      	ands	r2, r1
 8005056:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	4618      	mov	r0, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	3b05      	subs	r3, #5
 8005072:	fa00 f203 	lsl.w	r2, r0, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	635a      	str	r2, [r3, #52]	; 0x34
 800507e:	e04c      	b.n	800511a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b0c      	cmp	r3, #12
 8005086:	d824      	bhi.n	80050d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	3b23      	subs	r3, #35	; 0x23
 800509a:	221f      	movs	r2, #31
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	43da      	mvns	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	400a      	ands	r2, r1
 80050a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	4618      	mov	r0, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	3b23      	subs	r3, #35	; 0x23
 80050c4:	fa00 f203 	lsl.w	r2, r0, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30
 80050d0:	e023      	b.n	800511a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	3b41      	subs	r3, #65	; 0x41
 80050e4:	221f      	movs	r2, #31
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43da      	mvns	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	400a      	ands	r2, r1
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	4618      	mov	r0, r3
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	3b41      	subs	r3, #65	; 0x41
 800510e:	fa00 f203 	lsl.w	r2, r0, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800511a:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <HAL_ADC_ConfigChannel+0x234>)
 800511c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <HAL_ADC_ConfigChannel+0x238>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d109      	bne.n	800513c <HAL_ADC_ConfigChannel+0x1cc>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b12      	cmp	r3, #18
 800512e:	d105      	bne.n	800513c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a19      	ldr	r2, [pc, #100]	; (80051a8 <HAL_ADC_ConfigChannel+0x238>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d123      	bne.n	800518e <HAL_ADC_ConfigChannel+0x21e>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b10      	cmp	r3, #16
 800514c:	d003      	beq.n	8005156 <HAL_ADC_ConfigChannel+0x1e6>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b11      	cmp	r3, #17
 8005154:	d11b      	bne.n	800518e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b10      	cmp	r3, #16
 8005168:	d111      	bne.n	800518e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800516a:	4b10      	ldr	r3, [pc, #64]	; (80051ac <HAL_ADC_ConfigChannel+0x23c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <HAL_ADC_ConfigChannel+0x240>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	0c9a      	lsrs	r2, r3, #18
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005180:	e002      	b.n	8005188 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	3b01      	subs	r3, #1
 8005186:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f9      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40012300 	.word	0x40012300
 80051a8:	40012000 	.word	0x40012000
 80051ac:	20000000 	.word	0x20000000
 80051b0:	431bde83 	.word	0x431bde83

080051b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051bc:	4b79      	ldr	r3, [pc, #484]	; (80053a4 <ADC_Init+0x1f0>)
 80051be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6859      	ldr	r1, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	021a      	lsls	r2, r3, #8
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800520c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800522e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6899      	ldr	r1, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	4a58      	ldr	r2, [pc, #352]	; (80053a8 <ADC_Init+0x1f4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d022      	beq.n	8005292 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800525a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6899      	ldr	r1, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800527c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6899      	ldr	r1, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	e00f      	b.n	80052b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0202 	bic.w	r2, r2, #2
 80052c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6899      	ldr	r1, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	7e1b      	ldrb	r3, [r3, #24]
 80052cc:	005a      	lsls	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01b      	beq.n	8005318 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80052fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6859      	ldr	r1, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	3b01      	subs	r3, #1
 800530c:	035a      	lsls	r2, r3, #13
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
 8005316:	e007      	b.n	8005328 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	3b01      	subs	r3, #1
 8005344:	051a      	lsls	r2, r3, #20
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800535c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6899      	ldr	r1, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800536a:	025a      	lsls	r2, r3, #9
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6899      	ldr	r1, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	029a      	lsls	r2, r3, #10
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40012300 	.word	0x40012300
 80053a8:	0f000001 	.word	0x0f000001

080053ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <__NVIC_SetPriorityGrouping+0x44>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053c8:	4013      	ands	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053de:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <__NVIC_SetPriorityGrouping+0x44>)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	60d3      	str	r3, [r2, #12]
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	e000ed00 	.word	0xe000ed00

080053f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053f8:	4b04      	ldr	r3, [pc, #16]	; (800540c <__NVIC_GetPriorityGrouping+0x18>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	0a1b      	lsrs	r3, r3, #8
 80053fe:	f003 0307 	and.w	r3, r3, #7
}
 8005402:	4618      	mov	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541e:	2b00      	cmp	r3, #0
 8005420:	db0b      	blt.n	800543a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	f003 021f 	and.w	r2, r3, #31
 8005428:	4907      	ldr	r1, [pc, #28]	; (8005448 <__NVIC_EnableIRQ+0x38>)
 800542a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	2001      	movs	r0, #1
 8005432:	fa00 f202 	lsl.w	r2, r0, r2
 8005436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	e000e100 	.word	0xe000e100

0800544c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	6039      	str	r1, [r7, #0]
 8005456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545c:	2b00      	cmp	r3, #0
 800545e:	db0a      	blt.n	8005476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	b2da      	uxtb	r2, r3
 8005464:	490c      	ldr	r1, [pc, #48]	; (8005498 <__NVIC_SetPriority+0x4c>)
 8005466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546a:	0112      	lsls	r2, r2, #4
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	440b      	add	r3, r1
 8005470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005474:	e00a      	b.n	800548c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	b2da      	uxtb	r2, r3
 800547a:	4908      	ldr	r1, [pc, #32]	; (800549c <__NVIC_SetPriority+0x50>)
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	3b04      	subs	r3, #4
 8005484:	0112      	lsls	r2, r2, #4
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	440b      	add	r3, r1
 800548a:	761a      	strb	r2, [r3, #24]
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	e000e100 	.word	0xe000e100
 800549c:	e000ed00 	.word	0xe000ed00

080054a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b089      	sub	sp, #36	; 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f1c3 0307 	rsb	r3, r3, #7
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	bf28      	it	cs
 80054be:	2304      	movcs	r3, #4
 80054c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	3304      	adds	r3, #4
 80054c6:	2b06      	cmp	r3, #6
 80054c8:	d902      	bls.n	80054d0 <NVIC_EncodePriority+0x30>
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	3b03      	subs	r3, #3
 80054ce:	e000      	b.n	80054d2 <NVIC_EncodePriority+0x32>
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43da      	mvns	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	401a      	ands	r2, r3
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	fa01 f303 	lsl.w	r3, r1, r3
 80054f2:	43d9      	mvns	r1, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f8:	4313      	orrs	r3, r2
         );
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3724      	adds	r7, #36	; 0x24
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005518:	d301      	bcc.n	800551e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800551a:	2301      	movs	r3, #1
 800551c:	e00f      	b.n	800553e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800551e:	4a0a      	ldr	r2, [pc, #40]	; (8005548 <SysTick_Config+0x40>)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005526:	210f      	movs	r1, #15
 8005528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800552c:	f7ff ff8e 	bl	800544c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <SysTick_Config+0x40>)
 8005532:	2200      	movs	r2, #0
 8005534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005536:	4b04      	ldr	r3, [pc, #16]	; (8005548 <SysTick_Config+0x40>)
 8005538:	2207      	movs	r2, #7
 800553a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	e000e010 	.word	0xe000e010

0800554c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff ff29 	bl	80053ac <__NVIC_SetPriorityGrouping>
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	4603      	mov	r3, r0
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005574:	f7ff ff3e 	bl	80053f4 <__NVIC_GetPriorityGrouping>
 8005578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	6978      	ldr	r0, [r7, #20]
 8005580:	f7ff ff8e 	bl	80054a0 <NVIC_EncodePriority>
 8005584:	4602      	mov	r2, r0
 8005586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558a:	4611      	mov	r1, r2
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ff5d 	bl	800544c <__NVIC_SetPriority>
}
 8005592:	bf00      	nop
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff ff31 	bl	8005410 <__NVIC_EnableIRQ>
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff ffa2 	bl	8005508 <SysTick_Config>
 80055c4:	4603      	mov	r3, r0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b089      	sub	sp, #36	; 0x24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	e16b      	b.n	80058c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055ec:	2201      	movs	r2, #1
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4013      	ands	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	429a      	cmp	r2, r3
 8005606:	f040 815a 	bne.w	80058be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d00b      	beq.n	800562a <HAL_GPIO_Init+0x5a>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d007      	beq.n	800562a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800561e:	2b11      	cmp	r3, #17
 8005620:	d003      	beq.n	800562a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b12      	cmp	r3, #18
 8005628:	d130      	bne.n	800568c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	2203      	movs	r2, #3
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43db      	mvns	r3, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4013      	ands	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4313      	orrs	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005660:	2201      	movs	r2, #1
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	43db      	mvns	r3, r3
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4013      	ands	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	f003 0201 	and.w	r2, r3, #1
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	2203      	movs	r2, #3
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	4013      	ands	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d003      	beq.n	80056cc <HAL_GPIO_Init+0xfc>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b12      	cmp	r3, #18
 80056ca:	d123      	bne.n	8005714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	08da      	lsrs	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3208      	adds	r2, #8
 80056d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	220f      	movs	r2, #15
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4013      	ands	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	08da      	lsrs	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3208      	adds	r2, #8
 800570e:	69b9      	ldr	r1, [r7, #24]
 8005710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	2203      	movs	r2, #3
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0203 	and.w	r2, r3, #3
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4313      	orrs	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80b4 	beq.w	80058be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	4b5f      	ldr	r3, [pc, #380]	; (80058d8 <HAL_GPIO_Init+0x308>)
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	4a5e      	ldr	r2, [pc, #376]	; (80058d8 <HAL_GPIO_Init+0x308>)
 8005760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005764:	6453      	str	r3, [r2, #68]	; 0x44
 8005766:	4b5c      	ldr	r3, [pc, #368]	; (80058d8 <HAL_GPIO_Init+0x308>)
 8005768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005772:	4a5a      	ldr	r2, [pc, #360]	; (80058dc <HAL_GPIO_Init+0x30c>)
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	3302      	adds	r3, #2
 800577a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	220f      	movs	r2, #15
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a51      	ldr	r2, [pc, #324]	; (80058e0 <HAL_GPIO_Init+0x310>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d02b      	beq.n	80057f6 <HAL_GPIO_Init+0x226>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a50      	ldr	r2, [pc, #320]	; (80058e4 <HAL_GPIO_Init+0x314>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d025      	beq.n	80057f2 <HAL_GPIO_Init+0x222>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a4f      	ldr	r2, [pc, #316]	; (80058e8 <HAL_GPIO_Init+0x318>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01f      	beq.n	80057ee <HAL_GPIO_Init+0x21e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a4e      	ldr	r2, [pc, #312]	; (80058ec <HAL_GPIO_Init+0x31c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d019      	beq.n	80057ea <HAL_GPIO_Init+0x21a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a4d      	ldr	r2, [pc, #308]	; (80058f0 <HAL_GPIO_Init+0x320>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_GPIO_Init+0x216>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a4c      	ldr	r2, [pc, #304]	; (80058f4 <HAL_GPIO_Init+0x324>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00d      	beq.n	80057e2 <HAL_GPIO_Init+0x212>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a4b      	ldr	r2, [pc, #300]	; (80058f8 <HAL_GPIO_Init+0x328>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d007      	beq.n	80057de <HAL_GPIO_Init+0x20e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a4a      	ldr	r2, [pc, #296]	; (80058fc <HAL_GPIO_Init+0x32c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d101      	bne.n	80057da <HAL_GPIO_Init+0x20a>
 80057d6:	2307      	movs	r3, #7
 80057d8:	e00e      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057da:	2308      	movs	r3, #8
 80057dc:	e00c      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057de:	2306      	movs	r3, #6
 80057e0:	e00a      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057e2:	2305      	movs	r3, #5
 80057e4:	e008      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057e6:	2304      	movs	r3, #4
 80057e8:	e006      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057ea:	2303      	movs	r3, #3
 80057ec:	e004      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e002      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057f6:	2300      	movs	r3, #0
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	f002 0203 	and.w	r2, r2, #3
 80057fe:	0092      	lsls	r2, r2, #2
 8005800:	4093      	lsls	r3, r2
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4313      	orrs	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005808:	4934      	ldr	r1, [pc, #208]	; (80058dc <HAL_GPIO_Init+0x30c>)
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	089b      	lsrs	r3, r3, #2
 800580e:	3302      	adds	r3, #2
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005816:	4b3a      	ldr	r3, [pc, #232]	; (8005900 <HAL_GPIO_Init+0x330>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	43db      	mvns	r3, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800583a:	4a31      	ldr	r2, [pc, #196]	; (8005900 <HAL_GPIO_Init+0x330>)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005840:	4b2f      	ldr	r3, [pc, #188]	; (8005900 <HAL_GPIO_Init+0x330>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005864:	4a26      	ldr	r2, [pc, #152]	; (8005900 <HAL_GPIO_Init+0x330>)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800586a:	4b25      	ldr	r3, [pc, #148]	; (8005900 <HAL_GPIO_Init+0x330>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800588e:	4a1c      	ldr	r2, [pc, #112]	; (8005900 <HAL_GPIO_Init+0x330>)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005894:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <HAL_GPIO_Init+0x330>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058b8:	4a11      	ldr	r2, [pc, #68]	; (8005900 <HAL_GPIO_Init+0x330>)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	3301      	adds	r3, #1
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b0f      	cmp	r3, #15
 80058c8:	f67f ae90 	bls.w	80055ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058cc:	bf00      	nop
 80058ce:	3724      	adds	r7, #36	; 0x24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40023800 	.word	0x40023800
 80058dc:	40013800 	.word	0x40013800
 80058e0:	40020000 	.word	0x40020000
 80058e4:	40020400 	.word	0x40020400
 80058e8:	40020800 	.word	0x40020800
 80058ec:	40020c00 	.word	0x40020c00
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40021400 	.word	0x40021400
 80058f8:	40021800 	.word	0x40021800
 80058fc:	40021c00 	.word	0x40021c00
 8005900:	40013c00 	.word	0x40013c00

08005904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	807b      	strh	r3, [r7, #2]
 8005910:	4613      	mov	r3, r2
 8005912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005914:	787b      	ldrb	r3, [r7, #1]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800591a:	887a      	ldrh	r2, [r7, #2]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005920:	e003      	b.n	800592a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005922:	887b      	ldrh	r3, [r7, #2]
 8005924:	041a      	lsls	r2, r3, #16
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	619a      	str	r2, [r3, #24]
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005942:	4b08      	ldr	r3, [pc, #32]	; (8005964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d006      	beq.n	800595c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800594e:	4a05      	ldr	r2, [pc, #20]	; (8005964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fa1c 	bl	8003d94 <HAL_GPIO_EXTI_Callback>
  }
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40013c00 	.word	0x40013c00

08005968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e25b      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d075      	beq.n	8005a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005986:	4ba3      	ldr	r3, [pc, #652]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b04      	cmp	r3, #4
 8005990:	d00c      	beq.n	80059ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005992:	4ba0      	ldr	r3, [pc, #640]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800599a:	2b08      	cmp	r3, #8
 800599c:	d112      	bne.n	80059c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800599e:	4b9d      	ldr	r3, [pc, #628]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059aa:	d10b      	bne.n	80059c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ac:	4b99      	ldr	r3, [pc, #612]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d05b      	beq.n	8005a70 <HAL_RCC_OscConfig+0x108>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d157      	bne.n	8005a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e236      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059cc:	d106      	bne.n	80059dc <HAL_RCC_OscConfig+0x74>
 80059ce:	4b91      	ldr	r3, [pc, #580]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a90      	ldr	r2, [pc, #576]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e01d      	b.n	8005a18 <HAL_RCC_OscConfig+0xb0>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCC_OscConfig+0x98>
 80059e6:	4b8b      	ldr	r3, [pc, #556]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a8a      	ldr	r2, [pc, #552]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	4b88      	ldr	r3, [pc, #544]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a87      	ldr	r2, [pc, #540]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e00b      	b.n	8005a18 <HAL_RCC_OscConfig+0xb0>
 8005a00:	4b84      	ldr	r3, [pc, #528]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a83      	ldr	r2, [pc, #524]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	4b81      	ldr	r3, [pc, #516]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a80      	ldr	r2, [pc, #512]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d013      	beq.n	8005a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a20:	f7ff f8dc 	bl	8004bdc <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a28:	f7ff f8d8 	bl	8004bdc <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b64      	cmp	r3, #100	; 0x64
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e1fb      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3a:	4b76      	ldr	r3, [pc, #472]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f0      	beq.n	8005a28 <HAL_RCC_OscConfig+0xc0>
 8005a46:	e014      	b.n	8005a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a48:	f7ff f8c8 	bl	8004bdc <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a50:	f7ff f8c4 	bl	8004bdc <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b64      	cmp	r3, #100	; 0x64
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e1e7      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a62:	4b6c      	ldr	r3, [pc, #432]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f0      	bne.n	8005a50 <HAL_RCC_OscConfig+0xe8>
 8005a6e:	e000      	b.n	8005a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d063      	beq.n	8005b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a7e:	4b65      	ldr	r3, [pc, #404]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 030c 	and.w	r3, r3, #12
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a8a:	4b62      	ldr	r3, [pc, #392]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d11c      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a96:	4b5f      	ldr	r3, [pc, #380]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d116      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aa2:	4b5c      	ldr	r3, [pc, #368]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_RCC_OscConfig+0x152>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e1bb      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aba:	4b56      	ldr	r3, [pc, #344]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4952      	ldr	r1, [pc, #328]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ace:	e03a      	b.n	8005b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d020      	beq.n	8005b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ad8:	4b4f      	ldr	r3, [pc, #316]	; (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ade:	f7ff f87d 	bl	8004bdc <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ae6:	f7ff f879 	bl	8004bdc <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e19c      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af8:	4b46      	ldr	r3, [pc, #280]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b04:	4b43      	ldr	r3, [pc, #268]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4940      	ldr	r1, [pc, #256]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	600b      	str	r3, [r1, #0]
 8005b18:	e015      	b.n	8005b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b1a:	4b3f      	ldr	r3, [pc, #252]	; (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7ff f85c 	bl	8004bdc <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b28:	f7ff f858 	bl	8004bdc <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e17b      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b3a:	4b36      	ldr	r3, [pc, #216]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d030      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d016      	beq.n	8005b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b5a:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <HAL_RCC_OscConfig+0x2b4>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b60:	f7ff f83c 	bl	8004bdc <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b68:	f7ff f838 	bl	8004bdc <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e15b      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b7a:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x200>
 8005b86:	e015      	b.n	8005bb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b88:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <HAL_RCC_OscConfig+0x2b4>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b8e:	f7ff f825 	bl	8004bdc <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b96:	f7ff f821 	bl	8004bdc <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e144      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f0      	bne.n	8005b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80a0 	beq.w	8005d02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10f      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	4a0e      	ldr	r2, [pc, #56]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be0:	6413      	str	r3, [r2, #64]	; 0x40
 8005be2:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <HAL_RCC_OscConfig+0x2ac>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <HAL_RCC_OscConfig+0x2b8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d121      	bne.n	8005c42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bfe:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <HAL_RCC_OscConfig+0x2b8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a07      	ldr	r2, [pc, #28]	; (8005c20 <HAL_RCC_OscConfig+0x2b8>)
 8005c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0a:	f7fe ffe7 	bl	8004bdc <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c10:	e011      	b.n	8005c36 <HAL_RCC_OscConfig+0x2ce>
 8005c12:	bf00      	nop
 8005c14:	40023800 	.word	0x40023800
 8005c18:	42470000 	.word	0x42470000
 8005c1c:	42470e80 	.word	0x42470e80
 8005c20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c24:	f7fe ffda 	bl	8004bdc <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e0fd      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c36:	4b81      	ldr	r3, [pc, #516]	; (8005e3c <HAL_RCC_OscConfig+0x4d4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d106      	bne.n	8005c58 <HAL_RCC_OscConfig+0x2f0>
 8005c4a:	4b7d      	ldr	r3, [pc, #500]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	4a7c      	ldr	r2, [pc, #496]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005c50:	f043 0301 	orr.w	r3, r3, #1
 8005c54:	6713      	str	r3, [r2, #112]	; 0x70
 8005c56:	e01c      	b.n	8005c92 <HAL_RCC_OscConfig+0x32a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b05      	cmp	r3, #5
 8005c5e:	d10c      	bne.n	8005c7a <HAL_RCC_OscConfig+0x312>
 8005c60:	4b77      	ldr	r3, [pc, #476]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	4a76      	ldr	r2, [pc, #472]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005c66:	f043 0304 	orr.w	r3, r3, #4
 8005c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6c:	4b74      	ldr	r3, [pc, #464]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	4a73      	ldr	r2, [pc, #460]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	6713      	str	r3, [r2, #112]	; 0x70
 8005c78:	e00b      	b.n	8005c92 <HAL_RCC_OscConfig+0x32a>
 8005c7a:	4b71      	ldr	r3, [pc, #452]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	4a70      	ldr	r2, [pc, #448]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	6713      	str	r3, [r2, #112]	; 0x70
 8005c86:	4b6e      	ldr	r3, [pc, #440]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8a:	4a6d      	ldr	r2, [pc, #436]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005c8c:	f023 0304 	bic.w	r3, r3, #4
 8005c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d015      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9a:	f7fe ff9f 	bl	8004bdc <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca2:	f7fe ff9b 	bl	8004bdc <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e0bc      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb8:	4b61      	ldr	r3, [pc, #388]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0ee      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x33a>
 8005cc4:	e014      	b.n	8005cf0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc6:	f7fe ff89 	bl	8004bdc <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ccc:	e00a      	b.n	8005ce4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cce:	f7fe ff85 	bl	8004bdc <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e0a6      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce4:	4b56      	ldr	r3, [pc, #344]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1ee      	bne.n	8005cce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d105      	bne.n	8005d02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf6:	4b52      	ldr	r3, [pc, #328]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	4a51      	ldr	r2, [pc, #324]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 8092 	beq.w	8005e30 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d0c:	4b4c      	ldr	r3, [pc, #304]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 030c 	and.w	r3, r3, #12
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d05c      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d141      	bne.n	8005da4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d20:	4b48      	ldr	r3, [pc, #288]	; (8005e44 <HAL_RCC_OscConfig+0x4dc>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d26:	f7fe ff59 	bl	8004bdc <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2e:	f7fe ff55 	bl	8004bdc <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e078      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d40:	4b3f      	ldr	r3, [pc, #252]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f0      	bne.n	8005d2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	019b      	lsls	r3, r3, #6
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	3b01      	subs	r3, #1
 8005d66:	041b      	lsls	r3, r3, #16
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	4933      	ldr	r1, [pc, #204]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d76:	4b33      	ldr	r3, [pc, #204]	; (8005e44 <HAL_RCC_OscConfig+0x4dc>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d7c:	f7fe ff2e 	bl	8004bdc <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d84:	f7fe ff2a 	bl	8004bdc <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e04d      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d96:	4b2a      	ldr	r3, [pc, #168]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0f0      	beq.n	8005d84 <HAL_RCC_OscConfig+0x41c>
 8005da2:	e045      	b.n	8005e30 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da4:	4b27      	ldr	r3, [pc, #156]	; (8005e44 <HAL_RCC_OscConfig+0x4dc>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005daa:	f7fe ff17 	bl	8004bdc <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db2:	f7fe ff13 	bl	8004bdc <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e036      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc4:	4b1e      	ldr	r3, [pc, #120]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f0      	bne.n	8005db2 <HAL_RCC_OscConfig+0x44a>
 8005dd0:	e02e      	b.n	8005e30 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e029      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dde:	4b18      	ldr	r3, [pc, #96]	; (8005e40 <HAL_RCC_OscConfig+0x4d8>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d11c      	bne.n	8005e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d115      	bne.n	8005e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e06:	4013      	ands	r3, r2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10d      	bne.n	8005e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d106      	bne.n	8005e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d001      	beq.n	8005e30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40007000 	.word	0x40007000
 8005e40:	40023800 	.word	0x40023800
 8005e44:	42470060 	.word	0x42470060

08005e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0cc      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e5c:	4b68      	ldr	r3, [pc, #416]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d90c      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6a:	4b65      	ldr	r3, [pc, #404]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b63      	ldr	r3, [pc, #396]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0b8      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d020      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e9c:	4b59      	ldr	r3, [pc, #356]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	4a58      	ldr	r2, [pc, #352]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0308 	and.w	r3, r3, #8
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eb4:	4b53      	ldr	r3, [pc, #332]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4a52      	ldr	r2, [pc, #328]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec0:	4b50      	ldr	r3, [pc, #320]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	494d      	ldr	r1, [pc, #308]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d044      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d107      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee6:	4b47      	ldr	r3, [pc, #284]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d119      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e07f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d003      	beq.n	8005f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d107      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f06:	4b3f      	ldr	r3, [pc, #252]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e06f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f16:	4b3b      	ldr	r3, [pc, #236]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e067      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f26:	4b37      	ldr	r3, [pc, #220]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f023 0203 	bic.w	r2, r3, #3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4934      	ldr	r1, [pc, #208]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f38:	f7fe fe50 	bl	8004bdc <HAL_GetTick>
 8005f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f40:	f7fe fe4c 	bl	8004bdc <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e04f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f56:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 020c 	and.w	r2, r3, #12
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d1eb      	bne.n	8005f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f68:	4b25      	ldr	r3, [pc, #148]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d20c      	bcs.n	8005f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f76:	4b22      	ldr	r3, [pc, #136]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7e:	4b20      	ldr	r3, [pc, #128]	; (8006000 <HAL_RCC_ClockConfig+0x1b8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e032      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f9c:	4b19      	ldr	r3, [pc, #100]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4916      	ldr	r1, [pc, #88]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fba:	4b12      	ldr	r3, [pc, #72]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	490e      	ldr	r1, [pc, #56]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fce:	f000 f821 	bl	8006014 <HAL_RCC_GetSysClockFreq>
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	091b      	lsrs	r3, r3, #4
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	4a0a      	ldr	r2, [pc, #40]	; (8006008 <HAL_RCC_ClockConfig+0x1c0>)
 8005fe0:	5cd3      	ldrb	r3, [r2, r3]
 8005fe2:	fa21 f303 	lsr.w	r3, r1, r3
 8005fe6:	4a09      	ldr	r2, [pc, #36]	; (800600c <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fea:	4b09      	ldr	r3, [pc, #36]	; (8006010 <HAL_RCC_ClockConfig+0x1c8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fdb0 	bl	8004b54 <HAL_InitTick>

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40023c00 	.word	0x40023c00
 8006004:	40023800 	.word	0x40023800
 8006008:	0807a90c 	.word	0x0807a90c
 800600c:	20000000 	.word	0x20000000
 8006010:	20000004 	.word	0x20000004

08006014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	2300      	movs	r3, #0
 8006024:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800602a:	4b63      	ldr	r3, [pc, #396]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 030c 	and.w	r3, r3, #12
 8006032:	2b04      	cmp	r3, #4
 8006034:	d007      	beq.n	8006046 <HAL_RCC_GetSysClockFreq+0x32>
 8006036:	2b08      	cmp	r3, #8
 8006038:	d008      	beq.n	800604c <HAL_RCC_GetSysClockFreq+0x38>
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 80b4 	bne.w	80061a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006040:	4b5e      	ldr	r3, [pc, #376]	; (80061bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006042:	60bb      	str	r3, [r7, #8]
       break;
 8006044:	e0b3      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006046:	4b5d      	ldr	r3, [pc, #372]	; (80061bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006048:	60bb      	str	r3, [r7, #8]
      break;
 800604a:	e0b0      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800604c:	4b5a      	ldr	r3, [pc, #360]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006054:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006056:	4b58      	ldr	r3, [pc, #352]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d04a      	beq.n	80060f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006062:	4b55      	ldr	r3, [pc, #340]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	f04f 0400 	mov.w	r4, #0
 800606c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	ea03 0501 	and.w	r5, r3, r1
 8006078:	ea04 0602 	and.w	r6, r4, r2
 800607c:	4629      	mov	r1, r5
 800607e:	4632      	mov	r2, r6
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	f04f 0400 	mov.w	r4, #0
 8006088:	0154      	lsls	r4, r2, #5
 800608a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800608e:	014b      	lsls	r3, r1, #5
 8006090:	4619      	mov	r1, r3
 8006092:	4622      	mov	r2, r4
 8006094:	1b49      	subs	r1, r1, r5
 8006096:	eb62 0206 	sbc.w	r2, r2, r6
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	f04f 0400 	mov.w	r4, #0
 80060a2:	0194      	lsls	r4, r2, #6
 80060a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80060a8:	018b      	lsls	r3, r1, #6
 80060aa:	1a5b      	subs	r3, r3, r1
 80060ac:	eb64 0402 	sbc.w	r4, r4, r2
 80060b0:	f04f 0100 	mov.w	r1, #0
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	00e2      	lsls	r2, r4, #3
 80060ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80060be:	00d9      	lsls	r1, r3, #3
 80060c0:	460b      	mov	r3, r1
 80060c2:	4614      	mov	r4, r2
 80060c4:	195b      	adds	r3, r3, r5
 80060c6:	eb44 0406 	adc.w	r4, r4, r6
 80060ca:	f04f 0100 	mov.w	r1, #0
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	02a2      	lsls	r2, r4, #10
 80060d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80060d8:	0299      	lsls	r1, r3, #10
 80060da:	460b      	mov	r3, r1
 80060dc:	4614      	mov	r4, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	4621      	mov	r1, r4
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f04f 0400 	mov.w	r4, #0
 80060e8:	461a      	mov	r2, r3
 80060ea:	4623      	mov	r3, r4
 80060ec:	f7fa fd5c 	bl	8000ba8 <__aeabi_uldivmod>
 80060f0:	4603      	mov	r3, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	e049      	b.n	800618c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f8:	4b2f      	ldr	r3, [pc, #188]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	099b      	lsrs	r3, r3, #6
 80060fe:	f04f 0400 	mov.w	r4, #0
 8006102:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	ea03 0501 	and.w	r5, r3, r1
 800610e:	ea04 0602 	and.w	r6, r4, r2
 8006112:	4629      	mov	r1, r5
 8006114:	4632      	mov	r2, r6
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	f04f 0400 	mov.w	r4, #0
 800611e:	0154      	lsls	r4, r2, #5
 8006120:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006124:	014b      	lsls	r3, r1, #5
 8006126:	4619      	mov	r1, r3
 8006128:	4622      	mov	r2, r4
 800612a:	1b49      	subs	r1, r1, r5
 800612c:	eb62 0206 	sbc.w	r2, r2, r6
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	f04f 0400 	mov.w	r4, #0
 8006138:	0194      	lsls	r4, r2, #6
 800613a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800613e:	018b      	lsls	r3, r1, #6
 8006140:	1a5b      	subs	r3, r3, r1
 8006142:	eb64 0402 	sbc.w	r4, r4, r2
 8006146:	f04f 0100 	mov.w	r1, #0
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	00e2      	lsls	r2, r4, #3
 8006150:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006154:	00d9      	lsls	r1, r3, #3
 8006156:	460b      	mov	r3, r1
 8006158:	4614      	mov	r4, r2
 800615a:	195b      	adds	r3, r3, r5
 800615c:	eb44 0406 	adc.w	r4, r4, r6
 8006160:	f04f 0100 	mov.w	r1, #0
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	02a2      	lsls	r2, r4, #10
 800616a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800616e:	0299      	lsls	r1, r3, #10
 8006170:	460b      	mov	r3, r1
 8006172:	4614      	mov	r4, r2
 8006174:	4618      	mov	r0, r3
 8006176:	4621      	mov	r1, r4
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f04f 0400 	mov.w	r4, #0
 800617e:	461a      	mov	r2, r3
 8006180:	4623      	mov	r3, r4
 8006182:	f7fa fd11 	bl	8000ba8 <__aeabi_uldivmod>
 8006186:	4603      	mov	r3, r0
 8006188:	460c      	mov	r4, r1
 800618a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	0c1b      	lsrs	r3, r3, #16
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	3301      	adds	r3, #1
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a4:	60bb      	str	r3, [r7, #8]
      break;
 80061a6:	e002      	b.n	80061ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061a8:	4b04      	ldr	r3, [pc, #16]	; (80061bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80061aa:	60bb      	str	r3, [r7, #8]
      break;
 80061ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061ae:	68bb      	ldr	r3, [r7, #8]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b8:	40023800 	.word	0x40023800
 80061bc:	00f42400 	.word	0x00f42400

080061c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e056      	b.n	8006280 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fd ffff 	bl	80041f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006208:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	ea42 0103 	orr.w	r1, r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	0c1b      	lsrs	r3, r3, #16
 8006250:	f003 0104 	and.w	r1, r3, #4
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69da      	ldr	r2, [r3, #28]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800626e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a4:	d112      	bne.n	80062cc <HAL_SPI_Receive+0x44>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10e      	bne.n	80062cc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2204      	movs	r2, #4
 80062b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	68b9      	ldr	r1, [r7, #8]
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 f8e9 	bl	800649a <HAL_SPI_TransmitReceive>
 80062c8:	4603      	mov	r3, r0
 80062ca:	e0e2      	b.n	8006492 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_SPI_Receive+0x52>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e0db      	b.n	8006492 <HAL_SPI_Receive+0x20a>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062e2:	f7fe fc7b 	bl	8004bdc <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d002      	beq.n	80062fa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80062f4:	2302      	movs	r3, #2
 80062f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062f8:	e0c2      	b.n	8006480 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_SPI_Receive+0x7e>
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
    goto error;
 800630a:	e0b9      	b.n	8006480 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2204      	movs	r2, #4
 8006310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	88fa      	ldrh	r2, [r7, #6]
 8006324:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	88fa      	ldrh	r2, [r7, #6]
 800632a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006352:	d107      	bne.n	8006364 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006362:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	d007      	beq.n	8006382 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006380:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d162      	bne.n	8006450 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800638a:	e02e      	b.n	80063ea <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b01      	cmp	r3, #1
 8006398:	d115      	bne.n	80063c6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f103 020c 	add.w	r2, r3, #12
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	7812      	ldrb	r2, [r2, #0]
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063c4:	e011      	b.n	80063ea <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c6:	f7fe fc09 	bl	8004bdc <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d803      	bhi.n	80063de <HAL_SPI_Receive+0x156>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063dc:	d102      	bne.n	80063e4 <HAL_SPI_Receive+0x15c>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063e8:	e04a      	b.n	8006480 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1cb      	bne.n	800638c <HAL_SPI_Receive+0x104>
 80063f4:	e031      	b.n	800645a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b01      	cmp	r3, #1
 8006402:	d113      	bne.n	800642c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	b292      	uxth	r2, r2
 8006410:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	1c9a      	adds	r2, r3, #2
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	87da      	strh	r2, [r3, #62]	; 0x3e
 800642a:	e011      	b.n	8006450 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800642c:	f7fe fbd6 	bl	8004bdc <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d803      	bhi.n	8006444 <HAL_SPI_Receive+0x1bc>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006442:	d102      	bne.n	800644a <HAL_SPI_Receive+0x1c2>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800644e:	e017      	b.n	8006480 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1cd      	bne.n	80063f6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 fa27 	bl	80068b2 <SPI_EndRxTransaction>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	75fb      	strb	r3, [r7, #23]
 800647c:	e000      	b.n	8006480 <HAL_SPI_Receive+0x1f8>
  }

error :
 800647e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b08c      	sub	sp, #48	; 0x30
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
 80064a6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064a8:	2301      	movs	r3, #1
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x26>
 80064bc:	2302      	movs	r3, #2
 80064be:	e18a      	b.n	80067d6 <HAL_SPI_TransmitReceive+0x33c>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064c8:	f7fe fb88 	bl	8004bdc <HAL_GetTick>
 80064cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064de:	887b      	ldrh	r3, [r7, #2]
 80064e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d00f      	beq.n	800650a <HAL_SPI_TransmitReceive+0x70>
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f0:	d107      	bne.n	8006502 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d103      	bne.n	8006502 <HAL_SPI_TransmitReceive+0x68>
 80064fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d003      	beq.n	800650a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006502:	2302      	movs	r3, #2
 8006504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006508:	e15b      	b.n	80067c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_SPI_TransmitReceive+0x82>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <HAL_SPI_TransmitReceive+0x82>
 8006516:	887b      	ldrh	r3, [r7, #2]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d103      	bne.n	8006524 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006522:	e14e      	b.n	80067c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b04      	cmp	r3, #4
 800652e:	d003      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2205      	movs	r2, #5
 8006534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	887a      	ldrh	r2, [r7, #2]
 8006548:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	887a      	ldrh	r2, [r7, #2]
 800654e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	887a      	ldrh	r2, [r7, #2]
 800655a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	887a      	ldrh	r2, [r7, #2]
 8006560:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d007      	beq.n	800658c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006594:	d178      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x10a>
 800659e:	8b7b      	ldrh	r3, [r7, #26]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d166      	bne.n	8006672 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	881a      	ldrh	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	1c9a      	adds	r2, r3, #2
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065c8:	e053      	b.n	8006672 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d11b      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x176>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d016      	beq.n	8006610 <HAL_SPI_TransmitReceive+0x176>
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d113      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	881a      	ldrh	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	1c9a      	adds	r2, r3, #2
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d119      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x1b8>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d014      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	b292      	uxth	r2, r2
 8006634:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	1c9a      	adds	r2, r3, #2
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800664e:	2301      	movs	r3, #1
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006652:	f7fe fac3 	bl	8004bdc <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800665e:	429a      	cmp	r2, r3
 8006660:	d807      	bhi.n	8006672 <HAL_SPI_TransmitReceive+0x1d8>
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006668:	d003      	beq.n	8006672 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006670:	e0a7      	b.n	80067c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1a6      	bne.n	80065ca <HAL_SPI_TransmitReceive+0x130>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1a1      	bne.n	80065ca <HAL_SPI_TransmitReceive+0x130>
 8006686:	e07c      	b.n	8006782 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_SPI_TransmitReceive+0x1fc>
 8006690:	8b7b      	ldrh	r3, [r7, #26]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d16b      	bne.n	800676e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	7812      	ldrb	r2, [r2, #0]
 80066a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066bc:	e057      	b.n	800676e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d11c      	bne.n	8006706 <HAL_SPI_TransmitReceive+0x26c>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d017      	beq.n	8006706 <HAL_SPI_TransmitReceive+0x26c>
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d114      	bne.n	8006706 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	7812      	ldrb	r2, [r2, #0]
 80066e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b01      	cmp	r3, #1
 8006712:	d119      	bne.n	8006748 <HAL_SPI_TransmitReceive+0x2ae>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d014      	beq.n	8006748 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006744:	2301      	movs	r3, #1
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006748:	f7fe fa48 	bl	8004bdc <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006754:	429a      	cmp	r2, r3
 8006756:	d803      	bhi.n	8006760 <HAL_SPI_TransmitReceive+0x2c6>
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800675e:	d102      	bne.n	8006766 <HAL_SPI_TransmitReceive+0x2cc>
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800676c:	e029      	b.n	80067c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1a2      	bne.n	80066be <HAL_SPI_TransmitReceive+0x224>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d19d      	bne.n	80066be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006784:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 f8f8 	bl	800697c <SPI_EndRxTxTransaction>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d006      	beq.n	80067a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800679e:	e010      	b.n	80067c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10b      	bne.n	80067c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067a8:	2300      	movs	r3, #0
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	e000      	b.n	80067c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80067c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3730      	adds	r7, #48	; 0x30
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	603b      	str	r3, [r7, #0]
 80067ea:	4613      	mov	r3, r2
 80067ec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ee:	e04c      	b.n	800688a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f6:	d048      	beq.n	800688a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80067f8:	f7fe f9f0 	bl	8004bdc <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d902      	bls.n	800680e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d13d      	bne.n	800688a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800681c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006826:	d111      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006830:	d004      	beq.n	800683c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683a:	d107      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006854:	d10f      	bne.n	8006876 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006874:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e00f      	b.n	80068aa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4013      	ands	r3, r2
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	bf0c      	ite	eq
 800689a:	2301      	moveq	r3, #1
 800689c:	2300      	movne	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d1a3      	bne.n	80067f0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af02      	add	r7, sp, #8
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c6:	d111      	bne.n	80068ec <SPI_EndRxTransaction+0x3a>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d0:	d004      	beq.n	80068dc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068da:	d107      	bne.n	80068ec <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ea:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f4:	d12a      	bne.n	800694c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fe:	d012      	beq.n	8006926 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2200      	movs	r2, #0
 8006908:	2180      	movs	r1, #128	; 0x80
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7ff ff67 	bl	80067de <SPI_WaitFlagStateUntilTimeout>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d02d      	beq.n	8006972 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691a:	f043 0220 	orr.w	r2, r3, #32
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e026      	b.n	8006974 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	2101      	movs	r1, #1
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff ff54 	bl	80067de <SPI_WaitFlagStateUntilTimeout>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01a      	beq.n	8006972 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006940:	f043 0220 	orr.w	r2, r3, #32
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e013      	b.n	8006974 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2200      	movs	r2, #0
 8006954:	2101      	movs	r1, #1
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff ff41 	bl	80067de <SPI_WaitFlagStateUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006966:	f043 0220 	orr.w	r2, r3, #32
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e000      	b.n	8006974 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006988:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <SPI_EndRxTxTransaction+0x7c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1b      	ldr	r2, [pc, #108]	; (80069fc <SPI_EndRxTxTransaction+0x80>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	0d5b      	lsrs	r3, r3, #21
 8006994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006998:	fb02 f303 	mul.w	r3, r2, r3
 800699c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069a6:	d112      	bne.n	80069ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2200      	movs	r2, #0
 80069b0:	2180      	movs	r1, #128	; 0x80
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7ff ff13 	bl	80067de <SPI_WaitFlagStateUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d016      	beq.n	80069ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c2:	f043 0220 	orr.w	r2, r3, #32
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e00f      	b.n	80069ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d0f2      	beq.n	80069ce <SPI_EndRxTxTransaction+0x52>
 80069e8:	e000      	b.n	80069ec <SPI_EndRxTxTransaction+0x70>
        break;
 80069ea:	bf00      	nop
  }

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000000 	.word	0x20000000
 80069fc:	165e9f81 	.word	0x165e9f81

08006a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e01d      	b.n	8006a4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d106      	bne.n	8006a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fd ff50 	bl	80048cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4610      	mov	r0, r2
 8006a40:	f000 fa40 	bl	8006ec4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0201 	orr.w	r2, r2, #1
 8006a6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b06      	cmp	r3, #6
 8006a7e:	d007      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10f      	bne.n	8006ae6 <HAL_TIM_Base_Stop_IT+0x48>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6a1a      	ldr	r2, [r3, #32]
 8006acc:	f240 4344 	movw	r3, #1092	; 0x444
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d107      	bne.n	8006ae6 <HAL_TIM_Base_Stop_IT+0x48>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0201 	bic.w	r2, r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d122      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d11b      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0202 	mvn.w	r2, #2
 8006b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f9a5 	bl	8006e86 <HAL_TIM_IC_CaptureCallback>
 8006b3c:	e005      	b.n	8006b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f997 	bl	8006e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f9a8 	bl	8006e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d122      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d11b      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0204 	mvn.w	r2, #4
 8006b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f97b 	bl	8006e86 <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f96d 	bl	8006e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f97e 	bl	8006e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d122      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0308 	and.w	r3, r3, #8
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d11b      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0208 	mvn.w	r2, #8
 8006bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2204      	movs	r2, #4
 8006bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f951 	bl	8006e86 <HAL_TIM_IC_CaptureCallback>
 8006be4:	e005      	b.n	8006bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f943 	bl	8006e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f954 	bl	8006e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	2b10      	cmp	r3, #16
 8006c04:	d122      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d11b      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0210 	mvn.w	r2, #16
 8006c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2208      	movs	r2, #8
 8006c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f927 	bl	8006e86 <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f919 	bl	8006e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f92a 	bl	8006e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d10e      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d107      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0201 	mvn.w	r2, #1
 8006c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fd f934 	bl	8003ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c82:	2b80      	cmp	r3, #128	; 0x80
 8006c84:	d10e      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c90:	2b80      	cmp	r3, #128	; 0x80
 8006c92:	d107      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fad0 	bl	8007244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b40      	cmp	r3, #64	; 0x40
 8006cb0:	d10e      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	d107      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f8ef 	bl	8006eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d10e      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d107      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0220 	mvn.w	r2, #32
 8006cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa9a 	bl	8007230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_TIM_ConfigClockSource+0x18>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e0a6      	b.n	8006e6a <HAL_TIM_ConfigClockSource+0x166>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d067      	beq.n	8006e24 <HAL_TIM_ConfigClockSource+0x120>
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d80b      	bhi.n	8006d70 <HAL_TIM_ConfigClockSource+0x6c>
 8006d58:	2b10      	cmp	r3, #16
 8006d5a:	d073      	beq.n	8006e44 <HAL_TIM_ConfigClockSource+0x140>
 8006d5c:	2b10      	cmp	r3, #16
 8006d5e:	d802      	bhi.n	8006d66 <HAL_TIM_ConfigClockSource+0x62>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d06f      	beq.n	8006e44 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d64:	e078      	b.n	8006e58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d06c      	beq.n	8006e44 <HAL_TIM_ConfigClockSource+0x140>
 8006d6a:	2b30      	cmp	r3, #48	; 0x30
 8006d6c:	d06a      	beq.n	8006e44 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006d6e:	e073      	b.n	8006e58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d70:	2b70      	cmp	r3, #112	; 0x70
 8006d72:	d00d      	beq.n	8006d90 <HAL_TIM_ConfigClockSource+0x8c>
 8006d74:	2b70      	cmp	r3, #112	; 0x70
 8006d76:	d804      	bhi.n	8006d82 <HAL_TIM_ConfigClockSource+0x7e>
 8006d78:	2b50      	cmp	r3, #80	; 0x50
 8006d7a:	d033      	beq.n	8006de4 <HAL_TIM_ConfigClockSource+0xe0>
 8006d7c:	2b60      	cmp	r3, #96	; 0x60
 8006d7e:	d041      	beq.n	8006e04 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d80:	e06a      	b.n	8006e58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d86:	d066      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x152>
 8006d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8c:	d017      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d8e:	e063      	b.n	8006e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	6899      	ldr	r1, [r3, #8]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f000 f9aa 	bl	80070f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006db2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	609a      	str	r2, [r3, #8]
      break;
 8006dbc:	e04c      	b.n	8006e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	6899      	ldr	r1, [r3, #8]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f000 f993 	bl	80070f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006de0:	609a      	str	r2, [r3, #8]
      break;
 8006de2:	e039      	b.n	8006e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	6859      	ldr	r1, [r3, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	461a      	mov	r2, r3
 8006df2:	f000 f907 	bl	8007004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2150      	movs	r1, #80	; 0x50
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 f960 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006e02:	e029      	b.n	8006e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6859      	ldr	r1, [r3, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	461a      	mov	r2, r3
 8006e12:	f000 f926 	bl	8007062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2160      	movs	r1, #96	; 0x60
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 f950 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006e22:	e019      	b.n	8006e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6859      	ldr	r1, [r3, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	461a      	mov	r2, r3
 8006e32:	f000 f8e7 	bl	8007004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2140      	movs	r1, #64	; 0x40
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 f940 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006e42:	e009      	b.n	8006e58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	f000 f937 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006e54:	e000      	b.n	8006e58 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ea2:	bf00      	nop
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a40      	ldr	r2, [pc, #256]	; (8006fd8 <TIM_Base_SetConfig+0x114>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d013      	beq.n	8006f04 <TIM_Base_SetConfig+0x40>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee2:	d00f      	beq.n	8006f04 <TIM_Base_SetConfig+0x40>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a3d      	ldr	r2, [pc, #244]	; (8006fdc <TIM_Base_SetConfig+0x118>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00b      	beq.n	8006f04 <TIM_Base_SetConfig+0x40>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a3c      	ldr	r2, [pc, #240]	; (8006fe0 <TIM_Base_SetConfig+0x11c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d007      	beq.n	8006f04 <TIM_Base_SetConfig+0x40>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a3b      	ldr	r2, [pc, #236]	; (8006fe4 <TIM_Base_SetConfig+0x120>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d003      	beq.n	8006f04 <TIM_Base_SetConfig+0x40>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a3a      	ldr	r2, [pc, #232]	; (8006fe8 <TIM_Base_SetConfig+0x124>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d108      	bne.n	8006f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a2f      	ldr	r2, [pc, #188]	; (8006fd8 <TIM_Base_SetConfig+0x114>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d02b      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f24:	d027      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a2c      	ldr	r2, [pc, #176]	; (8006fdc <TIM_Base_SetConfig+0x118>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d023      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a2b      	ldr	r2, [pc, #172]	; (8006fe0 <TIM_Base_SetConfig+0x11c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01f      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a2a      	ldr	r2, [pc, #168]	; (8006fe4 <TIM_Base_SetConfig+0x120>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d01b      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a29      	ldr	r2, [pc, #164]	; (8006fe8 <TIM_Base_SetConfig+0x124>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d017      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a28      	ldr	r2, [pc, #160]	; (8006fec <TIM_Base_SetConfig+0x128>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d013      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a27      	ldr	r2, [pc, #156]	; (8006ff0 <TIM_Base_SetConfig+0x12c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00f      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a26      	ldr	r2, [pc, #152]	; (8006ff4 <TIM_Base_SetConfig+0x130>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00b      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a25      	ldr	r2, [pc, #148]	; (8006ff8 <TIM_Base_SetConfig+0x134>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d007      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a24      	ldr	r2, [pc, #144]	; (8006ffc <TIM_Base_SetConfig+0x138>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_Base_SetConfig+0xb2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a23      	ldr	r2, [pc, #140]	; (8007000 <TIM_Base_SetConfig+0x13c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d108      	bne.n	8006f88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a0a      	ldr	r2, [pc, #40]	; (8006fd8 <TIM_Base_SetConfig+0x114>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_Base_SetConfig+0xf8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a0c      	ldr	r2, [pc, #48]	; (8006fe8 <TIM_Base_SetConfig+0x124>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d103      	bne.n	8006fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	615a      	str	r2, [r3, #20]
}
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40010000 	.word	0x40010000
 8006fdc:	40000400 	.word	0x40000400
 8006fe0:	40000800 	.word	0x40000800
 8006fe4:	40000c00 	.word	0x40000c00
 8006fe8:	40010400 	.word	0x40010400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800
 8006ff8:	40001800 	.word	0x40001800
 8006ffc:	40001c00 	.word	0x40001c00
 8007000:	40002000 	.word	0x40002000

08007004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f023 0201 	bic.w	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800702e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f023 030a 	bic.w	r3, r3, #10
 8007040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007062:	b480      	push	{r7}
 8007064:	b087      	sub	sp, #28
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f023 0210 	bic.w	r2, r3, #16
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800708c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	031b      	lsls	r3, r3, #12
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800709e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	f043 0307 	orr.w	r3, r3, #7
 80070e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	609a      	str	r2, [r3, #8]
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	021a      	lsls	r2, r3, #8
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	431a      	orrs	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4313      	orrs	r3, r2
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	609a      	str	r2, [r3, #8]
}
 800712c:	bf00      	nop
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800714c:	2302      	movs	r3, #2
 800714e:	e05a      	b.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a21      	ldr	r2, [pc, #132]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d022      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719c:	d01d      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1d      	ldr	r2, [pc, #116]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d018      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1b      	ldr	r2, [pc, #108]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d013      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1a      	ldr	r2, [pc, #104]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00e      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a18      	ldr	r2, [pc, #96]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d009      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a17      	ldr	r2, [pc, #92]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a15      	ldr	r2, [pc, #84]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d10c      	bne.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40010000 	.word	0x40010000
 8007218:	40000400 	.word	0x40000400
 800721c:	40000800 	.word	0x40000800
 8007220:	40000c00 	.word	0x40000c00
 8007224:	40010400 	.word	0x40010400
 8007228:	40014000 	.word	0x40014000
 800722c:	40001800 	.word	0x40001800

08007230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <_ZdlPvj>:
 8007258:	f000 b800 	b.w	800725c <_ZdlPv>

0800725c <_ZdlPv>:
 800725c:	f000 b832 	b.w	80072c4 <free>

08007260 <__errno>:
 8007260:	4b01      	ldr	r3, [pc, #4]	; (8007268 <__errno+0x8>)
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	2000000c 	.word	0x2000000c

0800726c <__libc_init_array>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4e0d      	ldr	r6, [pc, #52]	; (80072a4 <__libc_init_array+0x38>)
 8007270:	4c0d      	ldr	r4, [pc, #52]	; (80072a8 <__libc_init_array+0x3c>)
 8007272:	1ba4      	subs	r4, r4, r6
 8007274:	10a4      	asrs	r4, r4, #2
 8007276:	2500      	movs	r5, #0
 8007278:	42a5      	cmp	r5, r4
 800727a:	d109      	bne.n	8007290 <__libc_init_array+0x24>
 800727c:	4e0b      	ldr	r6, [pc, #44]	; (80072ac <__libc_init_array+0x40>)
 800727e:	4c0c      	ldr	r4, [pc, #48]	; (80072b0 <__libc_init_array+0x44>)
 8007280:	f002 f86e 	bl	8009360 <_init>
 8007284:	1ba4      	subs	r4, r4, r6
 8007286:	10a4      	asrs	r4, r4, #2
 8007288:	2500      	movs	r5, #0
 800728a:	42a5      	cmp	r5, r4
 800728c:	d105      	bne.n	800729a <__libc_init_array+0x2e>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007294:	4798      	blx	r3
 8007296:	3501      	adds	r5, #1
 8007298:	e7ee      	b.n	8007278 <__libc_init_array+0xc>
 800729a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800729e:	4798      	blx	r3
 80072a0:	3501      	adds	r5, #1
 80072a2:	e7f2      	b.n	800728a <__libc_init_array+0x1e>
 80072a4:	0807ab80 	.word	0x0807ab80
 80072a8:	0807ab80 	.word	0x0807ab80
 80072ac:	0807ab80 	.word	0x0807ab80
 80072b0:	0807ab94 	.word	0x0807ab94

080072b4 <malloc>:
 80072b4:	4b02      	ldr	r3, [pc, #8]	; (80072c0 <malloc+0xc>)
 80072b6:	4601      	mov	r1, r0
 80072b8:	6818      	ldr	r0, [r3, #0]
 80072ba:	f000 b861 	b.w	8007380 <_malloc_r>
 80072be:	bf00      	nop
 80072c0:	2000000c 	.word	0x2000000c

080072c4 <free>:
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <free+0xc>)
 80072c6:	4601      	mov	r1, r0
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	f000 b80b 	b.w	80072e4 <_free_r>
 80072ce:	bf00      	nop
 80072d0:	2000000c 	.word	0x2000000c

080072d4 <memset>:
 80072d4:	4402      	add	r2, r0
 80072d6:	4603      	mov	r3, r0
 80072d8:	4293      	cmp	r3, r2
 80072da:	d100      	bne.n	80072de <memset+0xa>
 80072dc:	4770      	bx	lr
 80072de:	f803 1b01 	strb.w	r1, [r3], #1
 80072e2:	e7f9      	b.n	80072d8 <memset+0x4>

080072e4 <_free_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	4605      	mov	r5, r0
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d045      	beq.n	8007378 <_free_r+0x94>
 80072ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072f0:	1f0c      	subs	r4, r1, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfb8      	it	lt
 80072f6:	18e4      	addlt	r4, r4, r3
 80072f8:	f001 fb8f 	bl	8008a1a <__malloc_lock>
 80072fc:	4a1f      	ldr	r2, [pc, #124]	; (800737c <_free_r+0x98>)
 80072fe:	6813      	ldr	r3, [r2, #0]
 8007300:	4610      	mov	r0, r2
 8007302:	b933      	cbnz	r3, 8007312 <_free_r+0x2e>
 8007304:	6063      	str	r3, [r4, #4]
 8007306:	6014      	str	r4, [r2, #0]
 8007308:	4628      	mov	r0, r5
 800730a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800730e:	f001 bb85 	b.w	8008a1c <__malloc_unlock>
 8007312:	42a3      	cmp	r3, r4
 8007314:	d90c      	bls.n	8007330 <_free_r+0x4c>
 8007316:	6821      	ldr	r1, [r4, #0]
 8007318:	1862      	adds	r2, r4, r1
 800731a:	4293      	cmp	r3, r2
 800731c:	bf04      	itt	eq
 800731e:	681a      	ldreq	r2, [r3, #0]
 8007320:	685b      	ldreq	r3, [r3, #4]
 8007322:	6063      	str	r3, [r4, #4]
 8007324:	bf04      	itt	eq
 8007326:	1852      	addeq	r2, r2, r1
 8007328:	6022      	streq	r2, [r4, #0]
 800732a:	6004      	str	r4, [r0, #0]
 800732c:	e7ec      	b.n	8007308 <_free_r+0x24>
 800732e:	4613      	mov	r3, r2
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	b10a      	cbz	r2, 8007338 <_free_r+0x54>
 8007334:	42a2      	cmp	r2, r4
 8007336:	d9fa      	bls.n	800732e <_free_r+0x4a>
 8007338:	6819      	ldr	r1, [r3, #0]
 800733a:	1858      	adds	r0, r3, r1
 800733c:	42a0      	cmp	r0, r4
 800733e:	d10b      	bne.n	8007358 <_free_r+0x74>
 8007340:	6820      	ldr	r0, [r4, #0]
 8007342:	4401      	add	r1, r0
 8007344:	1858      	adds	r0, r3, r1
 8007346:	4282      	cmp	r2, r0
 8007348:	6019      	str	r1, [r3, #0]
 800734a:	d1dd      	bne.n	8007308 <_free_r+0x24>
 800734c:	6810      	ldr	r0, [r2, #0]
 800734e:	6852      	ldr	r2, [r2, #4]
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	4401      	add	r1, r0
 8007354:	6019      	str	r1, [r3, #0]
 8007356:	e7d7      	b.n	8007308 <_free_r+0x24>
 8007358:	d902      	bls.n	8007360 <_free_r+0x7c>
 800735a:	230c      	movs	r3, #12
 800735c:	602b      	str	r3, [r5, #0]
 800735e:	e7d3      	b.n	8007308 <_free_r+0x24>
 8007360:	6820      	ldr	r0, [r4, #0]
 8007362:	1821      	adds	r1, r4, r0
 8007364:	428a      	cmp	r2, r1
 8007366:	bf04      	itt	eq
 8007368:	6811      	ldreq	r1, [r2, #0]
 800736a:	6852      	ldreq	r2, [r2, #4]
 800736c:	6062      	str	r2, [r4, #4]
 800736e:	bf04      	itt	eq
 8007370:	1809      	addeq	r1, r1, r0
 8007372:	6021      	streq	r1, [r4, #0]
 8007374:	605c      	str	r4, [r3, #4]
 8007376:	e7c7      	b.n	8007308 <_free_r+0x24>
 8007378:	bd38      	pop	{r3, r4, r5, pc}
 800737a:	bf00      	nop
 800737c:	2000052c 	.word	0x2000052c

08007380 <_malloc_r>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	1ccd      	adds	r5, r1, #3
 8007384:	f025 0503 	bic.w	r5, r5, #3
 8007388:	3508      	adds	r5, #8
 800738a:	2d0c      	cmp	r5, #12
 800738c:	bf38      	it	cc
 800738e:	250c      	movcc	r5, #12
 8007390:	2d00      	cmp	r5, #0
 8007392:	4606      	mov	r6, r0
 8007394:	db01      	blt.n	800739a <_malloc_r+0x1a>
 8007396:	42a9      	cmp	r1, r5
 8007398:	d903      	bls.n	80073a2 <_malloc_r+0x22>
 800739a:	230c      	movs	r3, #12
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	2000      	movs	r0, #0
 80073a0:	bd70      	pop	{r4, r5, r6, pc}
 80073a2:	f001 fb3a 	bl	8008a1a <__malloc_lock>
 80073a6:	4a21      	ldr	r2, [pc, #132]	; (800742c <_malloc_r+0xac>)
 80073a8:	6814      	ldr	r4, [r2, #0]
 80073aa:	4621      	mov	r1, r4
 80073ac:	b991      	cbnz	r1, 80073d4 <_malloc_r+0x54>
 80073ae:	4c20      	ldr	r4, [pc, #128]	; (8007430 <_malloc_r+0xb0>)
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	b91b      	cbnz	r3, 80073bc <_malloc_r+0x3c>
 80073b4:	4630      	mov	r0, r6
 80073b6:	f000 fc99 	bl	8007cec <_sbrk_r>
 80073ba:	6020      	str	r0, [r4, #0]
 80073bc:	4629      	mov	r1, r5
 80073be:	4630      	mov	r0, r6
 80073c0:	f000 fc94 	bl	8007cec <_sbrk_r>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d124      	bne.n	8007412 <_malloc_r+0x92>
 80073c8:	230c      	movs	r3, #12
 80073ca:	6033      	str	r3, [r6, #0]
 80073cc:	4630      	mov	r0, r6
 80073ce:	f001 fb25 	bl	8008a1c <__malloc_unlock>
 80073d2:	e7e4      	b.n	800739e <_malloc_r+0x1e>
 80073d4:	680b      	ldr	r3, [r1, #0]
 80073d6:	1b5b      	subs	r3, r3, r5
 80073d8:	d418      	bmi.n	800740c <_malloc_r+0x8c>
 80073da:	2b0b      	cmp	r3, #11
 80073dc:	d90f      	bls.n	80073fe <_malloc_r+0x7e>
 80073de:	600b      	str	r3, [r1, #0]
 80073e0:	50cd      	str	r5, [r1, r3]
 80073e2:	18cc      	adds	r4, r1, r3
 80073e4:	4630      	mov	r0, r6
 80073e6:	f001 fb19 	bl	8008a1c <__malloc_unlock>
 80073ea:	f104 000b 	add.w	r0, r4, #11
 80073ee:	1d23      	adds	r3, r4, #4
 80073f0:	f020 0007 	bic.w	r0, r0, #7
 80073f4:	1ac3      	subs	r3, r0, r3
 80073f6:	d0d3      	beq.n	80073a0 <_malloc_r+0x20>
 80073f8:	425a      	negs	r2, r3
 80073fa:	50e2      	str	r2, [r4, r3]
 80073fc:	e7d0      	b.n	80073a0 <_malloc_r+0x20>
 80073fe:	428c      	cmp	r4, r1
 8007400:	684b      	ldr	r3, [r1, #4]
 8007402:	bf16      	itet	ne
 8007404:	6063      	strne	r3, [r4, #4]
 8007406:	6013      	streq	r3, [r2, #0]
 8007408:	460c      	movne	r4, r1
 800740a:	e7eb      	b.n	80073e4 <_malloc_r+0x64>
 800740c:	460c      	mov	r4, r1
 800740e:	6849      	ldr	r1, [r1, #4]
 8007410:	e7cc      	b.n	80073ac <_malloc_r+0x2c>
 8007412:	1cc4      	adds	r4, r0, #3
 8007414:	f024 0403 	bic.w	r4, r4, #3
 8007418:	42a0      	cmp	r0, r4
 800741a:	d005      	beq.n	8007428 <_malloc_r+0xa8>
 800741c:	1a21      	subs	r1, r4, r0
 800741e:	4630      	mov	r0, r6
 8007420:	f000 fc64 	bl	8007cec <_sbrk_r>
 8007424:	3001      	adds	r0, #1
 8007426:	d0cf      	beq.n	80073c8 <_malloc_r+0x48>
 8007428:	6025      	str	r5, [r4, #0]
 800742a:	e7db      	b.n	80073e4 <_malloc_r+0x64>
 800742c:	2000052c 	.word	0x2000052c
 8007430:	20000530 	.word	0x20000530

08007434 <__cvt>:
 8007434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007438:	ec55 4b10 	vmov	r4, r5, d0
 800743c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800743e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007442:	2d00      	cmp	r5, #0
 8007444:	460e      	mov	r6, r1
 8007446:	4691      	mov	r9, r2
 8007448:	4619      	mov	r1, r3
 800744a:	bfb8      	it	lt
 800744c:	4622      	movlt	r2, r4
 800744e:	462b      	mov	r3, r5
 8007450:	f027 0720 	bic.w	r7, r7, #32
 8007454:	bfbb      	ittet	lt
 8007456:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800745a:	461d      	movlt	r5, r3
 800745c:	2300      	movge	r3, #0
 800745e:	232d      	movlt	r3, #45	; 0x2d
 8007460:	bfb8      	it	lt
 8007462:	4614      	movlt	r4, r2
 8007464:	2f46      	cmp	r7, #70	; 0x46
 8007466:	700b      	strb	r3, [r1, #0]
 8007468:	d004      	beq.n	8007474 <__cvt+0x40>
 800746a:	2f45      	cmp	r7, #69	; 0x45
 800746c:	d100      	bne.n	8007470 <__cvt+0x3c>
 800746e:	3601      	adds	r6, #1
 8007470:	2102      	movs	r1, #2
 8007472:	e000      	b.n	8007476 <__cvt+0x42>
 8007474:	2103      	movs	r1, #3
 8007476:	ab03      	add	r3, sp, #12
 8007478:	9301      	str	r3, [sp, #4]
 800747a:	ab02      	add	r3, sp, #8
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	4632      	mov	r2, r6
 8007480:	4653      	mov	r3, sl
 8007482:	ec45 4b10 	vmov	d0, r4, r5
 8007486:	f000 fcf7 	bl	8007e78 <_dtoa_r>
 800748a:	2f47      	cmp	r7, #71	; 0x47
 800748c:	4680      	mov	r8, r0
 800748e:	d102      	bne.n	8007496 <__cvt+0x62>
 8007490:	f019 0f01 	tst.w	r9, #1
 8007494:	d026      	beq.n	80074e4 <__cvt+0xb0>
 8007496:	2f46      	cmp	r7, #70	; 0x46
 8007498:	eb08 0906 	add.w	r9, r8, r6
 800749c:	d111      	bne.n	80074c2 <__cvt+0x8e>
 800749e:	f898 3000 	ldrb.w	r3, [r8]
 80074a2:	2b30      	cmp	r3, #48	; 0x30
 80074a4:	d10a      	bne.n	80074bc <__cvt+0x88>
 80074a6:	2200      	movs	r2, #0
 80074a8:	2300      	movs	r3, #0
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	f7f9 fb0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80074b2:	b918      	cbnz	r0, 80074bc <__cvt+0x88>
 80074b4:	f1c6 0601 	rsb	r6, r6, #1
 80074b8:	f8ca 6000 	str.w	r6, [sl]
 80074bc:	f8da 3000 	ldr.w	r3, [sl]
 80074c0:	4499      	add	r9, r3
 80074c2:	2200      	movs	r2, #0
 80074c4:	2300      	movs	r3, #0
 80074c6:	4620      	mov	r0, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7f9 fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ce:	b938      	cbnz	r0, 80074e0 <__cvt+0xac>
 80074d0:	2230      	movs	r2, #48	; 0x30
 80074d2:	9b03      	ldr	r3, [sp, #12]
 80074d4:	454b      	cmp	r3, r9
 80074d6:	d205      	bcs.n	80074e4 <__cvt+0xb0>
 80074d8:	1c59      	adds	r1, r3, #1
 80074da:	9103      	str	r1, [sp, #12]
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	e7f8      	b.n	80074d2 <__cvt+0x9e>
 80074e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074e8:	eba3 0308 	sub.w	r3, r3, r8
 80074ec:	4640      	mov	r0, r8
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	b004      	add	sp, #16
 80074f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080074f6 <__exponent>:
 80074f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074f8:	2900      	cmp	r1, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	bfba      	itte	lt
 80074fe:	4249      	neglt	r1, r1
 8007500:	232d      	movlt	r3, #45	; 0x2d
 8007502:	232b      	movge	r3, #43	; 0x2b
 8007504:	2909      	cmp	r1, #9
 8007506:	f804 2b02 	strb.w	r2, [r4], #2
 800750a:	7043      	strb	r3, [r0, #1]
 800750c:	dd20      	ble.n	8007550 <__exponent+0x5a>
 800750e:	f10d 0307 	add.w	r3, sp, #7
 8007512:	461f      	mov	r7, r3
 8007514:	260a      	movs	r6, #10
 8007516:	fb91 f5f6 	sdiv	r5, r1, r6
 800751a:	fb06 1115 	mls	r1, r6, r5, r1
 800751e:	3130      	adds	r1, #48	; 0x30
 8007520:	2d09      	cmp	r5, #9
 8007522:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007526:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800752a:	4629      	mov	r1, r5
 800752c:	dc09      	bgt.n	8007542 <__exponent+0x4c>
 800752e:	3130      	adds	r1, #48	; 0x30
 8007530:	3b02      	subs	r3, #2
 8007532:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007536:	42bb      	cmp	r3, r7
 8007538:	4622      	mov	r2, r4
 800753a:	d304      	bcc.n	8007546 <__exponent+0x50>
 800753c:	1a10      	subs	r0, r2, r0
 800753e:	b003      	add	sp, #12
 8007540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007542:	4613      	mov	r3, r2
 8007544:	e7e7      	b.n	8007516 <__exponent+0x20>
 8007546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800754a:	f804 2b01 	strb.w	r2, [r4], #1
 800754e:	e7f2      	b.n	8007536 <__exponent+0x40>
 8007550:	2330      	movs	r3, #48	; 0x30
 8007552:	4419      	add	r1, r3
 8007554:	7083      	strb	r3, [r0, #2]
 8007556:	1d02      	adds	r2, r0, #4
 8007558:	70c1      	strb	r1, [r0, #3]
 800755a:	e7ef      	b.n	800753c <__exponent+0x46>

0800755c <_printf_float>:
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	b08d      	sub	sp, #52	; 0x34
 8007562:	460c      	mov	r4, r1
 8007564:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007568:	4616      	mov	r6, r2
 800756a:	461f      	mov	r7, r3
 800756c:	4605      	mov	r5, r0
 800756e:	f001 fa3b 	bl	80089e8 <_localeconv_r>
 8007572:	6803      	ldr	r3, [r0, #0]
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	4618      	mov	r0, r3
 8007578:	f7f8 fe2a 	bl	80001d0 <strlen>
 800757c:	2300      	movs	r3, #0
 800757e:	930a      	str	r3, [sp, #40]	; 0x28
 8007580:	f8d8 3000 	ldr.w	r3, [r8]
 8007584:	9005      	str	r0, [sp, #20]
 8007586:	3307      	adds	r3, #7
 8007588:	f023 0307 	bic.w	r3, r3, #7
 800758c:	f103 0208 	add.w	r2, r3, #8
 8007590:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007594:	f8d4 b000 	ldr.w	fp, [r4]
 8007598:	f8c8 2000 	str.w	r2, [r8]
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075a4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80075a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075ac:	9307      	str	r3, [sp, #28]
 80075ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075b6:	4ba7      	ldr	r3, [pc, #668]	; (8007854 <_printf_float+0x2f8>)
 80075b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075bc:	f7f9 fab6 	bl	8000b2c <__aeabi_dcmpun>
 80075c0:	bb70      	cbnz	r0, 8007620 <_printf_float+0xc4>
 80075c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075c6:	4ba3      	ldr	r3, [pc, #652]	; (8007854 <_printf_float+0x2f8>)
 80075c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075cc:	f7f9 fa90 	bl	8000af0 <__aeabi_dcmple>
 80075d0:	bb30      	cbnz	r0, 8007620 <_printf_float+0xc4>
 80075d2:	2200      	movs	r2, #0
 80075d4:	2300      	movs	r3, #0
 80075d6:	4640      	mov	r0, r8
 80075d8:	4649      	mov	r1, r9
 80075da:	f7f9 fa7f 	bl	8000adc <__aeabi_dcmplt>
 80075de:	b110      	cbz	r0, 80075e6 <_printf_float+0x8a>
 80075e0:	232d      	movs	r3, #45	; 0x2d
 80075e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e6:	4a9c      	ldr	r2, [pc, #624]	; (8007858 <_printf_float+0x2fc>)
 80075e8:	4b9c      	ldr	r3, [pc, #624]	; (800785c <_printf_float+0x300>)
 80075ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80075ee:	bf8c      	ite	hi
 80075f0:	4690      	movhi	r8, r2
 80075f2:	4698      	movls	r8, r3
 80075f4:	2303      	movs	r3, #3
 80075f6:	f02b 0204 	bic.w	r2, fp, #4
 80075fa:	6123      	str	r3, [r4, #16]
 80075fc:	6022      	str	r2, [r4, #0]
 80075fe:	f04f 0900 	mov.w	r9, #0
 8007602:	9700      	str	r7, [sp, #0]
 8007604:	4633      	mov	r3, r6
 8007606:	aa0b      	add	r2, sp, #44	; 0x2c
 8007608:	4621      	mov	r1, r4
 800760a:	4628      	mov	r0, r5
 800760c:	f000 f9e6 	bl	80079dc <_printf_common>
 8007610:	3001      	adds	r0, #1
 8007612:	f040 808d 	bne.w	8007730 <_printf_float+0x1d4>
 8007616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800761a:	b00d      	add	sp, #52	; 0x34
 800761c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007620:	4642      	mov	r2, r8
 8007622:	464b      	mov	r3, r9
 8007624:	4640      	mov	r0, r8
 8007626:	4649      	mov	r1, r9
 8007628:	f7f9 fa80 	bl	8000b2c <__aeabi_dcmpun>
 800762c:	b110      	cbz	r0, 8007634 <_printf_float+0xd8>
 800762e:	4a8c      	ldr	r2, [pc, #560]	; (8007860 <_printf_float+0x304>)
 8007630:	4b8c      	ldr	r3, [pc, #560]	; (8007864 <_printf_float+0x308>)
 8007632:	e7da      	b.n	80075ea <_printf_float+0x8e>
 8007634:	6861      	ldr	r1, [r4, #4]
 8007636:	1c4b      	adds	r3, r1, #1
 8007638:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800763c:	a80a      	add	r0, sp, #40	; 0x28
 800763e:	d13e      	bne.n	80076be <_printf_float+0x162>
 8007640:	2306      	movs	r3, #6
 8007642:	6063      	str	r3, [r4, #4]
 8007644:	2300      	movs	r3, #0
 8007646:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800764a:	ab09      	add	r3, sp, #36	; 0x24
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	ec49 8b10 	vmov	d0, r8, r9
 8007652:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007656:	6022      	str	r2, [r4, #0]
 8007658:	f8cd a004 	str.w	sl, [sp, #4]
 800765c:	6861      	ldr	r1, [r4, #4]
 800765e:	4628      	mov	r0, r5
 8007660:	f7ff fee8 	bl	8007434 <__cvt>
 8007664:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007668:	2b47      	cmp	r3, #71	; 0x47
 800766a:	4680      	mov	r8, r0
 800766c:	d109      	bne.n	8007682 <_printf_float+0x126>
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	1cd8      	adds	r0, r3, #3
 8007672:	db02      	blt.n	800767a <_printf_float+0x11e>
 8007674:	6862      	ldr	r2, [r4, #4]
 8007676:	4293      	cmp	r3, r2
 8007678:	dd47      	ble.n	800770a <_printf_float+0x1ae>
 800767a:	f1aa 0a02 	sub.w	sl, sl, #2
 800767e:	fa5f fa8a 	uxtb.w	sl, sl
 8007682:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007688:	d824      	bhi.n	80076d4 <_printf_float+0x178>
 800768a:	3901      	subs	r1, #1
 800768c:	4652      	mov	r2, sl
 800768e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007692:	9109      	str	r1, [sp, #36]	; 0x24
 8007694:	f7ff ff2f 	bl	80074f6 <__exponent>
 8007698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800769a:	1813      	adds	r3, r2, r0
 800769c:	2a01      	cmp	r2, #1
 800769e:	4681      	mov	r9, r0
 80076a0:	6123      	str	r3, [r4, #16]
 80076a2:	dc02      	bgt.n	80076aa <_printf_float+0x14e>
 80076a4:	6822      	ldr	r2, [r4, #0]
 80076a6:	07d1      	lsls	r1, r2, #31
 80076a8:	d501      	bpl.n	80076ae <_printf_float+0x152>
 80076aa:	3301      	adds	r3, #1
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0a5      	beq.n	8007602 <_printf_float+0xa6>
 80076b6:	232d      	movs	r3, #45	; 0x2d
 80076b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076bc:	e7a1      	b.n	8007602 <_printf_float+0xa6>
 80076be:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80076c2:	f000 8177 	beq.w	80079b4 <_printf_float+0x458>
 80076c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80076ca:	d1bb      	bne.n	8007644 <_printf_float+0xe8>
 80076cc:	2900      	cmp	r1, #0
 80076ce:	d1b9      	bne.n	8007644 <_printf_float+0xe8>
 80076d0:	2301      	movs	r3, #1
 80076d2:	e7b6      	b.n	8007642 <_printf_float+0xe6>
 80076d4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80076d8:	d119      	bne.n	800770e <_printf_float+0x1b2>
 80076da:	2900      	cmp	r1, #0
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	dd0c      	ble.n	80076fa <_printf_float+0x19e>
 80076e0:	6121      	str	r1, [r4, #16]
 80076e2:	b913      	cbnz	r3, 80076ea <_printf_float+0x18e>
 80076e4:	6822      	ldr	r2, [r4, #0]
 80076e6:	07d2      	lsls	r2, r2, #31
 80076e8:	d502      	bpl.n	80076f0 <_printf_float+0x194>
 80076ea:	3301      	adds	r3, #1
 80076ec:	440b      	add	r3, r1
 80076ee:	6123      	str	r3, [r4, #16]
 80076f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80076f4:	f04f 0900 	mov.w	r9, #0
 80076f8:	e7d9      	b.n	80076ae <_printf_float+0x152>
 80076fa:	b913      	cbnz	r3, 8007702 <_printf_float+0x1a6>
 80076fc:	6822      	ldr	r2, [r4, #0]
 80076fe:	07d0      	lsls	r0, r2, #31
 8007700:	d501      	bpl.n	8007706 <_printf_float+0x1aa>
 8007702:	3302      	adds	r3, #2
 8007704:	e7f3      	b.n	80076ee <_printf_float+0x192>
 8007706:	2301      	movs	r3, #1
 8007708:	e7f1      	b.n	80076ee <_printf_float+0x192>
 800770a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800770e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007712:	4293      	cmp	r3, r2
 8007714:	db05      	blt.n	8007722 <_printf_float+0x1c6>
 8007716:	6822      	ldr	r2, [r4, #0]
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	07d1      	lsls	r1, r2, #31
 800771c:	d5e8      	bpl.n	80076f0 <_printf_float+0x194>
 800771e:	3301      	adds	r3, #1
 8007720:	e7e5      	b.n	80076ee <_printf_float+0x192>
 8007722:	2b00      	cmp	r3, #0
 8007724:	bfd4      	ite	le
 8007726:	f1c3 0302 	rsble	r3, r3, #2
 800772a:	2301      	movgt	r3, #1
 800772c:	4413      	add	r3, r2
 800772e:	e7de      	b.n	80076ee <_printf_float+0x192>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	055a      	lsls	r2, r3, #21
 8007734:	d407      	bmi.n	8007746 <_printf_float+0x1ea>
 8007736:	6923      	ldr	r3, [r4, #16]
 8007738:	4642      	mov	r2, r8
 800773a:	4631      	mov	r1, r6
 800773c:	4628      	mov	r0, r5
 800773e:	47b8      	blx	r7
 8007740:	3001      	adds	r0, #1
 8007742:	d12b      	bne.n	800779c <_printf_float+0x240>
 8007744:	e767      	b.n	8007616 <_printf_float+0xba>
 8007746:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800774a:	f240 80dc 	bls.w	8007906 <_printf_float+0x3aa>
 800774e:	2200      	movs	r2, #0
 8007750:	2300      	movs	r3, #0
 8007752:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007756:	f7f9 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800775a:	2800      	cmp	r0, #0
 800775c:	d033      	beq.n	80077c6 <_printf_float+0x26a>
 800775e:	2301      	movs	r3, #1
 8007760:	4a41      	ldr	r2, [pc, #260]	; (8007868 <_printf_float+0x30c>)
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f af54 	beq.w	8007616 <_printf_float+0xba>
 800776e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007772:	429a      	cmp	r2, r3
 8007774:	db02      	blt.n	800777c <_printf_float+0x220>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	07d8      	lsls	r0, r3, #31
 800777a:	d50f      	bpl.n	800779c <_printf_float+0x240>
 800777c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007780:	4631      	mov	r1, r6
 8007782:	4628      	mov	r0, r5
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	f43f af45 	beq.w	8007616 <_printf_float+0xba>
 800778c:	f04f 0800 	mov.w	r8, #0
 8007790:	f104 091a 	add.w	r9, r4, #26
 8007794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007796:	3b01      	subs	r3, #1
 8007798:	4543      	cmp	r3, r8
 800779a:	dc09      	bgt.n	80077b0 <_printf_float+0x254>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	079b      	lsls	r3, r3, #30
 80077a0:	f100 8103 	bmi.w	80079aa <_printf_float+0x44e>
 80077a4:	68e0      	ldr	r0, [r4, #12]
 80077a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a8:	4298      	cmp	r0, r3
 80077aa:	bfb8      	it	lt
 80077ac:	4618      	movlt	r0, r3
 80077ae:	e734      	b.n	800761a <_printf_float+0xbe>
 80077b0:	2301      	movs	r3, #1
 80077b2:	464a      	mov	r2, r9
 80077b4:	4631      	mov	r1, r6
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b8      	blx	r7
 80077ba:	3001      	adds	r0, #1
 80077bc:	f43f af2b 	beq.w	8007616 <_printf_float+0xba>
 80077c0:	f108 0801 	add.w	r8, r8, #1
 80077c4:	e7e6      	b.n	8007794 <_printf_float+0x238>
 80077c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dc2b      	bgt.n	8007824 <_printf_float+0x2c8>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4a26      	ldr	r2, [pc, #152]	; (8007868 <_printf_float+0x30c>)
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f af1d 	beq.w	8007616 <_printf_float+0xba>
 80077dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077de:	b923      	cbnz	r3, 80077ea <_printf_float+0x28e>
 80077e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e2:	b913      	cbnz	r3, 80077ea <_printf_float+0x28e>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	07d9      	lsls	r1, r3, #31
 80077e8:	d5d8      	bpl.n	800779c <_printf_float+0x240>
 80077ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ee:	4631      	mov	r1, r6
 80077f0:	4628      	mov	r0, r5
 80077f2:	47b8      	blx	r7
 80077f4:	3001      	adds	r0, #1
 80077f6:	f43f af0e 	beq.w	8007616 <_printf_float+0xba>
 80077fa:	f04f 0900 	mov.w	r9, #0
 80077fe:	f104 0a1a 	add.w	sl, r4, #26
 8007802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007804:	425b      	negs	r3, r3
 8007806:	454b      	cmp	r3, r9
 8007808:	dc01      	bgt.n	800780e <_printf_float+0x2b2>
 800780a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800780c:	e794      	b.n	8007738 <_printf_float+0x1dc>
 800780e:	2301      	movs	r3, #1
 8007810:	4652      	mov	r2, sl
 8007812:	4631      	mov	r1, r6
 8007814:	4628      	mov	r0, r5
 8007816:	47b8      	blx	r7
 8007818:	3001      	adds	r0, #1
 800781a:	f43f aefc 	beq.w	8007616 <_printf_float+0xba>
 800781e:	f109 0901 	add.w	r9, r9, #1
 8007822:	e7ee      	b.n	8007802 <_printf_float+0x2a6>
 8007824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007826:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007828:	429a      	cmp	r2, r3
 800782a:	bfa8      	it	ge
 800782c:	461a      	movge	r2, r3
 800782e:	2a00      	cmp	r2, #0
 8007830:	4691      	mov	r9, r2
 8007832:	dd07      	ble.n	8007844 <_printf_float+0x2e8>
 8007834:	4613      	mov	r3, r2
 8007836:	4631      	mov	r1, r6
 8007838:	4642      	mov	r2, r8
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	f43f aee9 	beq.w	8007616 <_printf_float+0xba>
 8007844:	f104 031a 	add.w	r3, r4, #26
 8007848:	f04f 0b00 	mov.w	fp, #0
 800784c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007850:	9306      	str	r3, [sp, #24]
 8007852:	e015      	b.n	8007880 <_printf_float+0x324>
 8007854:	7fefffff 	.word	0x7fefffff
 8007858:	0807a920 	.word	0x0807a920
 800785c:	0807a91c 	.word	0x0807a91c
 8007860:	0807a928 	.word	0x0807a928
 8007864:	0807a924 	.word	0x0807a924
 8007868:	0807a92c 	.word	0x0807a92c
 800786c:	2301      	movs	r3, #1
 800786e:	9a06      	ldr	r2, [sp, #24]
 8007870:	4631      	mov	r1, r6
 8007872:	4628      	mov	r0, r5
 8007874:	47b8      	blx	r7
 8007876:	3001      	adds	r0, #1
 8007878:	f43f aecd 	beq.w	8007616 <_printf_float+0xba>
 800787c:	f10b 0b01 	add.w	fp, fp, #1
 8007880:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007884:	ebaa 0309 	sub.w	r3, sl, r9
 8007888:	455b      	cmp	r3, fp
 800788a:	dcef      	bgt.n	800786c <_printf_float+0x310>
 800788c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007890:	429a      	cmp	r2, r3
 8007892:	44d0      	add	r8, sl
 8007894:	db15      	blt.n	80078c2 <_printf_float+0x366>
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	07da      	lsls	r2, r3, #31
 800789a:	d412      	bmi.n	80078c2 <_printf_float+0x366>
 800789c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078a0:	eba3 020a 	sub.w	r2, r3, sl
 80078a4:	eba3 0a01 	sub.w	sl, r3, r1
 80078a8:	4592      	cmp	sl, r2
 80078aa:	bfa8      	it	ge
 80078ac:	4692      	movge	sl, r2
 80078ae:	f1ba 0f00 	cmp.w	sl, #0
 80078b2:	dc0e      	bgt.n	80078d2 <_printf_float+0x376>
 80078b4:	f04f 0800 	mov.w	r8, #0
 80078b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078bc:	f104 091a 	add.w	r9, r4, #26
 80078c0:	e019      	b.n	80078f6 <_printf_float+0x39a>
 80078c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078c6:	4631      	mov	r1, r6
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b8      	blx	r7
 80078cc:	3001      	adds	r0, #1
 80078ce:	d1e5      	bne.n	800789c <_printf_float+0x340>
 80078d0:	e6a1      	b.n	8007616 <_printf_float+0xba>
 80078d2:	4653      	mov	r3, sl
 80078d4:	4642      	mov	r2, r8
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	d1e9      	bne.n	80078b4 <_printf_float+0x358>
 80078e0:	e699      	b.n	8007616 <_printf_float+0xba>
 80078e2:	2301      	movs	r3, #1
 80078e4:	464a      	mov	r2, r9
 80078e6:	4631      	mov	r1, r6
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b8      	blx	r7
 80078ec:	3001      	adds	r0, #1
 80078ee:	f43f ae92 	beq.w	8007616 <_printf_float+0xba>
 80078f2:	f108 0801 	add.w	r8, r8, #1
 80078f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	eba3 030a 	sub.w	r3, r3, sl
 8007900:	4543      	cmp	r3, r8
 8007902:	dcee      	bgt.n	80078e2 <_printf_float+0x386>
 8007904:	e74a      	b.n	800779c <_printf_float+0x240>
 8007906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007908:	2a01      	cmp	r2, #1
 800790a:	dc01      	bgt.n	8007910 <_printf_float+0x3b4>
 800790c:	07db      	lsls	r3, r3, #31
 800790e:	d53a      	bpl.n	8007986 <_printf_float+0x42a>
 8007910:	2301      	movs	r3, #1
 8007912:	4642      	mov	r2, r8
 8007914:	4631      	mov	r1, r6
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f43f ae7b 	beq.w	8007616 <_printf_float+0xba>
 8007920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007924:	4631      	mov	r1, r6
 8007926:	4628      	mov	r0, r5
 8007928:	47b8      	blx	r7
 800792a:	3001      	adds	r0, #1
 800792c:	f108 0801 	add.w	r8, r8, #1
 8007930:	f43f ae71 	beq.w	8007616 <_printf_float+0xba>
 8007934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007936:	2200      	movs	r2, #0
 8007938:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800793c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007940:	2300      	movs	r3, #0
 8007942:	f7f9 f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007946:	b9c8      	cbnz	r0, 800797c <_printf_float+0x420>
 8007948:	4653      	mov	r3, sl
 800794a:	4642      	mov	r2, r8
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	d10e      	bne.n	8007974 <_printf_float+0x418>
 8007956:	e65e      	b.n	8007616 <_printf_float+0xba>
 8007958:	2301      	movs	r3, #1
 800795a:	4652      	mov	r2, sl
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	f43f ae57 	beq.w	8007616 <_printf_float+0xba>
 8007968:	f108 0801 	add.w	r8, r8, #1
 800796c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800796e:	3b01      	subs	r3, #1
 8007970:	4543      	cmp	r3, r8
 8007972:	dcf1      	bgt.n	8007958 <_printf_float+0x3fc>
 8007974:	464b      	mov	r3, r9
 8007976:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800797a:	e6de      	b.n	800773a <_printf_float+0x1de>
 800797c:	f04f 0800 	mov.w	r8, #0
 8007980:	f104 0a1a 	add.w	sl, r4, #26
 8007984:	e7f2      	b.n	800796c <_printf_float+0x410>
 8007986:	2301      	movs	r3, #1
 8007988:	e7df      	b.n	800794a <_printf_float+0x3ee>
 800798a:	2301      	movs	r3, #1
 800798c:	464a      	mov	r2, r9
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	f43f ae3e 	beq.w	8007616 <_printf_float+0xba>
 800799a:	f108 0801 	add.w	r8, r8, #1
 800799e:	68e3      	ldr	r3, [r4, #12]
 80079a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	4543      	cmp	r3, r8
 80079a6:	dcf0      	bgt.n	800798a <_printf_float+0x42e>
 80079a8:	e6fc      	b.n	80077a4 <_printf_float+0x248>
 80079aa:	f04f 0800 	mov.w	r8, #0
 80079ae:	f104 0919 	add.w	r9, r4, #25
 80079b2:	e7f4      	b.n	800799e <_printf_float+0x442>
 80079b4:	2900      	cmp	r1, #0
 80079b6:	f43f ae8b 	beq.w	80076d0 <_printf_float+0x174>
 80079ba:	2300      	movs	r3, #0
 80079bc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80079c0:	ab09      	add	r3, sp, #36	; 0x24
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	ec49 8b10 	vmov	d0, r8, r9
 80079c8:	6022      	str	r2, [r4, #0]
 80079ca:	f8cd a004 	str.w	sl, [sp, #4]
 80079ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079d2:	4628      	mov	r0, r5
 80079d4:	f7ff fd2e 	bl	8007434 <__cvt>
 80079d8:	4680      	mov	r8, r0
 80079da:	e648      	b.n	800766e <_printf_float+0x112>

080079dc <_printf_common>:
 80079dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	4691      	mov	r9, r2
 80079e2:	461f      	mov	r7, r3
 80079e4:	688a      	ldr	r2, [r1, #8]
 80079e6:	690b      	ldr	r3, [r1, #16]
 80079e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079ec:	4293      	cmp	r3, r2
 80079ee:	bfb8      	it	lt
 80079f0:	4613      	movlt	r3, r2
 80079f2:	f8c9 3000 	str.w	r3, [r9]
 80079f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079fa:	4606      	mov	r6, r0
 80079fc:	460c      	mov	r4, r1
 80079fe:	b112      	cbz	r2, 8007a06 <_printf_common+0x2a>
 8007a00:	3301      	adds	r3, #1
 8007a02:	f8c9 3000 	str.w	r3, [r9]
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	0699      	lsls	r1, r3, #26
 8007a0a:	bf42      	ittt	mi
 8007a0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a10:	3302      	addmi	r3, #2
 8007a12:	f8c9 3000 	strmi.w	r3, [r9]
 8007a16:	6825      	ldr	r5, [r4, #0]
 8007a18:	f015 0506 	ands.w	r5, r5, #6
 8007a1c:	d107      	bne.n	8007a2e <_printf_common+0x52>
 8007a1e:	f104 0a19 	add.w	sl, r4, #25
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	f8d9 2000 	ldr.w	r2, [r9]
 8007a28:	1a9b      	subs	r3, r3, r2
 8007a2a:	42ab      	cmp	r3, r5
 8007a2c:	dc28      	bgt.n	8007a80 <_printf_common+0xa4>
 8007a2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a32:	6822      	ldr	r2, [r4, #0]
 8007a34:	3300      	adds	r3, #0
 8007a36:	bf18      	it	ne
 8007a38:	2301      	movne	r3, #1
 8007a3a:	0692      	lsls	r2, r2, #26
 8007a3c:	d42d      	bmi.n	8007a9a <_printf_common+0xbe>
 8007a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a42:	4639      	mov	r1, r7
 8007a44:	4630      	mov	r0, r6
 8007a46:	47c0      	blx	r8
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d020      	beq.n	8007a8e <_printf_common+0xb2>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	68e5      	ldr	r5, [r4, #12]
 8007a50:	f8d9 2000 	ldr.w	r2, [r9]
 8007a54:	f003 0306 	and.w	r3, r3, #6
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	bf08      	it	eq
 8007a5c:	1aad      	subeq	r5, r5, r2
 8007a5e:	68a3      	ldr	r3, [r4, #8]
 8007a60:	6922      	ldr	r2, [r4, #16]
 8007a62:	bf0c      	ite	eq
 8007a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a68:	2500      	movne	r5, #0
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	bfc4      	itt	gt
 8007a6e:	1a9b      	subgt	r3, r3, r2
 8007a70:	18ed      	addgt	r5, r5, r3
 8007a72:	f04f 0900 	mov.w	r9, #0
 8007a76:	341a      	adds	r4, #26
 8007a78:	454d      	cmp	r5, r9
 8007a7a:	d11a      	bne.n	8007ab2 <_printf_common+0xd6>
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e008      	b.n	8007a92 <_printf_common+0xb6>
 8007a80:	2301      	movs	r3, #1
 8007a82:	4652      	mov	r2, sl
 8007a84:	4639      	mov	r1, r7
 8007a86:	4630      	mov	r0, r6
 8007a88:	47c0      	blx	r8
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d103      	bne.n	8007a96 <_printf_common+0xba>
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a96:	3501      	adds	r5, #1
 8007a98:	e7c3      	b.n	8007a22 <_printf_common+0x46>
 8007a9a:	18e1      	adds	r1, r4, r3
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	2030      	movs	r0, #48	; 0x30
 8007aa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007aa4:	4422      	add	r2, r4
 8007aa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007aae:	3302      	adds	r3, #2
 8007ab0:	e7c5      	b.n	8007a3e <_printf_common+0x62>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	4630      	mov	r0, r6
 8007aba:	47c0      	blx	r8
 8007abc:	3001      	adds	r0, #1
 8007abe:	d0e6      	beq.n	8007a8e <_printf_common+0xb2>
 8007ac0:	f109 0901 	add.w	r9, r9, #1
 8007ac4:	e7d8      	b.n	8007a78 <_printf_common+0x9c>
	...

08007ac8 <_printf_i>:
 8007ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007acc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	7e09      	ldrb	r1, [r1, #24]
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	296e      	cmp	r1, #110	; 0x6e
 8007ad8:	4617      	mov	r7, r2
 8007ada:	4606      	mov	r6, r0
 8007adc:	4698      	mov	r8, r3
 8007ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ae0:	f000 80b3 	beq.w	8007c4a <_printf_i+0x182>
 8007ae4:	d822      	bhi.n	8007b2c <_printf_i+0x64>
 8007ae6:	2963      	cmp	r1, #99	; 0x63
 8007ae8:	d036      	beq.n	8007b58 <_printf_i+0x90>
 8007aea:	d80a      	bhi.n	8007b02 <_printf_i+0x3a>
 8007aec:	2900      	cmp	r1, #0
 8007aee:	f000 80b9 	beq.w	8007c64 <_printf_i+0x19c>
 8007af2:	2958      	cmp	r1, #88	; 0x58
 8007af4:	f000 8083 	beq.w	8007bfe <_printf_i+0x136>
 8007af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007afc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007b00:	e032      	b.n	8007b68 <_printf_i+0xa0>
 8007b02:	2964      	cmp	r1, #100	; 0x64
 8007b04:	d001      	beq.n	8007b0a <_printf_i+0x42>
 8007b06:	2969      	cmp	r1, #105	; 0x69
 8007b08:	d1f6      	bne.n	8007af8 <_printf_i+0x30>
 8007b0a:	6820      	ldr	r0, [r4, #0]
 8007b0c:	6813      	ldr	r3, [r2, #0]
 8007b0e:	0605      	lsls	r5, r0, #24
 8007b10:	f103 0104 	add.w	r1, r3, #4
 8007b14:	d52a      	bpl.n	8007b6c <_printf_i+0xa4>
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6011      	str	r1, [r2, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	da03      	bge.n	8007b26 <_printf_i+0x5e>
 8007b1e:	222d      	movs	r2, #45	; 0x2d
 8007b20:	425b      	negs	r3, r3
 8007b22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b26:	486f      	ldr	r0, [pc, #444]	; (8007ce4 <_printf_i+0x21c>)
 8007b28:	220a      	movs	r2, #10
 8007b2a:	e039      	b.n	8007ba0 <_printf_i+0xd8>
 8007b2c:	2973      	cmp	r1, #115	; 0x73
 8007b2e:	f000 809d 	beq.w	8007c6c <_printf_i+0x1a4>
 8007b32:	d808      	bhi.n	8007b46 <_printf_i+0x7e>
 8007b34:	296f      	cmp	r1, #111	; 0x6f
 8007b36:	d020      	beq.n	8007b7a <_printf_i+0xb2>
 8007b38:	2970      	cmp	r1, #112	; 0x70
 8007b3a:	d1dd      	bne.n	8007af8 <_printf_i+0x30>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	f043 0320 	orr.w	r3, r3, #32
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	e003      	b.n	8007b4e <_printf_i+0x86>
 8007b46:	2975      	cmp	r1, #117	; 0x75
 8007b48:	d017      	beq.n	8007b7a <_printf_i+0xb2>
 8007b4a:	2978      	cmp	r1, #120	; 0x78
 8007b4c:	d1d4      	bne.n	8007af8 <_printf_i+0x30>
 8007b4e:	2378      	movs	r3, #120	; 0x78
 8007b50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b54:	4864      	ldr	r0, [pc, #400]	; (8007ce8 <_printf_i+0x220>)
 8007b56:	e055      	b.n	8007c04 <_printf_i+0x13c>
 8007b58:	6813      	ldr	r3, [r2, #0]
 8007b5a:	1d19      	adds	r1, r3, #4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6011      	str	r1, [r2, #0]
 8007b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e08c      	b.n	8007c86 <_printf_i+0x1be>
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6011      	str	r1, [r2, #0]
 8007b70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b74:	bf18      	it	ne
 8007b76:	b21b      	sxthne	r3, r3
 8007b78:	e7cf      	b.n	8007b1a <_printf_i+0x52>
 8007b7a:	6813      	ldr	r3, [r2, #0]
 8007b7c:	6825      	ldr	r5, [r4, #0]
 8007b7e:	1d18      	adds	r0, r3, #4
 8007b80:	6010      	str	r0, [r2, #0]
 8007b82:	0628      	lsls	r0, r5, #24
 8007b84:	d501      	bpl.n	8007b8a <_printf_i+0xc2>
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	e002      	b.n	8007b90 <_printf_i+0xc8>
 8007b8a:	0668      	lsls	r0, r5, #25
 8007b8c:	d5fb      	bpl.n	8007b86 <_printf_i+0xbe>
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	4854      	ldr	r0, [pc, #336]	; (8007ce4 <_printf_i+0x21c>)
 8007b92:	296f      	cmp	r1, #111	; 0x6f
 8007b94:	bf14      	ite	ne
 8007b96:	220a      	movne	r2, #10
 8007b98:	2208      	moveq	r2, #8
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ba0:	6865      	ldr	r5, [r4, #4]
 8007ba2:	60a5      	str	r5, [r4, #8]
 8007ba4:	2d00      	cmp	r5, #0
 8007ba6:	f2c0 8095 	blt.w	8007cd4 <_printf_i+0x20c>
 8007baa:	6821      	ldr	r1, [r4, #0]
 8007bac:	f021 0104 	bic.w	r1, r1, #4
 8007bb0:	6021      	str	r1, [r4, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d13d      	bne.n	8007c32 <_printf_i+0x16a>
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	f040 808e 	bne.w	8007cd8 <_printf_i+0x210>
 8007bbc:	4665      	mov	r5, ip
 8007bbe:	2a08      	cmp	r2, #8
 8007bc0:	d10b      	bne.n	8007bda <_printf_i+0x112>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	07db      	lsls	r3, r3, #31
 8007bc6:	d508      	bpl.n	8007bda <_printf_i+0x112>
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	6862      	ldr	r2, [r4, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	bfde      	ittt	le
 8007bd0:	2330      	movle	r3, #48	; 0x30
 8007bd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bd6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007bda:	ebac 0305 	sub.w	r3, ip, r5
 8007bde:	6123      	str	r3, [r4, #16]
 8007be0:	f8cd 8000 	str.w	r8, [sp]
 8007be4:	463b      	mov	r3, r7
 8007be6:	aa03      	add	r2, sp, #12
 8007be8:	4621      	mov	r1, r4
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7ff fef6 	bl	80079dc <_printf_common>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d14d      	bne.n	8007c90 <_printf_i+0x1c8>
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bf8:	b005      	add	sp, #20
 8007bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bfe:	4839      	ldr	r0, [pc, #228]	; (8007ce4 <_printf_i+0x21c>)
 8007c00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007c04:	6813      	ldr	r3, [r2, #0]
 8007c06:	6821      	ldr	r1, [r4, #0]
 8007c08:	1d1d      	adds	r5, r3, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6015      	str	r5, [r2, #0]
 8007c0e:	060a      	lsls	r2, r1, #24
 8007c10:	d50b      	bpl.n	8007c2a <_printf_i+0x162>
 8007c12:	07ca      	lsls	r2, r1, #31
 8007c14:	bf44      	itt	mi
 8007c16:	f041 0120 	orrmi.w	r1, r1, #32
 8007c1a:	6021      	strmi	r1, [r4, #0]
 8007c1c:	b91b      	cbnz	r3, 8007c26 <_printf_i+0x15e>
 8007c1e:	6822      	ldr	r2, [r4, #0]
 8007c20:	f022 0220 	bic.w	r2, r2, #32
 8007c24:	6022      	str	r2, [r4, #0]
 8007c26:	2210      	movs	r2, #16
 8007c28:	e7b7      	b.n	8007b9a <_printf_i+0xd2>
 8007c2a:	064d      	lsls	r5, r1, #25
 8007c2c:	bf48      	it	mi
 8007c2e:	b29b      	uxthmi	r3, r3
 8007c30:	e7ef      	b.n	8007c12 <_printf_i+0x14a>
 8007c32:	4665      	mov	r5, ip
 8007c34:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c38:	fb02 3311 	mls	r3, r2, r1, r3
 8007c3c:	5cc3      	ldrb	r3, [r0, r3]
 8007c3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c42:	460b      	mov	r3, r1
 8007c44:	2900      	cmp	r1, #0
 8007c46:	d1f5      	bne.n	8007c34 <_printf_i+0x16c>
 8007c48:	e7b9      	b.n	8007bbe <_printf_i+0xf6>
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	6825      	ldr	r5, [r4, #0]
 8007c4e:	6961      	ldr	r1, [r4, #20]
 8007c50:	1d18      	adds	r0, r3, #4
 8007c52:	6010      	str	r0, [r2, #0]
 8007c54:	0628      	lsls	r0, r5, #24
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	d501      	bpl.n	8007c5e <_printf_i+0x196>
 8007c5a:	6019      	str	r1, [r3, #0]
 8007c5c:	e002      	b.n	8007c64 <_printf_i+0x19c>
 8007c5e:	066a      	lsls	r2, r5, #25
 8007c60:	d5fb      	bpl.n	8007c5a <_printf_i+0x192>
 8007c62:	8019      	strh	r1, [r3, #0]
 8007c64:	2300      	movs	r3, #0
 8007c66:	6123      	str	r3, [r4, #16]
 8007c68:	4665      	mov	r5, ip
 8007c6a:	e7b9      	b.n	8007be0 <_printf_i+0x118>
 8007c6c:	6813      	ldr	r3, [r2, #0]
 8007c6e:	1d19      	adds	r1, r3, #4
 8007c70:	6011      	str	r1, [r2, #0]
 8007c72:	681d      	ldr	r5, [r3, #0]
 8007c74:	6862      	ldr	r2, [r4, #4]
 8007c76:	2100      	movs	r1, #0
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f7f8 fab1 	bl	80001e0 <memchr>
 8007c7e:	b108      	cbz	r0, 8007c84 <_printf_i+0x1bc>
 8007c80:	1b40      	subs	r0, r0, r5
 8007c82:	6060      	str	r0, [r4, #4]
 8007c84:	6863      	ldr	r3, [r4, #4]
 8007c86:	6123      	str	r3, [r4, #16]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c8e:	e7a7      	b.n	8007be0 <_printf_i+0x118>
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	462a      	mov	r2, r5
 8007c94:	4639      	mov	r1, r7
 8007c96:	4630      	mov	r0, r6
 8007c98:	47c0      	blx	r8
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d0aa      	beq.n	8007bf4 <_printf_i+0x12c>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	079b      	lsls	r3, r3, #30
 8007ca2:	d413      	bmi.n	8007ccc <_printf_i+0x204>
 8007ca4:	68e0      	ldr	r0, [r4, #12]
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	4298      	cmp	r0, r3
 8007caa:	bfb8      	it	lt
 8007cac:	4618      	movlt	r0, r3
 8007cae:	e7a3      	b.n	8007bf8 <_printf_i+0x130>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	464a      	mov	r2, r9
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	47c0      	blx	r8
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d09a      	beq.n	8007bf4 <_printf_i+0x12c>
 8007cbe:	3501      	adds	r5, #1
 8007cc0:	68e3      	ldr	r3, [r4, #12]
 8007cc2:	9a03      	ldr	r2, [sp, #12]
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	42ab      	cmp	r3, r5
 8007cc8:	dcf2      	bgt.n	8007cb0 <_printf_i+0x1e8>
 8007cca:	e7eb      	b.n	8007ca4 <_printf_i+0x1dc>
 8007ccc:	2500      	movs	r5, #0
 8007cce:	f104 0919 	add.w	r9, r4, #25
 8007cd2:	e7f5      	b.n	8007cc0 <_printf_i+0x1f8>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1ac      	bne.n	8007c32 <_printf_i+0x16a>
 8007cd8:	7803      	ldrb	r3, [r0, #0]
 8007cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce2:	e76c      	b.n	8007bbe <_printf_i+0xf6>
 8007ce4:	0807a92e 	.word	0x0807a92e
 8007ce8:	0807a93f 	.word	0x0807a93f

08007cec <_sbrk_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	4c06      	ldr	r4, [pc, #24]	; (8007d08 <_sbrk_r+0x1c>)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	6023      	str	r3, [r4, #0]
 8007cf8:	f7fc fba6 	bl	8004448 <_sbrk>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_sbrk_r+0x1a>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_sbrk_r+0x1a>
 8007d04:	602b      	str	r3, [r5, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	20000820 	.word	0x20000820

08007d0c <siprintf>:
 8007d0c:	b40e      	push	{r1, r2, r3}
 8007d0e:	b500      	push	{lr}
 8007d10:	b09c      	sub	sp, #112	; 0x70
 8007d12:	ab1d      	add	r3, sp, #116	; 0x74
 8007d14:	9002      	str	r0, [sp, #8]
 8007d16:	9006      	str	r0, [sp, #24]
 8007d18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d1c:	4809      	ldr	r0, [pc, #36]	; (8007d44 <siprintf+0x38>)
 8007d1e:	9107      	str	r1, [sp, #28]
 8007d20:	9104      	str	r1, [sp, #16]
 8007d22:	4909      	ldr	r1, [pc, #36]	; (8007d48 <siprintf+0x3c>)
 8007d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d28:	9105      	str	r1, [sp, #20]
 8007d2a:	6800      	ldr	r0, [r0, #0]
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	a902      	add	r1, sp, #8
 8007d30:	f001 f9b8 	bl	80090a4 <_svfiprintf_r>
 8007d34:	9b02      	ldr	r3, [sp, #8]
 8007d36:	2200      	movs	r2, #0
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	b01c      	add	sp, #112	; 0x70
 8007d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d40:	b003      	add	sp, #12
 8007d42:	4770      	bx	lr
 8007d44:	2000000c 	.word	0x2000000c
 8007d48:	ffff0208 	.word	0xffff0208

08007d4c <strcpy>:
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d52:	f803 2b01 	strb.w	r2, [r3], #1
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	d1f9      	bne.n	8007d4e <strcpy+0x2>
 8007d5a:	4770      	bx	lr

08007d5c <quorem>:
 8007d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d60:	6903      	ldr	r3, [r0, #16]
 8007d62:	690c      	ldr	r4, [r1, #16]
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	4680      	mov	r8, r0
 8007d68:	f2c0 8082 	blt.w	8007e70 <quorem+0x114>
 8007d6c:	3c01      	subs	r4, #1
 8007d6e:	f101 0714 	add.w	r7, r1, #20
 8007d72:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007d76:	f100 0614 	add.w	r6, r0, #20
 8007d7a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007d7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007d82:	eb06 030c 	add.w	r3, r6, ip
 8007d86:	3501      	adds	r5, #1
 8007d88:	eb07 090c 	add.w	r9, r7, ip
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007d92:	b395      	cbz	r5, 8007dfa <quorem+0x9e>
 8007d94:	f04f 0a00 	mov.w	sl, #0
 8007d98:	4638      	mov	r0, r7
 8007d9a:	46b6      	mov	lr, r6
 8007d9c:	46d3      	mov	fp, sl
 8007d9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007da2:	b293      	uxth	r3, r2
 8007da4:	fb05 a303 	mla	r3, r5, r3, sl
 8007da8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	ebab 0303 	sub.w	r3, fp, r3
 8007db2:	0c12      	lsrs	r2, r2, #16
 8007db4:	f8de b000 	ldr.w	fp, [lr]
 8007db8:	fb05 a202 	mla	r2, r5, r2, sl
 8007dbc:	fa13 f38b 	uxtah	r3, r3, fp
 8007dc0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007dc4:	fa1f fb82 	uxth.w	fp, r2
 8007dc8:	f8de 2000 	ldr.w	r2, [lr]
 8007dcc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007dd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dda:	4581      	cmp	r9, r0
 8007ddc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007de0:	f84e 3b04 	str.w	r3, [lr], #4
 8007de4:	d2db      	bcs.n	8007d9e <quorem+0x42>
 8007de6:	f856 300c 	ldr.w	r3, [r6, ip]
 8007dea:	b933      	cbnz	r3, 8007dfa <quorem+0x9e>
 8007dec:	9b01      	ldr	r3, [sp, #4]
 8007dee:	3b04      	subs	r3, #4
 8007df0:	429e      	cmp	r6, r3
 8007df2:	461a      	mov	r2, r3
 8007df4:	d330      	bcc.n	8007e58 <quorem+0xfc>
 8007df6:	f8c8 4010 	str.w	r4, [r8, #16]
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	f001 f824 	bl	8008e48 <__mcmp>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	db25      	blt.n	8007e50 <quorem+0xf4>
 8007e04:	3501      	adds	r5, #1
 8007e06:	4630      	mov	r0, r6
 8007e08:	f04f 0c00 	mov.w	ip, #0
 8007e0c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007e10:	f8d0 e000 	ldr.w	lr, [r0]
 8007e14:	b293      	uxth	r3, r2
 8007e16:	ebac 0303 	sub.w	r3, ip, r3
 8007e1a:	0c12      	lsrs	r2, r2, #16
 8007e1c:	fa13 f38e 	uxtah	r3, r3, lr
 8007e20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e2e:	45b9      	cmp	r9, r7
 8007e30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e34:	f840 3b04 	str.w	r3, [r0], #4
 8007e38:	d2e8      	bcs.n	8007e0c <quorem+0xb0>
 8007e3a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007e3e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007e42:	b92a      	cbnz	r2, 8007e50 <quorem+0xf4>
 8007e44:	3b04      	subs	r3, #4
 8007e46:	429e      	cmp	r6, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	d30b      	bcc.n	8007e64 <quorem+0x108>
 8007e4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e50:	4628      	mov	r0, r5
 8007e52:	b003      	add	sp, #12
 8007e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	3b04      	subs	r3, #4
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	d1ca      	bne.n	8007df6 <quorem+0x9a>
 8007e60:	3c01      	subs	r4, #1
 8007e62:	e7c5      	b.n	8007df0 <quorem+0x94>
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	3b04      	subs	r3, #4
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	d1ef      	bne.n	8007e4c <quorem+0xf0>
 8007e6c:	3c01      	subs	r4, #1
 8007e6e:	e7ea      	b.n	8007e46 <quorem+0xea>
 8007e70:	2000      	movs	r0, #0
 8007e72:	e7ee      	b.n	8007e52 <quorem+0xf6>
 8007e74:	0000      	movs	r0, r0
	...

08007e78 <_dtoa_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	ec57 6b10 	vmov	r6, r7, d0
 8007e80:	b097      	sub	sp, #92	; 0x5c
 8007e82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e84:	9106      	str	r1, [sp, #24]
 8007e86:	4604      	mov	r4, r0
 8007e88:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e8a:	9312      	str	r3, [sp, #72]	; 0x48
 8007e8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e90:	e9cd 6700 	strd	r6, r7, [sp]
 8007e94:	b93d      	cbnz	r5, 8007ea6 <_dtoa_r+0x2e>
 8007e96:	2010      	movs	r0, #16
 8007e98:	f7ff fa0c 	bl	80072b4 <malloc>
 8007e9c:	6260      	str	r0, [r4, #36]	; 0x24
 8007e9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ea2:	6005      	str	r5, [r0, #0]
 8007ea4:	60c5      	str	r5, [r0, #12]
 8007ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ea8:	6819      	ldr	r1, [r3, #0]
 8007eaa:	b151      	cbz	r1, 8007ec2 <_dtoa_r+0x4a>
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	604a      	str	r2, [r1, #4]
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	4093      	lsls	r3, r2
 8007eb4:	608b      	str	r3, [r1, #8]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 fde5 	bl	8008a86 <_Bfree>
 8007ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	1e3b      	subs	r3, r7, #0
 8007ec4:	bfbb      	ittet	lt
 8007ec6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007eca:	9301      	strlt	r3, [sp, #4]
 8007ecc:	2300      	movge	r3, #0
 8007ece:	2201      	movlt	r2, #1
 8007ed0:	bfac      	ite	ge
 8007ed2:	f8c8 3000 	strge.w	r3, [r8]
 8007ed6:	f8c8 2000 	strlt.w	r2, [r8]
 8007eda:	4baf      	ldr	r3, [pc, #700]	; (8008198 <_dtoa_r+0x320>)
 8007edc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ee0:	ea33 0308 	bics.w	r3, r3, r8
 8007ee4:	d114      	bne.n	8007f10 <_dtoa_r+0x98>
 8007ee6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ee8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	9b00      	ldr	r3, [sp, #0]
 8007ef0:	b923      	cbnz	r3, 8007efc <_dtoa_r+0x84>
 8007ef2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f000 8542 	beq.w	8008980 <_dtoa_r+0xb08>
 8007efc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007efe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80081ac <_dtoa_r+0x334>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 8544 	beq.w	8008990 <_dtoa_r+0xb18>
 8007f08:	f10b 0303 	add.w	r3, fp, #3
 8007f0c:	f000 bd3e 	b.w	800898c <_dtoa_r+0xb14>
 8007f10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007f14:	2200      	movs	r2, #0
 8007f16:	2300      	movs	r3, #0
 8007f18:	4630      	mov	r0, r6
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	f7f8 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f20:	4681      	mov	r9, r0
 8007f22:	b168      	cbz	r0, 8007f40 <_dtoa_r+0xc8>
 8007f24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f26:	2301      	movs	r3, #1
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 8524 	beq.w	800897a <_dtoa_r+0xb02>
 8007f32:	4b9a      	ldr	r3, [pc, #616]	; (800819c <_dtoa_r+0x324>)
 8007f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f36:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	f000 bd28 	b.w	8008990 <_dtoa_r+0xb18>
 8007f40:	aa14      	add	r2, sp, #80	; 0x50
 8007f42:	a915      	add	r1, sp, #84	; 0x54
 8007f44:	ec47 6b10 	vmov	d0, r6, r7
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f000 fff4 	bl	8008f36 <__d2b>
 8007f4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007f52:	9004      	str	r0, [sp, #16]
 8007f54:	2d00      	cmp	r5, #0
 8007f56:	d07c      	beq.n	8008052 <_dtoa_r+0x1da>
 8007f58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007f60:	46b2      	mov	sl, r6
 8007f62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007f66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4b8b      	ldr	r3, [pc, #556]	; (80081a0 <_dtoa_r+0x328>)
 8007f72:	4650      	mov	r0, sl
 8007f74:	4659      	mov	r1, fp
 8007f76:	f7f8 f987 	bl	8000288 <__aeabi_dsub>
 8007f7a:	a381      	add	r3, pc, #516	; (adr r3, 8008180 <_dtoa_r+0x308>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f7f8 fb3a 	bl	80005f8 <__aeabi_dmul>
 8007f84:	a380      	add	r3, pc, #512	; (adr r3, 8008188 <_dtoa_r+0x310>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 f97f 	bl	800028c <__adddf3>
 8007f8e:	4606      	mov	r6, r0
 8007f90:	4628      	mov	r0, r5
 8007f92:	460f      	mov	r7, r1
 8007f94:	f7f8 fac6 	bl	8000524 <__aeabi_i2d>
 8007f98:	a37d      	add	r3, pc, #500	; (adr r3, 8008190 <_dtoa_r+0x318>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 fb2b 	bl	80005f8 <__aeabi_dmul>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	f7f8 f96f 	bl	800028c <__adddf3>
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	f7f8 fdd1 	bl	8000b58 <__aeabi_d2iz>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4682      	mov	sl, r0
 8007fba:	2300      	movs	r3, #0
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	4639      	mov	r1, r7
 8007fc0:	f7f8 fd8c 	bl	8000adc <__aeabi_dcmplt>
 8007fc4:	b148      	cbz	r0, 8007fda <_dtoa_r+0x162>
 8007fc6:	4650      	mov	r0, sl
 8007fc8:	f7f8 faac 	bl	8000524 <__aeabi_i2d>
 8007fcc:	4632      	mov	r2, r6
 8007fce:	463b      	mov	r3, r7
 8007fd0:	f7f8 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fd4:	b908      	cbnz	r0, 8007fda <_dtoa_r+0x162>
 8007fd6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007fda:	f1ba 0f16 	cmp.w	sl, #22
 8007fde:	d859      	bhi.n	8008094 <_dtoa_r+0x21c>
 8007fe0:	4970      	ldr	r1, [pc, #448]	; (80081a4 <_dtoa_r+0x32c>)
 8007fe2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fee:	f7f8 fd93 	bl	8000b18 <__aeabi_dcmpgt>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d050      	beq.n	8008098 <_dtoa_r+0x220>
 8007ff6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008000:	1b5d      	subs	r5, r3, r5
 8008002:	f1b5 0801 	subs.w	r8, r5, #1
 8008006:	bf49      	itett	mi
 8008008:	f1c5 0301 	rsbmi	r3, r5, #1
 800800c:	2300      	movpl	r3, #0
 800800e:	9305      	strmi	r3, [sp, #20]
 8008010:	f04f 0800 	movmi.w	r8, #0
 8008014:	bf58      	it	pl
 8008016:	9305      	strpl	r3, [sp, #20]
 8008018:	f1ba 0f00 	cmp.w	sl, #0
 800801c:	db3e      	blt.n	800809c <_dtoa_r+0x224>
 800801e:	2300      	movs	r3, #0
 8008020:	44d0      	add	r8, sl
 8008022:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008026:	9307      	str	r3, [sp, #28]
 8008028:	9b06      	ldr	r3, [sp, #24]
 800802a:	2b09      	cmp	r3, #9
 800802c:	f200 8090 	bhi.w	8008150 <_dtoa_r+0x2d8>
 8008030:	2b05      	cmp	r3, #5
 8008032:	bfc4      	itt	gt
 8008034:	3b04      	subgt	r3, #4
 8008036:	9306      	strgt	r3, [sp, #24]
 8008038:	9b06      	ldr	r3, [sp, #24]
 800803a:	f1a3 0302 	sub.w	r3, r3, #2
 800803e:	bfcc      	ite	gt
 8008040:	2500      	movgt	r5, #0
 8008042:	2501      	movle	r5, #1
 8008044:	2b03      	cmp	r3, #3
 8008046:	f200 808f 	bhi.w	8008168 <_dtoa_r+0x2f0>
 800804a:	e8df f003 	tbb	[pc, r3]
 800804e:	7f7d      	.short	0x7f7d
 8008050:	7131      	.short	0x7131
 8008052:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008056:	441d      	add	r5, r3
 8008058:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800805c:	2820      	cmp	r0, #32
 800805e:	dd13      	ble.n	8008088 <_dtoa_r+0x210>
 8008060:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008064:	9b00      	ldr	r3, [sp, #0]
 8008066:	fa08 f800 	lsl.w	r8, r8, r0
 800806a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800806e:	fa23 f000 	lsr.w	r0, r3, r0
 8008072:	ea48 0000 	orr.w	r0, r8, r0
 8008076:	f7f8 fa45 	bl	8000504 <__aeabi_ui2d>
 800807a:	2301      	movs	r3, #1
 800807c:	4682      	mov	sl, r0
 800807e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008082:	3d01      	subs	r5, #1
 8008084:	9313      	str	r3, [sp, #76]	; 0x4c
 8008086:	e772      	b.n	8007f6e <_dtoa_r+0xf6>
 8008088:	9b00      	ldr	r3, [sp, #0]
 800808a:	f1c0 0020 	rsb	r0, r0, #32
 800808e:	fa03 f000 	lsl.w	r0, r3, r0
 8008092:	e7f0      	b.n	8008076 <_dtoa_r+0x1fe>
 8008094:	2301      	movs	r3, #1
 8008096:	e7b1      	b.n	8007ffc <_dtoa_r+0x184>
 8008098:	900f      	str	r0, [sp, #60]	; 0x3c
 800809a:	e7b0      	b.n	8007ffe <_dtoa_r+0x186>
 800809c:	9b05      	ldr	r3, [sp, #20]
 800809e:	eba3 030a 	sub.w	r3, r3, sl
 80080a2:	9305      	str	r3, [sp, #20]
 80080a4:	f1ca 0300 	rsb	r3, sl, #0
 80080a8:	9307      	str	r3, [sp, #28]
 80080aa:	2300      	movs	r3, #0
 80080ac:	930e      	str	r3, [sp, #56]	; 0x38
 80080ae:	e7bb      	b.n	8008028 <_dtoa_r+0x1b0>
 80080b0:	2301      	movs	r3, #1
 80080b2:	930a      	str	r3, [sp, #40]	; 0x28
 80080b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	dd59      	ble.n	800816e <_dtoa_r+0x2f6>
 80080ba:	9302      	str	r3, [sp, #8]
 80080bc:	4699      	mov	r9, r3
 80080be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080c0:	2200      	movs	r2, #0
 80080c2:	6072      	str	r2, [r6, #4]
 80080c4:	2204      	movs	r2, #4
 80080c6:	f102 0014 	add.w	r0, r2, #20
 80080ca:	4298      	cmp	r0, r3
 80080cc:	6871      	ldr	r1, [r6, #4]
 80080ce:	d953      	bls.n	8008178 <_dtoa_r+0x300>
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 fca4 	bl	8008a1e <_Balloc>
 80080d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080d8:	6030      	str	r0, [r6, #0]
 80080da:	f1b9 0f0e 	cmp.w	r9, #14
 80080de:	f8d3 b000 	ldr.w	fp, [r3]
 80080e2:	f200 80e6 	bhi.w	80082b2 <_dtoa_r+0x43a>
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	f000 80e3 	beq.w	80082b2 <_dtoa_r+0x43a>
 80080ec:	ed9d 7b00 	vldr	d7, [sp]
 80080f0:	f1ba 0f00 	cmp.w	sl, #0
 80080f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80080f8:	dd74      	ble.n	80081e4 <_dtoa_r+0x36c>
 80080fa:	4a2a      	ldr	r2, [pc, #168]	; (80081a4 <_dtoa_r+0x32c>)
 80080fc:	f00a 030f 	and.w	r3, sl, #15
 8008100:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008104:	ed93 7b00 	vldr	d7, [r3]
 8008108:	ea4f 162a 	mov.w	r6, sl, asr #4
 800810c:	06f0      	lsls	r0, r6, #27
 800810e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008112:	d565      	bpl.n	80081e0 <_dtoa_r+0x368>
 8008114:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <_dtoa_r+0x330>)
 8008116:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800811a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800811e:	f7f8 fb95 	bl	800084c <__aeabi_ddiv>
 8008122:	e9cd 0100 	strd	r0, r1, [sp]
 8008126:	f006 060f 	and.w	r6, r6, #15
 800812a:	2503      	movs	r5, #3
 800812c:	4f1e      	ldr	r7, [pc, #120]	; (80081a8 <_dtoa_r+0x330>)
 800812e:	e04c      	b.n	80081ca <_dtoa_r+0x352>
 8008130:	2301      	movs	r3, #1
 8008132:	930a      	str	r3, [sp, #40]	; 0x28
 8008134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008136:	4453      	add	r3, sl
 8008138:	f103 0901 	add.w	r9, r3, #1
 800813c:	9302      	str	r3, [sp, #8]
 800813e:	464b      	mov	r3, r9
 8008140:	2b01      	cmp	r3, #1
 8008142:	bfb8      	it	lt
 8008144:	2301      	movlt	r3, #1
 8008146:	e7ba      	b.n	80080be <_dtoa_r+0x246>
 8008148:	2300      	movs	r3, #0
 800814a:	e7b2      	b.n	80080b2 <_dtoa_r+0x23a>
 800814c:	2300      	movs	r3, #0
 800814e:	e7f0      	b.n	8008132 <_dtoa_r+0x2ba>
 8008150:	2501      	movs	r5, #1
 8008152:	2300      	movs	r3, #0
 8008154:	9306      	str	r3, [sp, #24]
 8008156:	950a      	str	r5, [sp, #40]	; 0x28
 8008158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	4699      	mov	r9, r3
 8008160:	2200      	movs	r2, #0
 8008162:	2312      	movs	r3, #18
 8008164:	920b      	str	r2, [sp, #44]	; 0x2c
 8008166:	e7aa      	b.n	80080be <_dtoa_r+0x246>
 8008168:	2301      	movs	r3, #1
 800816a:	930a      	str	r3, [sp, #40]	; 0x28
 800816c:	e7f4      	b.n	8008158 <_dtoa_r+0x2e0>
 800816e:	2301      	movs	r3, #1
 8008170:	9302      	str	r3, [sp, #8]
 8008172:	4699      	mov	r9, r3
 8008174:	461a      	mov	r2, r3
 8008176:	e7f5      	b.n	8008164 <_dtoa_r+0x2ec>
 8008178:	3101      	adds	r1, #1
 800817a:	6071      	str	r1, [r6, #4]
 800817c:	0052      	lsls	r2, r2, #1
 800817e:	e7a2      	b.n	80080c6 <_dtoa_r+0x24e>
 8008180:	636f4361 	.word	0x636f4361
 8008184:	3fd287a7 	.word	0x3fd287a7
 8008188:	8b60c8b3 	.word	0x8b60c8b3
 800818c:	3fc68a28 	.word	0x3fc68a28
 8008190:	509f79fb 	.word	0x509f79fb
 8008194:	3fd34413 	.word	0x3fd34413
 8008198:	7ff00000 	.word	0x7ff00000
 800819c:	0807a92d 	.word	0x0807a92d
 80081a0:	3ff80000 	.word	0x3ff80000
 80081a4:	0807a988 	.word	0x0807a988
 80081a8:	0807a960 	.word	0x0807a960
 80081ac:	0807a959 	.word	0x0807a959
 80081b0:	07f1      	lsls	r1, r6, #31
 80081b2:	d508      	bpl.n	80081c6 <_dtoa_r+0x34e>
 80081b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081bc:	f7f8 fa1c 	bl	80005f8 <__aeabi_dmul>
 80081c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081c4:	3501      	adds	r5, #1
 80081c6:	1076      	asrs	r6, r6, #1
 80081c8:	3708      	adds	r7, #8
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	d1f0      	bne.n	80081b0 <_dtoa_r+0x338>
 80081ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80081d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081d6:	f7f8 fb39 	bl	800084c <__aeabi_ddiv>
 80081da:	e9cd 0100 	strd	r0, r1, [sp]
 80081de:	e01a      	b.n	8008216 <_dtoa_r+0x39e>
 80081e0:	2502      	movs	r5, #2
 80081e2:	e7a3      	b.n	800812c <_dtoa_r+0x2b4>
 80081e4:	f000 80a0 	beq.w	8008328 <_dtoa_r+0x4b0>
 80081e8:	f1ca 0600 	rsb	r6, sl, #0
 80081ec:	4b9f      	ldr	r3, [pc, #636]	; (800846c <_dtoa_r+0x5f4>)
 80081ee:	4fa0      	ldr	r7, [pc, #640]	; (8008470 <_dtoa_r+0x5f8>)
 80081f0:	f006 020f 	and.w	r2, r6, #15
 80081f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008200:	f7f8 f9fa 	bl	80005f8 <__aeabi_dmul>
 8008204:	e9cd 0100 	strd	r0, r1, [sp]
 8008208:	1136      	asrs	r6, r6, #4
 800820a:	2300      	movs	r3, #0
 800820c:	2502      	movs	r5, #2
 800820e:	2e00      	cmp	r6, #0
 8008210:	d17f      	bne.n	8008312 <_dtoa_r+0x49a>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e1      	bne.n	80081da <_dtoa_r+0x362>
 8008216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 8087 	beq.w	800832c <_dtoa_r+0x4b4>
 800821e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008222:	2200      	movs	r2, #0
 8008224:	4b93      	ldr	r3, [pc, #588]	; (8008474 <_dtoa_r+0x5fc>)
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	f7f8 fc57 	bl	8000adc <__aeabi_dcmplt>
 800822e:	2800      	cmp	r0, #0
 8008230:	d07c      	beq.n	800832c <_dtoa_r+0x4b4>
 8008232:	f1b9 0f00 	cmp.w	r9, #0
 8008236:	d079      	beq.n	800832c <_dtoa_r+0x4b4>
 8008238:	9b02      	ldr	r3, [sp, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	dd35      	ble.n	80082aa <_dtoa_r+0x432>
 800823e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008242:	9308      	str	r3, [sp, #32]
 8008244:	4639      	mov	r1, r7
 8008246:	2200      	movs	r2, #0
 8008248:	4b8b      	ldr	r3, [pc, #556]	; (8008478 <_dtoa_r+0x600>)
 800824a:	4630      	mov	r0, r6
 800824c:	f7f8 f9d4 	bl	80005f8 <__aeabi_dmul>
 8008250:	e9cd 0100 	strd	r0, r1, [sp]
 8008254:	9f02      	ldr	r7, [sp, #8]
 8008256:	3501      	adds	r5, #1
 8008258:	4628      	mov	r0, r5
 800825a:	f7f8 f963 	bl	8000524 <__aeabi_i2d>
 800825e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008262:	f7f8 f9c9 	bl	80005f8 <__aeabi_dmul>
 8008266:	2200      	movs	r2, #0
 8008268:	4b84      	ldr	r3, [pc, #528]	; (800847c <_dtoa_r+0x604>)
 800826a:	f7f8 f80f 	bl	800028c <__adddf3>
 800826e:	4605      	mov	r5, r0
 8008270:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008274:	2f00      	cmp	r7, #0
 8008276:	d15d      	bne.n	8008334 <_dtoa_r+0x4bc>
 8008278:	2200      	movs	r2, #0
 800827a:	4b81      	ldr	r3, [pc, #516]	; (8008480 <_dtoa_r+0x608>)
 800827c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008280:	f7f8 f802 	bl	8000288 <__aeabi_dsub>
 8008284:	462a      	mov	r2, r5
 8008286:	4633      	mov	r3, r6
 8008288:	e9cd 0100 	strd	r0, r1, [sp]
 800828c:	f7f8 fc44 	bl	8000b18 <__aeabi_dcmpgt>
 8008290:	2800      	cmp	r0, #0
 8008292:	f040 8288 	bne.w	80087a6 <_dtoa_r+0x92e>
 8008296:	462a      	mov	r2, r5
 8008298:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800829c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082a0:	f7f8 fc1c 	bl	8000adc <__aeabi_dcmplt>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f040 827c 	bne.w	80087a2 <_dtoa_r+0x92a>
 80082aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082ae:	e9cd 2300 	strd	r2, r3, [sp]
 80082b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f2c0 8150 	blt.w	800855a <_dtoa_r+0x6e2>
 80082ba:	f1ba 0f0e 	cmp.w	sl, #14
 80082be:	f300 814c 	bgt.w	800855a <_dtoa_r+0x6e2>
 80082c2:	4b6a      	ldr	r3, [pc, #424]	; (800846c <_dtoa_r+0x5f4>)
 80082c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082c8:	ed93 7b00 	vldr	d7, [r3]
 80082cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082d4:	f280 80d8 	bge.w	8008488 <_dtoa_r+0x610>
 80082d8:	f1b9 0f00 	cmp.w	r9, #0
 80082dc:	f300 80d4 	bgt.w	8008488 <_dtoa_r+0x610>
 80082e0:	f040 825e 	bne.w	80087a0 <_dtoa_r+0x928>
 80082e4:	2200      	movs	r2, #0
 80082e6:	4b66      	ldr	r3, [pc, #408]	; (8008480 <_dtoa_r+0x608>)
 80082e8:	ec51 0b17 	vmov	r0, r1, d7
 80082ec:	f7f8 f984 	bl	80005f8 <__aeabi_dmul>
 80082f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082f4:	f7f8 fc06 	bl	8000b04 <__aeabi_dcmpge>
 80082f8:	464f      	mov	r7, r9
 80082fa:	464e      	mov	r6, r9
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f040 8234 	bne.w	800876a <_dtoa_r+0x8f2>
 8008302:	2331      	movs	r3, #49	; 0x31
 8008304:	f10b 0501 	add.w	r5, fp, #1
 8008308:	f88b 3000 	strb.w	r3, [fp]
 800830c:	f10a 0a01 	add.w	sl, sl, #1
 8008310:	e22f      	b.n	8008772 <_dtoa_r+0x8fa>
 8008312:	07f2      	lsls	r2, r6, #31
 8008314:	d505      	bpl.n	8008322 <_dtoa_r+0x4aa>
 8008316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831a:	f7f8 f96d 	bl	80005f8 <__aeabi_dmul>
 800831e:	3501      	adds	r5, #1
 8008320:	2301      	movs	r3, #1
 8008322:	1076      	asrs	r6, r6, #1
 8008324:	3708      	adds	r7, #8
 8008326:	e772      	b.n	800820e <_dtoa_r+0x396>
 8008328:	2502      	movs	r5, #2
 800832a:	e774      	b.n	8008216 <_dtoa_r+0x39e>
 800832c:	f8cd a020 	str.w	sl, [sp, #32]
 8008330:	464f      	mov	r7, r9
 8008332:	e791      	b.n	8008258 <_dtoa_r+0x3e0>
 8008334:	4b4d      	ldr	r3, [pc, #308]	; (800846c <_dtoa_r+0x5f4>)
 8008336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800833a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800833e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008340:	2b00      	cmp	r3, #0
 8008342:	d047      	beq.n	80083d4 <_dtoa_r+0x55c>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	2000      	movs	r0, #0
 800834a:	494e      	ldr	r1, [pc, #312]	; (8008484 <_dtoa_r+0x60c>)
 800834c:	f7f8 fa7e 	bl	800084c <__aeabi_ddiv>
 8008350:	462a      	mov	r2, r5
 8008352:	4633      	mov	r3, r6
 8008354:	f7f7 ff98 	bl	8000288 <__aeabi_dsub>
 8008358:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800835c:	465d      	mov	r5, fp
 800835e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008362:	f7f8 fbf9 	bl	8000b58 <__aeabi_d2iz>
 8008366:	4606      	mov	r6, r0
 8008368:	f7f8 f8dc 	bl	8000524 <__aeabi_i2d>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008374:	f7f7 ff88 	bl	8000288 <__aeabi_dsub>
 8008378:	3630      	adds	r6, #48	; 0x30
 800837a:	f805 6b01 	strb.w	r6, [r5], #1
 800837e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008382:	e9cd 0100 	strd	r0, r1, [sp]
 8008386:	f7f8 fba9 	bl	8000adc <__aeabi_dcmplt>
 800838a:	2800      	cmp	r0, #0
 800838c:	d163      	bne.n	8008456 <_dtoa_r+0x5de>
 800838e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008392:	2000      	movs	r0, #0
 8008394:	4937      	ldr	r1, [pc, #220]	; (8008474 <_dtoa_r+0x5fc>)
 8008396:	f7f7 ff77 	bl	8000288 <__aeabi_dsub>
 800839a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800839e:	f7f8 fb9d 	bl	8000adc <__aeabi_dcmplt>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	f040 80b7 	bne.w	8008516 <_dtoa_r+0x69e>
 80083a8:	eba5 030b 	sub.w	r3, r5, fp
 80083ac:	429f      	cmp	r7, r3
 80083ae:	f77f af7c 	ble.w	80082aa <_dtoa_r+0x432>
 80083b2:	2200      	movs	r2, #0
 80083b4:	4b30      	ldr	r3, [pc, #192]	; (8008478 <_dtoa_r+0x600>)
 80083b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083ba:	f7f8 f91d 	bl	80005f8 <__aeabi_dmul>
 80083be:	2200      	movs	r2, #0
 80083c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80083c4:	4b2c      	ldr	r3, [pc, #176]	; (8008478 <_dtoa_r+0x600>)
 80083c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083ca:	f7f8 f915 	bl	80005f8 <__aeabi_dmul>
 80083ce:	e9cd 0100 	strd	r0, r1, [sp]
 80083d2:	e7c4      	b.n	800835e <_dtoa_r+0x4e6>
 80083d4:	462a      	mov	r2, r5
 80083d6:	4633      	mov	r3, r6
 80083d8:	f7f8 f90e 	bl	80005f8 <__aeabi_dmul>
 80083dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80083e0:	eb0b 0507 	add.w	r5, fp, r7
 80083e4:	465e      	mov	r6, fp
 80083e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083ea:	f7f8 fbb5 	bl	8000b58 <__aeabi_d2iz>
 80083ee:	4607      	mov	r7, r0
 80083f0:	f7f8 f898 	bl	8000524 <__aeabi_i2d>
 80083f4:	3730      	adds	r7, #48	; 0x30
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083fe:	f7f7 ff43 	bl	8000288 <__aeabi_dsub>
 8008402:	f806 7b01 	strb.w	r7, [r6], #1
 8008406:	42ae      	cmp	r6, r5
 8008408:	e9cd 0100 	strd	r0, r1, [sp]
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	d126      	bne.n	8008460 <_dtoa_r+0x5e8>
 8008412:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <_dtoa_r+0x60c>)
 8008414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008418:	f7f7 ff38 	bl	800028c <__adddf3>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008424:	f7f8 fb78 	bl	8000b18 <__aeabi_dcmpgt>
 8008428:	2800      	cmp	r0, #0
 800842a:	d174      	bne.n	8008516 <_dtoa_r+0x69e>
 800842c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008430:	2000      	movs	r0, #0
 8008432:	4914      	ldr	r1, [pc, #80]	; (8008484 <_dtoa_r+0x60c>)
 8008434:	f7f7 ff28 	bl	8000288 <__aeabi_dsub>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008440:	f7f8 fb4c 	bl	8000adc <__aeabi_dcmplt>
 8008444:	2800      	cmp	r0, #0
 8008446:	f43f af30 	beq.w	80082aa <_dtoa_r+0x432>
 800844a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800844e:	2b30      	cmp	r3, #48	; 0x30
 8008450:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008454:	d002      	beq.n	800845c <_dtoa_r+0x5e4>
 8008456:	f8dd a020 	ldr.w	sl, [sp, #32]
 800845a:	e04a      	b.n	80084f2 <_dtoa_r+0x67a>
 800845c:	4615      	mov	r5, r2
 800845e:	e7f4      	b.n	800844a <_dtoa_r+0x5d2>
 8008460:	4b05      	ldr	r3, [pc, #20]	; (8008478 <_dtoa_r+0x600>)
 8008462:	f7f8 f8c9 	bl	80005f8 <__aeabi_dmul>
 8008466:	e9cd 0100 	strd	r0, r1, [sp]
 800846a:	e7bc      	b.n	80083e6 <_dtoa_r+0x56e>
 800846c:	0807a988 	.word	0x0807a988
 8008470:	0807a960 	.word	0x0807a960
 8008474:	3ff00000 	.word	0x3ff00000
 8008478:	40240000 	.word	0x40240000
 800847c:	401c0000 	.word	0x401c0000
 8008480:	40140000 	.word	0x40140000
 8008484:	3fe00000 	.word	0x3fe00000
 8008488:	e9dd 6700 	ldrd	r6, r7, [sp]
 800848c:	465d      	mov	r5, fp
 800848e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008492:	4630      	mov	r0, r6
 8008494:	4639      	mov	r1, r7
 8008496:	f7f8 f9d9 	bl	800084c <__aeabi_ddiv>
 800849a:	f7f8 fb5d 	bl	8000b58 <__aeabi_d2iz>
 800849e:	4680      	mov	r8, r0
 80084a0:	f7f8 f840 	bl	8000524 <__aeabi_i2d>
 80084a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084a8:	f7f8 f8a6 	bl	80005f8 <__aeabi_dmul>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4630      	mov	r0, r6
 80084b2:	4639      	mov	r1, r7
 80084b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80084b8:	f7f7 fee6 	bl	8000288 <__aeabi_dsub>
 80084bc:	f805 6b01 	strb.w	r6, [r5], #1
 80084c0:	eba5 060b 	sub.w	r6, r5, fp
 80084c4:	45b1      	cmp	r9, r6
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	d139      	bne.n	8008540 <_dtoa_r+0x6c8>
 80084cc:	f7f7 fede 	bl	800028c <__adddf3>
 80084d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084d4:	4606      	mov	r6, r0
 80084d6:	460f      	mov	r7, r1
 80084d8:	f7f8 fb1e 	bl	8000b18 <__aeabi_dcmpgt>
 80084dc:	b9c8      	cbnz	r0, 8008512 <_dtoa_r+0x69a>
 80084de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084e2:	4630      	mov	r0, r6
 80084e4:	4639      	mov	r1, r7
 80084e6:	f7f8 faef 	bl	8000ac8 <__aeabi_dcmpeq>
 80084ea:	b110      	cbz	r0, 80084f2 <_dtoa_r+0x67a>
 80084ec:	f018 0f01 	tst.w	r8, #1
 80084f0:	d10f      	bne.n	8008512 <_dtoa_r+0x69a>
 80084f2:	9904      	ldr	r1, [sp, #16]
 80084f4:	4620      	mov	r0, r4
 80084f6:	f000 fac6 	bl	8008a86 <_Bfree>
 80084fa:	2300      	movs	r3, #0
 80084fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084fe:	702b      	strb	r3, [r5, #0]
 8008500:	f10a 0301 	add.w	r3, sl, #1
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8241 	beq.w	8008990 <_dtoa_r+0xb18>
 800850e:	601d      	str	r5, [r3, #0]
 8008510:	e23e      	b.n	8008990 <_dtoa_r+0xb18>
 8008512:	f8cd a020 	str.w	sl, [sp, #32]
 8008516:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800851a:	2a39      	cmp	r2, #57	; 0x39
 800851c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008520:	d108      	bne.n	8008534 <_dtoa_r+0x6bc>
 8008522:	459b      	cmp	fp, r3
 8008524:	d10a      	bne.n	800853c <_dtoa_r+0x6c4>
 8008526:	9b08      	ldr	r3, [sp, #32]
 8008528:	3301      	adds	r3, #1
 800852a:	9308      	str	r3, [sp, #32]
 800852c:	2330      	movs	r3, #48	; 0x30
 800852e:	f88b 3000 	strb.w	r3, [fp]
 8008532:	465b      	mov	r3, fp
 8008534:	781a      	ldrb	r2, [r3, #0]
 8008536:	3201      	adds	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	e78c      	b.n	8008456 <_dtoa_r+0x5de>
 800853c:	461d      	mov	r5, r3
 800853e:	e7ea      	b.n	8008516 <_dtoa_r+0x69e>
 8008540:	2200      	movs	r2, #0
 8008542:	4b9b      	ldr	r3, [pc, #620]	; (80087b0 <_dtoa_r+0x938>)
 8008544:	f7f8 f858 	bl	80005f8 <__aeabi_dmul>
 8008548:	2200      	movs	r2, #0
 800854a:	2300      	movs	r3, #0
 800854c:	4606      	mov	r6, r0
 800854e:	460f      	mov	r7, r1
 8008550:	f7f8 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8008554:	2800      	cmp	r0, #0
 8008556:	d09a      	beq.n	800848e <_dtoa_r+0x616>
 8008558:	e7cb      	b.n	80084f2 <_dtoa_r+0x67a>
 800855a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800855c:	2a00      	cmp	r2, #0
 800855e:	f000 808b 	beq.w	8008678 <_dtoa_r+0x800>
 8008562:	9a06      	ldr	r2, [sp, #24]
 8008564:	2a01      	cmp	r2, #1
 8008566:	dc6e      	bgt.n	8008646 <_dtoa_r+0x7ce>
 8008568:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800856a:	2a00      	cmp	r2, #0
 800856c:	d067      	beq.n	800863e <_dtoa_r+0x7c6>
 800856e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008572:	9f07      	ldr	r7, [sp, #28]
 8008574:	9d05      	ldr	r5, [sp, #20]
 8008576:	9a05      	ldr	r2, [sp, #20]
 8008578:	2101      	movs	r1, #1
 800857a:	441a      	add	r2, r3
 800857c:	4620      	mov	r0, r4
 800857e:	9205      	str	r2, [sp, #20]
 8008580:	4498      	add	r8, r3
 8008582:	f000 fb20 	bl	8008bc6 <__i2b>
 8008586:	4606      	mov	r6, r0
 8008588:	2d00      	cmp	r5, #0
 800858a:	dd0c      	ble.n	80085a6 <_dtoa_r+0x72e>
 800858c:	f1b8 0f00 	cmp.w	r8, #0
 8008590:	dd09      	ble.n	80085a6 <_dtoa_r+0x72e>
 8008592:	4545      	cmp	r5, r8
 8008594:	9a05      	ldr	r2, [sp, #20]
 8008596:	462b      	mov	r3, r5
 8008598:	bfa8      	it	ge
 800859a:	4643      	movge	r3, r8
 800859c:	1ad2      	subs	r2, r2, r3
 800859e:	9205      	str	r2, [sp, #20]
 80085a0:	1aed      	subs	r5, r5, r3
 80085a2:	eba8 0803 	sub.w	r8, r8, r3
 80085a6:	9b07      	ldr	r3, [sp, #28]
 80085a8:	b1eb      	cbz	r3, 80085e6 <_dtoa_r+0x76e>
 80085aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d067      	beq.n	8008680 <_dtoa_r+0x808>
 80085b0:	b18f      	cbz	r7, 80085d6 <_dtoa_r+0x75e>
 80085b2:	4631      	mov	r1, r6
 80085b4:	463a      	mov	r2, r7
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 fba4 	bl	8008d04 <__pow5mult>
 80085bc:	9a04      	ldr	r2, [sp, #16]
 80085be:	4601      	mov	r1, r0
 80085c0:	4606      	mov	r6, r0
 80085c2:	4620      	mov	r0, r4
 80085c4:	f000 fb08 	bl	8008bd8 <__multiply>
 80085c8:	9904      	ldr	r1, [sp, #16]
 80085ca:	9008      	str	r0, [sp, #32]
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 fa5a 	bl	8008a86 <_Bfree>
 80085d2:	9b08      	ldr	r3, [sp, #32]
 80085d4:	9304      	str	r3, [sp, #16]
 80085d6:	9b07      	ldr	r3, [sp, #28]
 80085d8:	1bda      	subs	r2, r3, r7
 80085da:	d004      	beq.n	80085e6 <_dtoa_r+0x76e>
 80085dc:	9904      	ldr	r1, [sp, #16]
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 fb90 	bl	8008d04 <__pow5mult>
 80085e4:	9004      	str	r0, [sp, #16]
 80085e6:	2101      	movs	r1, #1
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 faec 	bl	8008bc6 <__i2b>
 80085ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085f0:	4607      	mov	r7, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 81d0 	beq.w	8008998 <_dtoa_r+0xb20>
 80085f8:	461a      	mov	r2, r3
 80085fa:	4601      	mov	r1, r0
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fb81 	bl	8008d04 <__pow5mult>
 8008602:	9b06      	ldr	r3, [sp, #24]
 8008604:	2b01      	cmp	r3, #1
 8008606:	4607      	mov	r7, r0
 8008608:	dc40      	bgt.n	800868c <_dtoa_r+0x814>
 800860a:	9b00      	ldr	r3, [sp, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d139      	bne.n	8008684 <_dtoa_r+0x80c>
 8008610:	9b01      	ldr	r3, [sp, #4]
 8008612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008616:	2b00      	cmp	r3, #0
 8008618:	d136      	bne.n	8008688 <_dtoa_r+0x810>
 800861a:	9b01      	ldr	r3, [sp, #4]
 800861c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008620:	0d1b      	lsrs	r3, r3, #20
 8008622:	051b      	lsls	r3, r3, #20
 8008624:	b12b      	cbz	r3, 8008632 <_dtoa_r+0x7ba>
 8008626:	9b05      	ldr	r3, [sp, #20]
 8008628:	3301      	adds	r3, #1
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	f108 0801 	add.w	r8, r8, #1
 8008630:	2301      	movs	r3, #1
 8008632:	9307      	str	r3, [sp, #28]
 8008634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008636:	2b00      	cmp	r3, #0
 8008638:	d12a      	bne.n	8008690 <_dtoa_r+0x818>
 800863a:	2001      	movs	r0, #1
 800863c:	e030      	b.n	80086a0 <_dtoa_r+0x828>
 800863e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008640:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008644:	e795      	b.n	8008572 <_dtoa_r+0x6fa>
 8008646:	9b07      	ldr	r3, [sp, #28]
 8008648:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800864c:	42bb      	cmp	r3, r7
 800864e:	bfbf      	itttt	lt
 8008650:	9b07      	ldrlt	r3, [sp, #28]
 8008652:	9707      	strlt	r7, [sp, #28]
 8008654:	1afa      	sublt	r2, r7, r3
 8008656:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008658:	bfbb      	ittet	lt
 800865a:	189b      	addlt	r3, r3, r2
 800865c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800865e:	1bdf      	subge	r7, r3, r7
 8008660:	2700      	movlt	r7, #0
 8008662:	f1b9 0f00 	cmp.w	r9, #0
 8008666:	bfb5      	itete	lt
 8008668:	9b05      	ldrlt	r3, [sp, #20]
 800866a:	9d05      	ldrge	r5, [sp, #20]
 800866c:	eba3 0509 	sublt.w	r5, r3, r9
 8008670:	464b      	movge	r3, r9
 8008672:	bfb8      	it	lt
 8008674:	2300      	movlt	r3, #0
 8008676:	e77e      	b.n	8008576 <_dtoa_r+0x6fe>
 8008678:	9f07      	ldr	r7, [sp, #28]
 800867a:	9d05      	ldr	r5, [sp, #20]
 800867c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800867e:	e783      	b.n	8008588 <_dtoa_r+0x710>
 8008680:	9a07      	ldr	r2, [sp, #28]
 8008682:	e7ab      	b.n	80085dc <_dtoa_r+0x764>
 8008684:	2300      	movs	r3, #0
 8008686:	e7d4      	b.n	8008632 <_dtoa_r+0x7ba>
 8008688:	9b00      	ldr	r3, [sp, #0]
 800868a:	e7d2      	b.n	8008632 <_dtoa_r+0x7ba>
 800868c:	2300      	movs	r3, #0
 800868e:	9307      	str	r3, [sp, #28]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008696:	6918      	ldr	r0, [r3, #16]
 8008698:	f000 fa47 	bl	8008b2a <__hi0bits>
 800869c:	f1c0 0020 	rsb	r0, r0, #32
 80086a0:	4440      	add	r0, r8
 80086a2:	f010 001f 	ands.w	r0, r0, #31
 80086a6:	d047      	beq.n	8008738 <_dtoa_r+0x8c0>
 80086a8:	f1c0 0320 	rsb	r3, r0, #32
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	dd3b      	ble.n	8008728 <_dtoa_r+0x8b0>
 80086b0:	9b05      	ldr	r3, [sp, #20]
 80086b2:	f1c0 001c 	rsb	r0, r0, #28
 80086b6:	4403      	add	r3, r0
 80086b8:	9305      	str	r3, [sp, #20]
 80086ba:	4405      	add	r5, r0
 80086bc:	4480      	add	r8, r0
 80086be:	9b05      	ldr	r3, [sp, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	dd05      	ble.n	80086d0 <_dtoa_r+0x858>
 80086c4:	461a      	mov	r2, r3
 80086c6:	9904      	ldr	r1, [sp, #16]
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fb69 	bl	8008da0 <__lshift>
 80086ce:	9004      	str	r0, [sp, #16]
 80086d0:	f1b8 0f00 	cmp.w	r8, #0
 80086d4:	dd05      	ble.n	80086e2 <_dtoa_r+0x86a>
 80086d6:	4639      	mov	r1, r7
 80086d8:	4642      	mov	r2, r8
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 fb60 	bl	8008da0 <__lshift>
 80086e0:	4607      	mov	r7, r0
 80086e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086e4:	b353      	cbz	r3, 800873c <_dtoa_r+0x8c4>
 80086e6:	4639      	mov	r1, r7
 80086e8:	9804      	ldr	r0, [sp, #16]
 80086ea:	f000 fbad 	bl	8008e48 <__mcmp>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	da24      	bge.n	800873c <_dtoa_r+0x8c4>
 80086f2:	2300      	movs	r3, #0
 80086f4:	220a      	movs	r2, #10
 80086f6:	9904      	ldr	r1, [sp, #16]
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 f9db 	bl	8008ab4 <__multadd>
 80086fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008700:	9004      	str	r0, [sp, #16]
 8008702:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 814d 	beq.w	80089a6 <_dtoa_r+0xb2e>
 800870c:	2300      	movs	r3, #0
 800870e:	4631      	mov	r1, r6
 8008710:	220a      	movs	r2, #10
 8008712:	4620      	mov	r0, r4
 8008714:	f000 f9ce 	bl	8008ab4 <__multadd>
 8008718:	9b02      	ldr	r3, [sp, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	4606      	mov	r6, r0
 800871e:	dc4f      	bgt.n	80087c0 <_dtoa_r+0x948>
 8008720:	9b06      	ldr	r3, [sp, #24]
 8008722:	2b02      	cmp	r3, #2
 8008724:	dd4c      	ble.n	80087c0 <_dtoa_r+0x948>
 8008726:	e011      	b.n	800874c <_dtoa_r+0x8d4>
 8008728:	d0c9      	beq.n	80086be <_dtoa_r+0x846>
 800872a:	9a05      	ldr	r2, [sp, #20]
 800872c:	331c      	adds	r3, #28
 800872e:	441a      	add	r2, r3
 8008730:	9205      	str	r2, [sp, #20]
 8008732:	441d      	add	r5, r3
 8008734:	4498      	add	r8, r3
 8008736:	e7c2      	b.n	80086be <_dtoa_r+0x846>
 8008738:	4603      	mov	r3, r0
 800873a:	e7f6      	b.n	800872a <_dtoa_r+0x8b2>
 800873c:	f1b9 0f00 	cmp.w	r9, #0
 8008740:	dc38      	bgt.n	80087b4 <_dtoa_r+0x93c>
 8008742:	9b06      	ldr	r3, [sp, #24]
 8008744:	2b02      	cmp	r3, #2
 8008746:	dd35      	ble.n	80087b4 <_dtoa_r+0x93c>
 8008748:	f8cd 9008 	str.w	r9, [sp, #8]
 800874c:	9b02      	ldr	r3, [sp, #8]
 800874e:	b963      	cbnz	r3, 800876a <_dtoa_r+0x8f2>
 8008750:	4639      	mov	r1, r7
 8008752:	2205      	movs	r2, #5
 8008754:	4620      	mov	r0, r4
 8008756:	f000 f9ad 	bl	8008ab4 <__multadd>
 800875a:	4601      	mov	r1, r0
 800875c:	4607      	mov	r7, r0
 800875e:	9804      	ldr	r0, [sp, #16]
 8008760:	f000 fb72 	bl	8008e48 <__mcmp>
 8008764:	2800      	cmp	r0, #0
 8008766:	f73f adcc 	bgt.w	8008302 <_dtoa_r+0x48a>
 800876a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800876c:	465d      	mov	r5, fp
 800876e:	ea6f 0a03 	mvn.w	sl, r3
 8008772:	f04f 0900 	mov.w	r9, #0
 8008776:	4639      	mov	r1, r7
 8008778:	4620      	mov	r0, r4
 800877a:	f000 f984 	bl	8008a86 <_Bfree>
 800877e:	2e00      	cmp	r6, #0
 8008780:	f43f aeb7 	beq.w	80084f2 <_dtoa_r+0x67a>
 8008784:	f1b9 0f00 	cmp.w	r9, #0
 8008788:	d005      	beq.n	8008796 <_dtoa_r+0x91e>
 800878a:	45b1      	cmp	r9, r6
 800878c:	d003      	beq.n	8008796 <_dtoa_r+0x91e>
 800878e:	4649      	mov	r1, r9
 8008790:	4620      	mov	r0, r4
 8008792:	f000 f978 	bl	8008a86 <_Bfree>
 8008796:	4631      	mov	r1, r6
 8008798:	4620      	mov	r0, r4
 800879a:	f000 f974 	bl	8008a86 <_Bfree>
 800879e:	e6a8      	b.n	80084f2 <_dtoa_r+0x67a>
 80087a0:	2700      	movs	r7, #0
 80087a2:	463e      	mov	r6, r7
 80087a4:	e7e1      	b.n	800876a <_dtoa_r+0x8f2>
 80087a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80087aa:	463e      	mov	r6, r7
 80087ac:	e5a9      	b.n	8008302 <_dtoa_r+0x48a>
 80087ae:	bf00      	nop
 80087b0:	40240000 	.word	0x40240000
 80087b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 80fa 	beq.w	80089b4 <_dtoa_r+0xb3c>
 80087c0:	2d00      	cmp	r5, #0
 80087c2:	dd05      	ble.n	80087d0 <_dtoa_r+0x958>
 80087c4:	4631      	mov	r1, r6
 80087c6:	462a      	mov	r2, r5
 80087c8:	4620      	mov	r0, r4
 80087ca:	f000 fae9 	bl	8008da0 <__lshift>
 80087ce:	4606      	mov	r6, r0
 80087d0:	9b07      	ldr	r3, [sp, #28]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d04c      	beq.n	8008870 <_dtoa_r+0x9f8>
 80087d6:	6871      	ldr	r1, [r6, #4]
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 f920 	bl	8008a1e <_Balloc>
 80087de:	6932      	ldr	r2, [r6, #16]
 80087e0:	3202      	adds	r2, #2
 80087e2:	4605      	mov	r5, r0
 80087e4:	0092      	lsls	r2, r2, #2
 80087e6:	f106 010c 	add.w	r1, r6, #12
 80087ea:	300c      	adds	r0, #12
 80087ec:	f000 f90a 	bl	8008a04 <memcpy>
 80087f0:	2201      	movs	r2, #1
 80087f2:	4629      	mov	r1, r5
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fad3 	bl	8008da0 <__lshift>
 80087fa:	9b00      	ldr	r3, [sp, #0]
 80087fc:	f8cd b014 	str.w	fp, [sp, #20]
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	46b1      	mov	r9, r6
 8008806:	9307      	str	r3, [sp, #28]
 8008808:	4606      	mov	r6, r0
 800880a:	4639      	mov	r1, r7
 800880c:	9804      	ldr	r0, [sp, #16]
 800880e:	f7ff faa5 	bl	8007d5c <quorem>
 8008812:	4649      	mov	r1, r9
 8008814:	4605      	mov	r5, r0
 8008816:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800881a:	9804      	ldr	r0, [sp, #16]
 800881c:	f000 fb14 	bl	8008e48 <__mcmp>
 8008820:	4632      	mov	r2, r6
 8008822:	9000      	str	r0, [sp, #0]
 8008824:	4639      	mov	r1, r7
 8008826:	4620      	mov	r0, r4
 8008828:	f000 fb28 	bl	8008e7c <__mdiff>
 800882c:	68c3      	ldr	r3, [r0, #12]
 800882e:	4602      	mov	r2, r0
 8008830:	bb03      	cbnz	r3, 8008874 <_dtoa_r+0x9fc>
 8008832:	4601      	mov	r1, r0
 8008834:	9008      	str	r0, [sp, #32]
 8008836:	9804      	ldr	r0, [sp, #16]
 8008838:	f000 fb06 	bl	8008e48 <__mcmp>
 800883c:	9a08      	ldr	r2, [sp, #32]
 800883e:	4603      	mov	r3, r0
 8008840:	4611      	mov	r1, r2
 8008842:	4620      	mov	r0, r4
 8008844:	9308      	str	r3, [sp, #32]
 8008846:	f000 f91e 	bl	8008a86 <_Bfree>
 800884a:	9b08      	ldr	r3, [sp, #32]
 800884c:	b9a3      	cbnz	r3, 8008878 <_dtoa_r+0xa00>
 800884e:	9a06      	ldr	r2, [sp, #24]
 8008850:	b992      	cbnz	r2, 8008878 <_dtoa_r+0xa00>
 8008852:	9a07      	ldr	r2, [sp, #28]
 8008854:	b982      	cbnz	r2, 8008878 <_dtoa_r+0xa00>
 8008856:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800885a:	d029      	beq.n	80088b0 <_dtoa_r+0xa38>
 800885c:	9b00      	ldr	r3, [sp, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	dd01      	ble.n	8008866 <_dtoa_r+0x9ee>
 8008862:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008866:	9b05      	ldr	r3, [sp, #20]
 8008868:	1c5d      	adds	r5, r3, #1
 800886a:	f883 8000 	strb.w	r8, [r3]
 800886e:	e782      	b.n	8008776 <_dtoa_r+0x8fe>
 8008870:	4630      	mov	r0, r6
 8008872:	e7c2      	b.n	80087fa <_dtoa_r+0x982>
 8008874:	2301      	movs	r3, #1
 8008876:	e7e3      	b.n	8008840 <_dtoa_r+0x9c8>
 8008878:	9a00      	ldr	r2, [sp, #0]
 800887a:	2a00      	cmp	r2, #0
 800887c:	db04      	blt.n	8008888 <_dtoa_r+0xa10>
 800887e:	d125      	bne.n	80088cc <_dtoa_r+0xa54>
 8008880:	9a06      	ldr	r2, [sp, #24]
 8008882:	bb1a      	cbnz	r2, 80088cc <_dtoa_r+0xa54>
 8008884:	9a07      	ldr	r2, [sp, #28]
 8008886:	bb0a      	cbnz	r2, 80088cc <_dtoa_r+0xa54>
 8008888:	2b00      	cmp	r3, #0
 800888a:	ddec      	ble.n	8008866 <_dtoa_r+0x9ee>
 800888c:	2201      	movs	r2, #1
 800888e:	9904      	ldr	r1, [sp, #16]
 8008890:	4620      	mov	r0, r4
 8008892:	f000 fa85 	bl	8008da0 <__lshift>
 8008896:	4639      	mov	r1, r7
 8008898:	9004      	str	r0, [sp, #16]
 800889a:	f000 fad5 	bl	8008e48 <__mcmp>
 800889e:	2800      	cmp	r0, #0
 80088a0:	dc03      	bgt.n	80088aa <_dtoa_r+0xa32>
 80088a2:	d1e0      	bne.n	8008866 <_dtoa_r+0x9ee>
 80088a4:	f018 0f01 	tst.w	r8, #1
 80088a8:	d0dd      	beq.n	8008866 <_dtoa_r+0x9ee>
 80088aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80088ae:	d1d8      	bne.n	8008862 <_dtoa_r+0x9ea>
 80088b0:	9b05      	ldr	r3, [sp, #20]
 80088b2:	9a05      	ldr	r2, [sp, #20]
 80088b4:	1c5d      	adds	r5, r3, #1
 80088b6:	2339      	movs	r3, #57	; 0x39
 80088b8:	7013      	strb	r3, [r2, #0]
 80088ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088be:	2b39      	cmp	r3, #57	; 0x39
 80088c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80088c4:	d04f      	beq.n	8008966 <_dtoa_r+0xaee>
 80088c6:	3301      	adds	r3, #1
 80088c8:	7013      	strb	r3, [r2, #0]
 80088ca:	e754      	b.n	8008776 <_dtoa_r+0x8fe>
 80088cc:	9a05      	ldr	r2, [sp, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f102 0501 	add.w	r5, r2, #1
 80088d4:	dd06      	ble.n	80088e4 <_dtoa_r+0xa6c>
 80088d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80088da:	d0e9      	beq.n	80088b0 <_dtoa_r+0xa38>
 80088dc:	f108 0801 	add.w	r8, r8, #1
 80088e0:	9b05      	ldr	r3, [sp, #20]
 80088e2:	e7c2      	b.n	800886a <_dtoa_r+0x9f2>
 80088e4:	9a02      	ldr	r2, [sp, #8]
 80088e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80088ea:	eba5 030b 	sub.w	r3, r5, fp
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d021      	beq.n	8008936 <_dtoa_r+0xabe>
 80088f2:	2300      	movs	r3, #0
 80088f4:	220a      	movs	r2, #10
 80088f6:	9904      	ldr	r1, [sp, #16]
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 f8db 	bl	8008ab4 <__multadd>
 80088fe:	45b1      	cmp	r9, r6
 8008900:	9004      	str	r0, [sp, #16]
 8008902:	f04f 0300 	mov.w	r3, #0
 8008906:	f04f 020a 	mov.w	r2, #10
 800890a:	4649      	mov	r1, r9
 800890c:	4620      	mov	r0, r4
 800890e:	d105      	bne.n	800891c <_dtoa_r+0xaa4>
 8008910:	f000 f8d0 	bl	8008ab4 <__multadd>
 8008914:	4681      	mov	r9, r0
 8008916:	4606      	mov	r6, r0
 8008918:	9505      	str	r5, [sp, #20]
 800891a:	e776      	b.n	800880a <_dtoa_r+0x992>
 800891c:	f000 f8ca 	bl	8008ab4 <__multadd>
 8008920:	4631      	mov	r1, r6
 8008922:	4681      	mov	r9, r0
 8008924:	2300      	movs	r3, #0
 8008926:	220a      	movs	r2, #10
 8008928:	4620      	mov	r0, r4
 800892a:	f000 f8c3 	bl	8008ab4 <__multadd>
 800892e:	4606      	mov	r6, r0
 8008930:	e7f2      	b.n	8008918 <_dtoa_r+0xaa0>
 8008932:	f04f 0900 	mov.w	r9, #0
 8008936:	2201      	movs	r2, #1
 8008938:	9904      	ldr	r1, [sp, #16]
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fa30 	bl	8008da0 <__lshift>
 8008940:	4639      	mov	r1, r7
 8008942:	9004      	str	r0, [sp, #16]
 8008944:	f000 fa80 	bl	8008e48 <__mcmp>
 8008948:	2800      	cmp	r0, #0
 800894a:	dcb6      	bgt.n	80088ba <_dtoa_r+0xa42>
 800894c:	d102      	bne.n	8008954 <_dtoa_r+0xadc>
 800894e:	f018 0f01 	tst.w	r8, #1
 8008952:	d1b2      	bne.n	80088ba <_dtoa_r+0xa42>
 8008954:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008958:	2b30      	cmp	r3, #48	; 0x30
 800895a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800895e:	f47f af0a 	bne.w	8008776 <_dtoa_r+0x8fe>
 8008962:	4615      	mov	r5, r2
 8008964:	e7f6      	b.n	8008954 <_dtoa_r+0xadc>
 8008966:	4593      	cmp	fp, r2
 8008968:	d105      	bne.n	8008976 <_dtoa_r+0xafe>
 800896a:	2331      	movs	r3, #49	; 0x31
 800896c:	f10a 0a01 	add.w	sl, sl, #1
 8008970:	f88b 3000 	strb.w	r3, [fp]
 8008974:	e6ff      	b.n	8008776 <_dtoa_r+0x8fe>
 8008976:	4615      	mov	r5, r2
 8008978:	e79f      	b.n	80088ba <_dtoa_r+0xa42>
 800897a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80089e0 <_dtoa_r+0xb68>
 800897e:	e007      	b.n	8008990 <_dtoa_r+0xb18>
 8008980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008982:	f8df b060 	ldr.w	fp, [pc, #96]	; 80089e4 <_dtoa_r+0xb6c>
 8008986:	b11b      	cbz	r3, 8008990 <_dtoa_r+0xb18>
 8008988:	f10b 0308 	add.w	r3, fp, #8
 800898c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	4658      	mov	r0, fp
 8008992:	b017      	add	sp, #92	; 0x5c
 8008994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008998:	9b06      	ldr	r3, [sp, #24]
 800899a:	2b01      	cmp	r3, #1
 800899c:	f77f ae35 	ble.w	800860a <_dtoa_r+0x792>
 80089a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a2:	9307      	str	r3, [sp, #28]
 80089a4:	e649      	b.n	800863a <_dtoa_r+0x7c2>
 80089a6:	9b02      	ldr	r3, [sp, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	dc03      	bgt.n	80089b4 <_dtoa_r+0xb3c>
 80089ac:	9b06      	ldr	r3, [sp, #24]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	f73f aecc 	bgt.w	800874c <_dtoa_r+0x8d4>
 80089b4:	465d      	mov	r5, fp
 80089b6:	4639      	mov	r1, r7
 80089b8:	9804      	ldr	r0, [sp, #16]
 80089ba:	f7ff f9cf 	bl	8007d5c <quorem>
 80089be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80089c2:	f805 8b01 	strb.w	r8, [r5], #1
 80089c6:	9a02      	ldr	r2, [sp, #8]
 80089c8:	eba5 030b 	sub.w	r3, r5, fp
 80089cc:	429a      	cmp	r2, r3
 80089ce:	ddb0      	ble.n	8008932 <_dtoa_r+0xaba>
 80089d0:	2300      	movs	r3, #0
 80089d2:	220a      	movs	r2, #10
 80089d4:	9904      	ldr	r1, [sp, #16]
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 f86c 	bl	8008ab4 <__multadd>
 80089dc:	9004      	str	r0, [sp, #16]
 80089de:	e7ea      	b.n	80089b6 <_dtoa_r+0xb3e>
 80089e0:	0807a92c 	.word	0x0807a92c
 80089e4:	0807a950 	.word	0x0807a950

080089e8 <_localeconv_r>:
 80089e8:	4b04      	ldr	r3, [pc, #16]	; (80089fc <_localeconv_r+0x14>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6a18      	ldr	r0, [r3, #32]
 80089ee:	4b04      	ldr	r3, [pc, #16]	; (8008a00 <_localeconv_r+0x18>)
 80089f0:	2800      	cmp	r0, #0
 80089f2:	bf08      	it	eq
 80089f4:	4618      	moveq	r0, r3
 80089f6:	30f0      	adds	r0, #240	; 0xf0
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	2000000c 	.word	0x2000000c
 8008a00:	20000070 	.word	0x20000070

08008a04 <memcpy>:
 8008a04:	b510      	push	{r4, lr}
 8008a06:	1e43      	subs	r3, r0, #1
 8008a08:	440a      	add	r2, r1
 8008a0a:	4291      	cmp	r1, r2
 8008a0c:	d100      	bne.n	8008a10 <memcpy+0xc>
 8008a0e:	bd10      	pop	{r4, pc}
 8008a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a18:	e7f7      	b.n	8008a0a <memcpy+0x6>

08008a1a <__malloc_lock>:
 8008a1a:	4770      	bx	lr

08008a1c <__malloc_unlock>:
 8008a1c:	4770      	bx	lr

08008a1e <_Balloc>:
 8008a1e:	b570      	push	{r4, r5, r6, lr}
 8008a20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a22:	4604      	mov	r4, r0
 8008a24:	460e      	mov	r6, r1
 8008a26:	b93d      	cbnz	r5, 8008a38 <_Balloc+0x1a>
 8008a28:	2010      	movs	r0, #16
 8008a2a:	f7fe fc43 	bl	80072b4 <malloc>
 8008a2e:	6260      	str	r0, [r4, #36]	; 0x24
 8008a30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a34:	6005      	str	r5, [r0, #0]
 8008a36:	60c5      	str	r5, [r0, #12]
 8008a38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008a3a:	68eb      	ldr	r3, [r5, #12]
 8008a3c:	b183      	cbz	r3, 8008a60 <_Balloc+0x42>
 8008a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008a46:	b9b8      	cbnz	r0, 8008a78 <_Balloc+0x5a>
 8008a48:	2101      	movs	r1, #1
 8008a4a:	fa01 f506 	lsl.w	r5, r1, r6
 8008a4e:	1d6a      	adds	r2, r5, #5
 8008a50:	0092      	lsls	r2, r2, #2
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fabe 	bl	8008fd4 <_calloc_r>
 8008a58:	b160      	cbz	r0, 8008a74 <_Balloc+0x56>
 8008a5a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008a5e:	e00e      	b.n	8008a7e <_Balloc+0x60>
 8008a60:	2221      	movs	r2, #33	; 0x21
 8008a62:	2104      	movs	r1, #4
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 fab5 	bl	8008fd4 <_calloc_r>
 8008a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a6c:	60e8      	str	r0, [r5, #12]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e4      	bne.n	8008a3e <_Balloc+0x20>
 8008a74:	2000      	movs	r0, #0
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	6802      	ldr	r2, [r0, #0]
 8008a7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a84:	e7f7      	b.n	8008a76 <_Balloc+0x58>

08008a86 <_Bfree>:
 8008a86:	b570      	push	{r4, r5, r6, lr}
 8008a88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	b93c      	cbnz	r4, 8008aa0 <_Bfree+0x1a>
 8008a90:	2010      	movs	r0, #16
 8008a92:	f7fe fc0f 	bl	80072b4 <malloc>
 8008a96:	6270      	str	r0, [r6, #36]	; 0x24
 8008a98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a9c:	6004      	str	r4, [r0, #0]
 8008a9e:	60c4      	str	r4, [r0, #12]
 8008aa0:	b13d      	cbz	r5, 8008ab2 <_Bfree+0x2c>
 8008aa2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008aa4:	686a      	ldr	r2, [r5, #4]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008aac:	6029      	str	r1, [r5, #0]
 8008aae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}

08008ab4 <__multadd>:
 8008ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	690d      	ldr	r5, [r1, #16]
 8008aba:	461f      	mov	r7, r3
 8008abc:	4606      	mov	r6, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	f101 0c14 	add.w	ip, r1, #20
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f8dc 0000 	ldr.w	r0, [ip]
 8008aca:	b281      	uxth	r1, r0
 8008acc:	fb02 7101 	mla	r1, r2, r1, r7
 8008ad0:	0c0f      	lsrs	r7, r1, #16
 8008ad2:	0c00      	lsrs	r0, r0, #16
 8008ad4:	fb02 7000 	mla	r0, r2, r0, r7
 8008ad8:	b289      	uxth	r1, r1
 8008ada:	3301      	adds	r3, #1
 8008adc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008ae0:	429d      	cmp	r5, r3
 8008ae2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008ae6:	f84c 1b04 	str.w	r1, [ip], #4
 8008aea:	dcec      	bgt.n	8008ac6 <__multadd+0x12>
 8008aec:	b1d7      	cbz	r7, 8008b24 <__multadd+0x70>
 8008aee:	68a3      	ldr	r3, [r4, #8]
 8008af0:	42ab      	cmp	r3, r5
 8008af2:	dc12      	bgt.n	8008b1a <__multadd+0x66>
 8008af4:	6861      	ldr	r1, [r4, #4]
 8008af6:	4630      	mov	r0, r6
 8008af8:	3101      	adds	r1, #1
 8008afa:	f7ff ff90 	bl	8008a1e <_Balloc>
 8008afe:	6922      	ldr	r2, [r4, #16]
 8008b00:	3202      	adds	r2, #2
 8008b02:	f104 010c 	add.w	r1, r4, #12
 8008b06:	4680      	mov	r8, r0
 8008b08:	0092      	lsls	r2, r2, #2
 8008b0a:	300c      	adds	r0, #12
 8008b0c:	f7ff ff7a 	bl	8008a04 <memcpy>
 8008b10:	4621      	mov	r1, r4
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7ff ffb7 	bl	8008a86 <_Bfree>
 8008b18:	4644      	mov	r4, r8
 8008b1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b1e:	3501      	adds	r5, #1
 8008b20:	615f      	str	r7, [r3, #20]
 8008b22:	6125      	str	r5, [r4, #16]
 8008b24:	4620      	mov	r0, r4
 8008b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b2a <__hi0bits>:
 8008b2a:	0c02      	lsrs	r2, r0, #16
 8008b2c:	0412      	lsls	r2, r2, #16
 8008b2e:	4603      	mov	r3, r0
 8008b30:	b9b2      	cbnz	r2, 8008b60 <__hi0bits+0x36>
 8008b32:	0403      	lsls	r3, r0, #16
 8008b34:	2010      	movs	r0, #16
 8008b36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b3a:	bf04      	itt	eq
 8008b3c:	021b      	lsleq	r3, r3, #8
 8008b3e:	3008      	addeq	r0, #8
 8008b40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b44:	bf04      	itt	eq
 8008b46:	011b      	lsleq	r3, r3, #4
 8008b48:	3004      	addeq	r0, #4
 8008b4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b4e:	bf04      	itt	eq
 8008b50:	009b      	lsleq	r3, r3, #2
 8008b52:	3002      	addeq	r0, #2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	db06      	blt.n	8008b66 <__hi0bits+0x3c>
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	d503      	bpl.n	8008b64 <__hi0bits+0x3a>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	4770      	bx	lr
 8008b60:	2000      	movs	r0, #0
 8008b62:	e7e8      	b.n	8008b36 <__hi0bits+0xc>
 8008b64:	2020      	movs	r0, #32
 8008b66:	4770      	bx	lr

08008b68 <__lo0bits>:
 8008b68:	6803      	ldr	r3, [r0, #0]
 8008b6a:	f013 0207 	ands.w	r2, r3, #7
 8008b6e:	4601      	mov	r1, r0
 8008b70:	d00b      	beq.n	8008b8a <__lo0bits+0x22>
 8008b72:	07da      	lsls	r2, r3, #31
 8008b74:	d423      	bmi.n	8008bbe <__lo0bits+0x56>
 8008b76:	0798      	lsls	r0, r3, #30
 8008b78:	bf49      	itett	mi
 8008b7a:	085b      	lsrmi	r3, r3, #1
 8008b7c:	089b      	lsrpl	r3, r3, #2
 8008b7e:	2001      	movmi	r0, #1
 8008b80:	600b      	strmi	r3, [r1, #0]
 8008b82:	bf5c      	itt	pl
 8008b84:	600b      	strpl	r3, [r1, #0]
 8008b86:	2002      	movpl	r0, #2
 8008b88:	4770      	bx	lr
 8008b8a:	b298      	uxth	r0, r3
 8008b8c:	b9a8      	cbnz	r0, 8008bba <__lo0bits+0x52>
 8008b8e:	0c1b      	lsrs	r3, r3, #16
 8008b90:	2010      	movs	r0, #16
 8008b92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b96:	bf04      	itt	eq
 8008b98:	0a1b      	lsreq	r3, r3, #8
 8008b9a:	3008      	addeq	r0, #8
 8008b9c:	071a      	lsls	r2, r3, #28
 8008b9e:	bf04      	itt	eq
 8008ba0:	091b      	lsreq	r3, r3, #4
 8008ba2:	3004      	addeq	r0, #4
 8008ba4:	079a      	lsls	r2, r3, #30
 8008ba6:	bf04      	itt	eq
 8008ba8:	089b      	lsreq	r3, r3, #2
 8008baa:	3002      	addeq	r0, #2
 8008bac:	07da      	lsls	r2, r3, #31
 8008bae:	d402      	bmi.n	8008bb6 <__lo0bits+0x4e>
 8008bb0:	085b      	lsrs	r3, r3, #1
 8008bb2:	d006      	beq.n	8008bc2 <__lo0bits+0x5a>
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	600b      	str	r3, [r1, #0]
 8008bb8:	4770      	bx	lr
 8008bba:	4610      	mov	r0, r2
 8008bbc:	e7e9      	b.n	8008b92 <__lo0bits+0x2a>
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	4770      	bx	lr
 8008bc2:	2020      	movs	r0, #32
 8008bc4:	4770      	bx	lr

08008bc6 <__i2b>:
 8008bc6:	b510      	push	{r4, lr}
 8008bc8:	460c      	mov	r4, r1
 8008bca:	2101      	movs	r1, #1
 8008bcc:	f7ff ff27 	bl	8008a1e <_Balloc>
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	6144      	str	r4, [r0, #20]
 8008bd4:	6102      	str	r2, [r0, #16]
 8008bd6:	bd10      	pop	{r4, pc}

08008bd8 <__multiply>:
 8008bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	4614      	mov	r4, r2
 8008bde:	690a      	ldr	r2, [r1, #16]
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	bfb8      	it	lt
 8008be6:	460b      	movlt	r3, r1
 8008be8:	4688      	mov	r8, r1
 8008bea:	bfbc      	itt	lt
 8008bec:	46a0      	movlt	r8, r4
 8008bee:	461c      	movlt	r4, r3
 8008bf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008bf4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008bf8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c00:	eb07 0609 	add.w	r6, r7, r9
 8008c04:	42b3      	cmp	r3, r6
 8008c06:	bfb8      	it	lt
 8008c08:	3101      	addlt	r1, #1
 8008c0a:	f7ff ff08 	bl	8008a1e <_Balloc>
 8008c0e:	f100 0514 	add.w	r5, r0, #20
 8008c12:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008c16:	462b      	mov	r3, r5
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4573      	cmp	r3, lr
 8008c1c:	d316      	bcc.n	8008c4c <__multiply+0x74>
 8008c1e:	f104 0214 	add.w	r2, r4, #20
 8008c22:	f108 0114 	add.w	r1, r8, #20
 8008c26:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008c2a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	9b00      	ldr	r3, [sp, #0]
 8008c32:	9201      	str	r2, [sp, #4]
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d80c      	bhi.n	8008c52 <__multiply+0x7a>
 8008c38:	2e00      	cmp	r6, #0
 8008c3a:	dd03      	ble.n	8008c44 <__multiply+0x6c>
 8008c3c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d05d      	beq.n	8008d00 <__multiply+0x128>
 8008c44:	6106      	str	r6, [r0, #16]
 8008c46:	b003      	add	sp, #12
 8008c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4c:	f843 2b04 	str.w	r2, [r3], #4
 8008c50:	e7e3      	b.n	8008c1a <__multiply+0x42>
 8008c52:	f8b2 b000 	ldrh.w	fp, [r2]
 8008c56:	f1bb 0f00 	cmp.w	fp, #0
 8008c5a:	d023      	beq.n	8008ca4 <__multiply+0xcc>
 8008c5c:	4689      	mov	r9, r1
 8008c5e:	46ac      	mov	ip, r5
 8008c60:	f04f 0800 	mov.w	r8, #0
 8008c64:	f859 4b04 	ldr.w	r4, [r9], #4
 8008c68:	f8dc a000 	ldr.w	sl, [ip]
 8008c6c:	b2a3      	uxth	r3, r4
 8008c6e:	fa1f fa8a 	uxth.w	sl, sl
 8008c72:	fb0b a303 	mla	r3, fp, r3, sl
 8008c76:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c7a:	f8dc 4000 	ldr.w	r4, [ip]
 8008c7e:	4443      	add	r3, r8
 8008c80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c84:	fb0b 840a 	mla	r4, fp, sl, r8
 8008c88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008c8c:	46e2      	mov	sl, ip
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c94:	454f      	cmp	r7, r9
 8008c96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c9a:	f84a 3b04 	str.w	r3, [sl], #4
 8008c9e:	d82b      	bhi.n	8008cf8 <__multiply+0x120>
 8008ca0:	f8cc 8004 	str.w	r8, [ip, #4]
 8008ca4:	9b01      	ldr	r3, [sp, #4]
 8008ca6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008caa:	3204      	adds	r2, #4
 8008cac:	f1ba 0f00 	cmp.w	sl, #0
 8008cb0:	d020      	beq.n	8008cf4 <__multiply+0x11c>
 8008cb2:	682b      	ldr	r3, [r5, #0]
 8008cb4:	4689      	mov	r9, r1
 8008cb6:	46a8      	mov	r8, r5
 8008cb8:	f04f 0b00 	mov.w	fp, #0
 8008cbc:	f8b9 c000 	ldrh.w	ip, [r9]
 8008cc0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008cc4:	fb0a 440c 	mla	r4, sl, ip, r4
 8008cc8:	445c      	add	r4, fp
 8008cca:	46c4      	mov	ip, r8
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008cd2:	f84c 3b04 	str.w	r3, [ip], #4
 8008cd6:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cda:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008cde:	0c1b      	lsrs	r3, r3, #16
 8008ce0:	fb0a b303 	mla	r3, sl, r3, fp
 8008ce4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008ce8:	454f      	cmp	r7, r9
 8008cea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008cee:	d805      	bhi.n	8008cfc <__multiply+0x124>
 8008cf0:	f8c8 3004 	str.w	r3, [r8, #4]
 8008cf4:	3504      	adds	r5, #4
 8008cf6:	e79b      	b.n	8008c30 <__multiply+0x58>
 8008cf8:	46d4      	mov	ip, sl
 8008cfa:	e7b3      	b.n	8008c64 <__multiply+0x8c>
 8008cfc:	46e0      	mov	r8, ip
 8008cfe:	e7dd      	b.n	8008cbc <__multiply+0xe4>
 8008d00:	3e01      	subs	r6, #1
 8008d02:	e799      	b.n	8008c38 <__multiply+0x60>

08008d04 <__pow5mult>:
 8008d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d08:	4615      	mov	r5, r2
 8008d0a:	f012 0203 	ands.w	r2, r2, #3
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460f      	mov	r7, r1
 8008d12:	d007      	beq.n	8008d24 <__pow5mult+0x20>
 8008d14:	3a01      	subs	r2, #1
 8008d16:	4c21      	ldr	r4, [pc, #132]	; (8008d9c <__pow5mult+0x98>)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d1e:	f7ff fec9 	bl	8008ab4 <__multadd>
 8008d22:	4607      	mov	r7, r0
 8008d24:	10ad      	asrs	r5, r5, #2
 8008d26:	d035      	beq.n	8008d94 <__pow5mult+0x90>
 8008d28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d2a:	b93c      	cbnz	r4, 8008d3c <__pow5mult+0x38>
 8008d2c:	2010      	movs	r0, #16
 8008d2e:	f7fe fac1 	bl	80072b4 <malloc>
 8008d32:	6270      	str	r0, [r6, #36]	; 0x24
 8008d34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d38:	6004      	str	r4, [r0, #0]
 8008d3a:	60c4      	str	r4, [r0, #12]
 8008d3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d44:	b94c      	cbnz	r4, 8008d5a <__pow5mult+0x56>
 8008d46:	f240 2171 	movw	r1, #625	; 0x271
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7ff ff3b 	bl	8008bc6 <__i2b>
 8008d50:	2300      	movs	r3, #0
 8008d52:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d56:	4604      	mov	r4, r0
 8008d58:	6003      	str	r3, [r0, #0]
 8008d5a:	f04f 0800 	mov.w	r8, #0
 8008d5e:	07eb      	lsls	r3, r5, #31
 8008d60:	d50a      	bpl.n	8008d78 <__pow5mult+0x74>
 8008d62:	4639      	mov	r1, r7
 8008d64:	4622      	mov	r2, r4
 8008d66:	4630      	mov	r0, r6
 8008d68:	f7ff ff36 	bl	8008bd8 <__multiply>
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	4681      	mov	r9, r0
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7ff fe88 	bl	8008a86 <_Bfree>
 8008d76:	464f      	mov	r7, r9
 8008d78:	106d      	asrs	r5, r5, #1
 8008d7a:	d00b      	beq.n	8008d94 <__pow5mult+0x90>
 8008d7c:	6820      	ldr	r0, [r4, #0]
 8008d7e:	b938      	cbnz	r0, 8008d90 <__pow5mult+0x8c>
 8008d80:	4622      	mov	r2, r4
 8008d82:	4621      	mov	r1, r4
 8008d84:	4630      	mov	r0, r6
 8008d86:	f7ff ff27 	bl	8008bd8 <__multiply>
 8008d8a:	6020      	str	r0, [r4, #0]
 8008d8c:	f8c0 8000 	str.w	r8, [r0]
 8008d90:	4604      	mov	r4, r0
 8008d92:	e7e4      	b.n	8008d5e <__pow5mult+0x5a>
 8008d94:	4638      	mov	r0, r7
 8008d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d9a:	bf00      	nop
 8008d9c:	0807aa50 	.word	0x0807aa50

08008da0 <__lshift>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	460c      	mov	r4, r1
 8008da6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	6849      	ldr	r1, [r1, #4]
 8008dae:	eb0a 0903 	add.w	r9, sl, r3
 8008db2:	68a3      	ldr	r3, [r4, #8]
 8008db4:	4607      	mov	r7, r0
 8008db6:	4616      	mov	r6, r2
 8008db8:	f109 0501 	add.w	r5, r9, #1
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	db32      	blt.n	8008e26 <__lshift+0x86>
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f7ff fe2c 	bl	8008a1e <_Balloc>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	4680      	mov	r8, r0
 8008dca:	f100 0114 	add.w	r1, r0, #20
 8008dce:	461a      	mov	r2, r3
 8008dd0:	4553      	cmp	r3, sl
 8008dd2:	db2b      	blt.n	8008e2c <__lshift+0x8c>
 8008dd4:	6920      	ldr	r0, [r4, #16]
 8008dd6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dda:	f104 0314 	add.w	r3, r4, #20
 8008dde:	f016 021f 	ands.w	r2, r6, #31
 8008de2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008de6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dea:	d025      	beq.n	8008e38 <__lshift+0x98>
 8008dec:	f1c2 0e20 	rsb	lr, r2, #32
 8008df0:	2000      	movs	r0, #0
 8008df2:	681e      	ldr	r6, [r3, #0]
 8008df4:	468a      	mov	sl, r1
 8008df6:	4096      	lsls	r6, r2
 8008df8:	4330      	orrs	r0, r6
 8008dfa:	f84a 0b04 	str.w	r0, [sl], #4
 8008dfe:	f853 0b04 	ldr.w	r0, [r3], #4
 8008e02:	459c      	cmp	ip, r3
 8008e04:	fa20 f00e 	lsr.w	r0, r0, lr
 8008e08:	d814      	bhi.n	8008e34 <__lshift+0x94>
 8008e0a:	6048      	str	r0, [r1, #4]
 8008e0c:	b108      	cbz	r0, 8008e12 <__lshift+0x72>
 8008e0e:	f109 0502 	add.w	r5, r9, #2
 8008e12:	3d01      	subs	r5, #1
 8008e14:	4638      	mov	r0, r7
 8008e16:	f8c8 5010 	str.w	r5, [r8, #16]
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	f7ff fe33 	bl	8008a86 <_Bfree>
 8008e20:	4640      	mov	r0, r8
 8008e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e26:	3101      	adds	r1, #1
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	e7c7      	b.n	8008dbc <__lshift+0x1c>
 8008e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008e30:	3301      	adds	r3, #1
 8008e32:	e7cd      	b.n	8008dd0 <__lshift+0x30>
 8008e34:	4651      	mov	r1, sl
 8008e36:	e7dc      	b.n	8008df2 <__lshift+0x52>
 8008e38:	3904      	subs	r1, #4
 8008e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e42:	459c      	cmp	ip, r3
 8008e44:	d8f9      	bhi.n	8008e3a <__lshift+0x9a>
 8008e46:	e7e4      	b.n	8008e12 <__lshift+0x72>

08008e48 <__mcmp>:
 8008e48:	6903      	ldr	r3, [r0, #16]
 8008e4a:	690a      	ldr	r2, [r1, #16]
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	b530      	push	{r4, r5, lr}
 8008e50:	d10c      	bne.n	8008e6c <__mcmp+0x24>
 8008e52:	0092      	lsls	r2, r2, #2
 8008e54:	3014      	adds	r0, #20
 8008e56:	3114      	adds	r1, #20
 8008e58:	1884      	adds	r4, r0, r2
 8008e5a:	4411      	add	r1, r2
 8008e5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e64:	4295      	cmp	r5, r2
 8008e66:	d003      	beq.n	8008e70 <__mcmp+0x28>
 8008e68:	d305      	bcc.n	8008e76 <__mcmp+0x2e>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	bd30      	pop	{r4, r5, pc}
 8008e70:	42a0      	cmp	r0, r4
 8008e72:	d3f3      	bcc.n	8008e5c <__mcmp+0x14>
 8008e74:	e7fa      	b.n	8008e6c <__mcmp+0x24>
 8008e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e7a:	e7f7      	b.n	8008e6c <__mcmp+0x24>

08008e7c <__mdiff>:
 8008e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e80:	460d      	mov	r5, r1
 8008e82:	4607      	mov	r7, r0
 8008e84:	4611      	mov	r1, r2
 8008e86:	4628      	mov	r0, r5
 8008e88:	4614      	mov	r4, r2
 8008e8a:	f7ff ffdd 	bl	8008e48 <__mcmp>
 8008e8e:	1e06      	subs	r6, r0, #0
 8008e90:	d108      	bne.n	8008ea4 <__mdiff+0x28>
 8008e92:	4631      	mov	r1, r6
 8008e94:	4638      	mov	r0, r7
 8008e96:	f7ff fdc2 	bl	8008a1e <_Balloc>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea4:	bfa4      	itt	ge
 8008ea6:	4623      	movge	r3, r4
 8008ea8:	462c      	movge	r4, r5
 8008eaa:	4638      	mov	r0, r7
 8008eac:	6861      	ldr	r1, [r4, #4]
 8008eae:	bfa6      	itte	ge
 8008eb0:	461d      	movge	r5, r3
 8008eb2:	2600      	movge	r6, #0
 8008eb4:	2601      	movlt	r6, #1
 8008eb6:	f7ff fdb2 	bl	8008a1e <_Balloc>
 8008eba:	692b      	ldr	r3, [r5, #16]
 8008ebc:	60c6      	str	r6, [r0, #12]
 8008ebe:	6926      	ldr	r6, [r4, #16]
 8008ec0:	f105 0914 	add.w	r9, r5, #20
 8008ec4:	f104 0214 	add.w	r2, r4, #20
 8008ec8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008ecc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008ed0:	f100 0514 	add.w	r5, r0, #20
 8008ed4:	f04f 0e00 	mov.w	lr, #0
 8008ed8:	f852 ab04 	ldr.w	sl, [r2], #4
 8008edc:	f859 4b04 	ldr.w	r4, [r9], #4
 8008ee0:	fa1e f18a 	uxtah	r1, lr, sl
 8008ee4:	b2a3      	uxth	r3, r4
 8008ee6:	1ac9      	subs	r1, r1, r3
 8008ee8:	0c23      	lsrs	r3, r4, #16
 8008eea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008eee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008ef2:	b289      	uxth	r1, r1
 8008ef4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008ef8:	45c8      	cmp	r8, r9
 8008efa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008efe:	4694      	mov	ip, r2
 8008f00:	f845 3b04 	str.w	r3, [r5], #4
 8008f04:	d8e8      	bhi.n	8008ed8 <__mdiff+0x5c>
 8008f06:	45bc      	cmp	ip, r7
 8008f08:	d304      	bcc.n	8008f14 <__mdiff+0x98>
 8008f0a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008f0e:	b183      	cbz	r3, 8008f32 <__mdiff+0xb6>
 8008f10:	6106      	str	r6, [r0, #16]
 8008f12:	e7c5      	b.n	8008ea0 <__mdiff+0x24>
 8008f14:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008f18:	fa1e f381 	uxtah	r3, lr, r1
 8008f1c:	141a      	asrs	r2, r3, #16
 8008f1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f28:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008f2c:	f845 3b04 	str.w	r3, [r5], #4
 8008f30:	e7e9      	b.n	8008f06 <__mdiff+0x8a>
 8008f32:	3e01      	subs	r6, #1
 8008f34:	e7e9      	b.n	8008f0a <__mdiff+0x8e>

08008f36 <__d2b>:
 8008f36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f3a:	460e      	mov	r6, r1
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	ec59 8b10 	vmov	r8, r9, d0
 8008f42:	4615      	mov	r5, r2
 8008f44:	f7ff fd6b 	bl	8008a1e <_Balloc>
 8008f48:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f52:	bb34      	cbnz	r4, 8008fa2 <__d2b+0x6c>
 8008f54:	9301      	str	r3, [sp, #4]
 8008f56:	f1b8 0300 	subs.w	r3, r8, #0
 8008f5a:	d027      	beq.n	8008fac <__d2b+0x76>
 8008f5c:	a802      	add	r0, sp, #8
 8008f5e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008f62:	f7ff fe01 	bl	8008b68 <__lo0bits>
 8008f66:	9900      	ldr	r1, [sp, #0]
 8008f68:	b1f0      	cbz	r0, 8008fa8 <__d2b+0x72>
 8008f6a:	9a01      	ldr	r2, [sp, #4]
 8008f6c:	f1c0 0320 	rsb	r3, r0, #32
 8008f70:	fa02 f303 	lsl.w	r3, r2, r3
 8008f74:	430b      	orrs	r3, r1
 8008f76:	40c2      	lsrs	r2, r0
 8008f78:	617b      	str	r3, [r7, #20]
 8008f7a:	9201      	str	r2, [sp, #4]
 8008f7c:	9b01      	ldr	r3, [sp, #4]
 8008f7e:	61bb      	str	r3, [r7, #24]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	bf14      	ite	ne
 8008f84:	2102      	movne	r1, #2
 8008f86:	2101      	moveq	r1, #1
 8008f88:	6139      	str	r1, [r7, #16]
 8008f8a:	b1c4      	cbz	r4, 8008fbe <__d2b+0x88>
 8008f8c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008f90:	4404      	add	r4, r0
 8008f92:	6034      	str	r4, [r6, #0]
 8008f94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f98:	6028      	str	r0, [r5, #0]
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	b003      	add	sp, #12
 8008f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fa6:	e7d5      	b.n	8008f54 <__d2b+0x1e>
 8008fa8:	6179      	str	r1, [r7, #20]
 8008faa:	e7e7      	b.n	8008f7c <__d2b+0x46>
 8008fac:	a801      	add	r0, sp, #4
 8008fae:	f7ff fddb 	bl	8008b68 <__lo0bits>
 8008fb2:	9b01      	ldr	r3, [sp, #4]
 8008fb4:	617b      	str	r3, [r7, #20]
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	6139      	str	r1, [r7, #16]
 8008fba:	3020      	adds	r0, #32
 8008fbc:	e7e5      	b.n	8008f8a <__d2b+0x54>
 8008fbe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008fc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fc6:	6030      	str	r0, [r6, #0]
 8008fc8:	6918      	ldr	r0, [r3, #16]
 8008fca:	f7ff fdae 	bl	8008b2a <__hi0bits>
 8008fce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008fd2:	e7e1      	b.n	8008f98 <__d2b+0x62>

08008fd4 <_calloc_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	fb02 f401 	mul.w	r4, r2, r1
 8008fda:	4621      	mov	r1, r4
 8008fdc:	f7fe f9d0 	bl	8007380 <_malloc_r>
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	b118      	cbz	r0, 8008fec <_calloc_r+0x18>
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	f7fe f974 	bl	80072d4 <memset>
 8008fec:	4628      	mov	r0, r5
 8008fee:	bd38      	pop	{r3, r4, r5, pc}

08008ff0 <__ssputs_r>:
 8008ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff4:	688e      	ldr	r6, [r1, #8]
 8008ff6:	429e      	cmp	r6, r3
 8008ff8:	4682      	mov	sl, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	4690      	mov	r8, r2
 8008ffe:	4699      	mov	r9, r3
 8009000:	d837      	bhi.n	8009072 <__ssputs_r+0x82>
 8009002:	898a      	ldrh	r2, [r1, #12]
 8009004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009008:	d031      	beq.n	800906e <__ssputs_r+0x7e>
 800900a:	6825      	ldr	r5, [r4, #0]
 800900c:	6909      	ldr	r1, [r1, #16]
 800900e:	1a6f      	subs	r7, r5, r1
 8009010:	6965      	ldr	r5, [r4, #20]
 8009012:	2302      	movs	r3, #2
 8009014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009018:	fb95 f5f3 	sdiv	r5, r5, r3
 800901c:	f109 0301 	add.w	r3, r9, #1
 8009020:	443b      	add	r3, r7
 8009022:	429d      	cmp	r5, r3
 8009024:	bf38      	it	cc
 8009026:	461d      	movcc	r5, r3
 8009028:	0553      	lsls	r3, r2, #21
 800902a:	d530      	bpl.n	800908e <__ssputs_r+0x9e>
 800902c:	4629      	mov	r1, r5
 800902e:	f7fe f9a7 	bl	8007380 <_malloc_r>
 8009032:	4606      	mov	r6, r0
 8009034:	b950      	cbnz	r0, 800904c <__ssputs_r+0x5c>
 8009036:	230c      	movs	r3, #12
 8009038:	f8ca 3000 	str.w	r3, [sl]
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904c:	463a      	mov	r2, r7
 800904e:	6921      	ldr	r1, [r4, #16]
 8009050:	f7ff fcd8 	bl	8008a04 <memcpy>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800905a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	6126      	str	r6, [r4, #16]
 8009062:	6165      	str	r5, [r4, #20]
 8009064:	443e      	add	r6, r7
 8009066:	1bed      	subs	r5, r5, r7
 8009068:	6026      	str	r6, [r4, #0]
 800906a:	60a5      	str	r5, [r4, #8]
 800906c:	464e      	mov	r6, r9
 800906e:	454e      	cmp	r6, r9
 8009070:	d900      	bls.n	8009074 <__ssputs_r+0x84>
 8009072:	464e      	mov	r6, r9
 8009074:	4632      	mov	r2, r6
 8009076:	4641      	mov	r1, r8
 8009078:	6820      	ldr	r0, [r4, #0]
 800907a:	f000 f91d 	bl	80092b8 <memmove>
 800907e:	68a3      	ldr	r3, [r4, #8]
 8009080:	1b9b      	subs	r3, r3, r6
 8009082:	60a3      	str	r3, [r4, #8]
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	441e      	add	r6, r3
 8009088:	6026      	str	r6, [r4, #0]
 800908a:	2000      	movs	r0, #0
 800908c:	e7dc      	b.n	8009048 <__ssputs_r+0x58>
 800908e:	462a      	mov	r2, r5
 8009090:	f000 f92b 	bl	80092ea <_realloc_r>
 8009094:	4606      	mov	r6, r0
 8009096:	2800      	cmp	r0, #0
 8009098:	d1e2      	bne.n	8009060 <__ssputs_r+0x70>
 800909a:	6921      	ldr	r1, [r4, #16]
 800909c:	4650      	mov	r0, sl
 800909e:	f7fe f921 	bl	80072e4 <_free_r>
 80090a2:	e7c8      	b.n	8009036 <__ssputs_r+0x46>

080090a4 <_svfiprintf_r>:
 80090a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	461d      	mov	r5, r3
 80090aa:	898b      	ldrh	r3, [r1, #12]
 80090ac:	061f      	lsls	r7, r3, #24
 80090ae:	b09d      	sub	sp, #116	; 0x74
 80090b0:	4680      	mov	r8, r0
 80090b2:	460c      	mov	r4, r1
 80090b4:	4616      	mov	r6, r2
 80090b6:	d50f      	bpl.n	80090d8 <_svfiprintf_r+0x34>
 80090b8:	690b      	ldr	r3, [r1, #16]
 80090ba:	b96b      	cbnz	r3, 80090d8 <_svfiprintf_r+0x34>
 80090bc:	2140      	movs	r1, #64	; 0x40
 80090be:	f7fe f95f 	bl	8007380 <_malloc_r>
 80090c2:	6020      	str	r0, [r4, #0]
 80090c4:	6120      	str	r0, [r4, #16]
 80090c6:	b928      	cbnz	r0, 80090d4 <_svfiprintf_r+0x30>
 80090c8:	230c      	movs	r3, #12
 80090ca:	f8c8 3000 	str.w	r3, [r8]
 80090ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090d2:	e0c8      	b.n	8009266 <_svfiprintf_r+0x1c2>
 80090d4:	2340      	movs	r3, #64	; 0x40
 80090d6:	6163      	str	r3, [r4, #20]
 80090d8:	2300      	movs	r3, #0
 80090da:	9309      	str	r3, [sp, #36]	; 0x24
 80090dc:	2320      	movs	r3, #32
 80090de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090e2:	2330      	movs	r3, #48	; 0x30
 80090e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090e8:	9503      	str	r5, [sp, #12]
 80090ea:	f04f 0b01 	mov.w	fp, #1
 80090ee:	4637      	mov	r7, r6
 80090f0:	463d      	mov	r5, r7
 80090f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090f6:	b10b      	cbz	r3, 80090fc <_svfiprintf_r+0x58>
 80090f8:	2b25      	cmp	r3, #37	; 0x25
 80090fa:	d13e      	bne.n	800917a <_svfiprintf_r+0xd6>
 80090fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009100:	d00b      	beq.n	800911a <_svfiprintf_r+0x76>
 8009102:	4653      	mov	r3, sl
 8009104:	4632      	mov	r2, r6
 8009106:	4621      	mov	r1, r4
 8009108:	4640      	mov	r0, r8
 800910a:	f7ff ff71 	bl	8008ff0 <__ssputs_r>
 800910e:	3001      	adds	r0, #1
 8009110:	f000 80a4 	beq.w	800925c <_svfiprintf_r+0x1b8>
 8009114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009116:	4453      	add	r3, sl
 8009118:	9309      	str	r3, [sp, #36]	; 0x24
 800911a:	783b      	ldrb	r3, [r7, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 809d 	beq.w	800925c <_svfiprintf_r+0x1b8>
 8009122:	2300      	movs	r3, #0
 8009124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	9307      	str	r3, [sp, #28]
 8009130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009134:	931a      	str	r3, [sp, #104]	; 0x68
 8009136:	462f      	mov	r7, r5
 8009138:	2205      	movs	r2, #5
 800913a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800913e:	4850      	ldr	r0, [pc, #320]	; (8009280 <_svfiprintf_r+0x1dc>)
 8009140:	f7f7 f84e 	bl	80001e0 <memchr>
 8009144:	9b04      	ldr	r3, [sp, #16]
 8009146:	b9d0      	cbnz	r0, 800917e <_svfiprintf_r+0xda>
 8009148:	06d9      	lsls	r1, r3, #27
 800914a:	bf44      	itt	mi
 800914c:	2220      	movmi	r2, #32
 800914e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009152:	071a      	lsls	r2, r3, #28
 8009154:	bf44      	itt	mi
 8009156:	222b      	movmi	r2, #43	; 0x2b
 8009158:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800915c:	782a      	ldrb	r2, [r5, #0]
 800915e:	2a2a      	cmp	r2, #42	; 0x2a
 8009160:	d015      	beq.n	800918e <_svfiprintf_r+0xea>
 8009162:	9a07      	ldr	r2, [sp, #28]
 8009164:	462f      	mov	r7, r5
 8009166:	2000      	movs	r0, #0
 8009168:	250a      	movs	r5, #10
 800916a:	4639      	mov	r1, r7
 800916c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009170:	3b30      	subs	r3, #48	; 0x30
 8009172:	2b09      	cmp	r3, #9
 8009174:	d94d      	bls.n	8009212 <_svfiprintf_r+0x16e>
 8009176:	b1b8      	cbz	r0, 80091a8 <_svfiprintf_r+0x104>
 8009178:	e00f      	b.n	800919a <_svfiprintf_r+0xf6>
 800917a:	462f      	mov	r7, r5
 800917c:	e7b8      	b.n	80090f0 <_svfiprintf_r+0x4c>
 800917e:	4a40      	ldr	r2, [pc, #256]	; (8009280 <_svfiprintf_r+0x1dc>)
 8009180:	1a80      	subs	r0, r0, r2
 8009182:	fa0b f000 	lsl.w	r0, fp, r0
 8009186:	4318      	orrs	r0, r3
 8009188:	9004      	str	r0, [sp, #16]
 800918a:	463d      	mov	r5, r7
 800918c:	e7d3      	b.n	8009136 <_svfiprintf_r+0x92>
 800918e:	9a03      	ldr	r2, [sp, #12]
 8009190:	1d11      	adds	r1, r2, #4
 8009192:	6812      	ldr	r2, [r2, #0]
 8009194:	9103      	str	r1, [sp, #12]
 8009196:	2a00      	cmp	r2, #0
 8009198:	db01      	blt.n	800919e <_svfiprintf_r+0xfa>
 800919a:	9207      	str	r2, [sp, #28]
 800919c:	e004      	b.n	80091a8 <_svfiprintf_r+0x104>
 800919e:	4252      	negs	r2, r2
 80091a0:	f043 0302 	orr.w	r3, r3, #2
 80091a4:	9207      	str	r2, [sp, #28]
 80091a6:	9304      	str	r3, [sp, #16]
 80091a8:	783b      	ldrb	r3, [r7, #0]
 80091aa:	2b2e      	cmp	r3, #46	; 0x2e
 80091ac:	d10c      	bne.n	80091c8 <_svfiprintf_r+0x124>
 80091ae:	787b      	ldrb	r3, [r7, #1]
 80091b0:	2b2a      	cmp	r3, #42	; 0x2a
 80091b2:	d133      	bne.n	800921c <_svfiprintf_r+0x178>
 80091b4:	9b03      	ldr	r3, [sp, #12]
 80091b6:	1d1a      	adds	r2, r3, #4
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	9203      	str	r2, [sp, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	bfb8      	it	lt
 80091c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80091c4:	3702      	adds	r7, #2
 80091c6:	9305      	str	r3, [sp, #20]
 80091c8:	4d2e      	ldr	r5, [pc, #184]	; (8009284 <_svfiprintf_r+0x1e0>)
 80091ca:	7839      	ldrb	r1, [r7, #0]
 80091cc:	2203      	movs	r2, #3
 80091ce:	4628      	mov	r0, r5
 80091d0:	f7f7 f806 	bl	80001e0 <memchr>
 80091d4:	b138      	cbz	r0, 80091e6 <_svfiprintf_r+0x142>
 80091d6:	2340      	movs	r3, #64	; 0x40
 80091d8:	1b40      	subs	r0, r0, r5
 80091da:	fa03 f000 	lsl.w	r0, r3, r0
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	4303      	orrs	r3, r0
 80091e2:	3701      	adds	r7, #1
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	7839      	ldrb	r1, [r7, #0]
 80091e8:	4827      	ldr	r0, [pc, #156]	; (8009288 <_svfiprintf_r+0x1e4>)
 80091ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091ee:	2206      	movs	r2, #6
 80091f0:	1c7e      	adds	r6, r7, #1
 80091f2:	f7f6 fff5 	bl	80001e0 <memchr>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d038      	beq.n	800926c <_svfiprintf_r+0x1c8>
 80091fa:	4b24      	ldr	r3, [pc, #144]	; (800928c <_svfiprintf_r+0x1e8>)
 80091fc:	bb13      	cbnz	r3, 8009244 <_svfiprintf_r+0x1a0>
 80091fe:	9b03      	ldr	r3, [sp, #12]
 8009200:	3307      	adds	r3, #7
 8009202:	f023 0307 	bic.w	r3, r3, #7
 8009206:	3308      	adds	r3, #8
 8009208:	9303      	str	r3, [sp, #12]
 800920a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800920c:	444b      	add	r3, r9
 800920e:	9309      	str	r3, [sp, #36]	; 0x24
 8009210:	e76d      	b.n	80090ee <_svfiprintf_r+0x4a>
 8009212:	fb05 3202 	mla	r2, r5, r2, r3
 8009216:	2001      	movs	r0, #1
 8009218:	460f      	mov	r7, r1
 800921a:	e7a6      	b.n	800916a <_svfiprintf_r+0xc6>
 800921c:	2300      	movs	r3, #0
 800921e:	3701      	adds	r7, #1
 8009220:	9305      	str	r3, [sp, #20]
 8009222:	4619      	mov	r1, r3
 8009224:	250a      	movs	r5, #10
 8009226:	4638      	mov	r0, r7
 8009228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800922c:	3a30      	subs	r2, #48	; 0x30
 800922e:	2a09      	cmp	r2, #9
 8009230:	d903      	bls.n	800923a <_svfiprintf_r+0x196>
 8009232:	2b00      	cmp	r3, #0
 8009234:	d0c8      	beq.n	80091c8 <_svfiprintf_r+0x124>
 8009236:	9105      	str	r1, [sp, #20]
 8009238:	e7c6      	b.n	80091c8 <_svfiprintf_r+0x124>
 800923a:	fb05 2101 	mla	r1, r5, r1, r2
 800923e:	2301      	movs	r3, #1
 8009240:	4607      	mov	r7, r0
 8009242:	e7f0      	b.n	8009226 <_svfiprintf_r+0x182>
 8009244:	ab03      	add	r3, sp, #12
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4622      	mov	r2, r4
 800924a:	4b11      	ldr	r3, [pc, #68]	; (8009290 <_svfiprintf_r+0x1ec>)
 800924c:	a904      	add	r1, sp, #16
 800924e:	4640      	mov	r0, r8
 8009250:	f7fe f984 	bl	800755c <_printf_float>
 8009254:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009258:	4681      	mov	r9, r0
 800925a:	d1d6      	bne.n	800920a <_svfiprintf_r+0x166>
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	065b      	lsls	r3, r3, #25
 8009260:	f53f af35 	bmi.w	80090ce <_svfiprintf_r+0x2a>
 8009264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009266:	b01d      	add	sp, #116	; 0x74
 8009268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926c:	ab03      	add	r3, sp, #12
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	4622      	mov	r2, r4
 8009272:	4b07      	ldr	r3, [pc, #28]	; (8009290 <_svfiprintf_r+0x1ec>)
 8009274:	a904      	add	r1, sp, #16
 8009276:	4640      	mov	r0, r8
 8009278:	f7fe fc26 	bl	8007ac8 <_printf_i>
 800927c:	e7ea      	b.n	8009254 <_svfiprintf_r+0x1b0>
 800927e:	bf00      	nop
 8009280:	0807aa5c 	.word	0x0807aa5c
 8009284:	0807aa62 	.word	0x0807aa62
 8009288:	0807aa66 	.word	0x0807aa66
 800928c:	0800755d 	.word	0x0800755d
 8009290:	08008ff1 	.word	0x08008ff1

08009294 <__ascii_mbtowc>:
 8009294:	b082      	sub	sp, #8
 8009296:	b901      	cbnz	r1, 800929a <__ascii_mbtowc+0x6>
 8009298:	a901      	add	r1, sp, #4
 800929a:	b142      	cbz	r2, 80092ae <__ascii_mbtowc+0x1a>
 800929c:	b14b      	cbz	r3, 80092b2 <__ascii_mbtowc+0x1e>
 800929e:	7813      	ldrb	r3, [r2, #0]
 80092a0:	600b      	str	r3, [r1, #0]
 80092a2:	7812      	ldrb	r2, [r2, #0]
 80092a4:	1c10      	adds	r0, r2, #0
 80092a6:	bf18      	it	ne
 80092a8:	2001      	movne	r0, #1
 80092aa:	b002      	add	sp, #8
 80092ac:	4770      	bx	lr
 80092ae:	4610      	mov	r0, r2
 80092b0:	e7fb      	b.n	80092aa <__ascii_mbtowc+0x16>
 80092b2:	f06f 0001 	mvn.w	r0, #1
 80092b6:	e7f8      	b.n	80092aa <__ascii_mbtowc+0x16>

080092b8 <memmove>:
 80092b8:	4288      	cmp	r0, r1
 80092ba:	b510      	push	{r4, lr}
 80092bc:	eb01 0302 	add.w	r3, r1, r2
 80092c0:	d807      	bhi.n	80092d2 <memmove+0x1a>
 80092c2:	1e42      	subs	r2, r0, #1
 80092c4:	4299      	cmp	r1, r3
 80092c6:	d00a      	beq.n	80092de <memmove+0x26>
 80092c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80092d0:	e7f8      	b.n	80092c4 <memmove+0xc>
 80092d2:	4283      	cmp	r3, r0
 80092d4:	d9f5      	bls.n	80092c2 <memmove+0xa>
 80092d6:	1881      	adds	r1, r0, r2
 80092d8:	1ad2      	subs	r2, r2, r3
 80092da:	42d3      	cmn	r3, r2
 80092dc:	d100      	bne.n	80092e0 <memmove+0x28>
 80092de:	bd10      	pop	{r4, pc}
 80092e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80092e8:	e7f7      	b.n	80092da <memmove+0x22>

080092ea <_realloc_r>:
 80092ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ec:	4607      	mov	r7, r0
 80092ee:	4614      	mov	r4, r2
 80092f0:	460e      	mov	r6, r1
 80092f2:	b921      	cbnz	r1, 80092fe <_realloc_r+0x14>
 80092f4:	4611      	mov	r1, r2
 80092f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092fa:	f7fe b841 	b.w	8007380 <_malloc_r>
 80092fe:	b922      	cbnz	r2, 800930a <_realloc_r+0x20>
 8009300:	f7fd fff0 	bl	80072e4 <_free_r>
 8009304:	4625      	mov	r5, r4
 8009306:	4628      	mov	r0, r5
 8009308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930a:	f000 f821 	bl	8009350 <_malloc_usable_size_r>
 800930e:	42a0      	cmp	r0, r4
 8009310:	d20f      	bcs.n	8009332 <_realloc_r+0x48>
 8009312:	4621      	mov	r1, r4
 8009314:	4638      	mov	r0, r7
 8009316:	f7fe f833 	bl	8007380 <_malloc_r>
 800931a:	4605      	mov	r5, r0
 800931c:	2800      	cmp	r0, #0
 800931e:	d0f2      	beq.n	8009306 <_realloc_r+0x1c>
 8009320:	4631      	mov	r1, r6
 8009322:	4622      	mov	r2, r4
 8009324:	f7ff fb6e 	bl	8008a04 <memcpy>
 8009328:	4631      	mov	r1, r6
 800932a:	4638      	mov	r0, r7
 800932c:	f7fd ffda 	bl	80072e4 <_free_r>
 8009330:	e7e9      	b.n	8009306 <_realloc_r+0x1c>
 8009332:	4635      	mov	r5, r6
 8009334:	e7e7      	b.n	8009306 <_realloc_r+0x1c>

08009336 <__ascii_wctomb>:
 8009336:	b149      	cbz	r1, 800934c <__ascii_wctomb+0x16>
 8009338:	2aff      	cmp	r2, #255	; 0xff
 800933a:	bf85      	ittet	hi
 800933c:	238a      	movhi	r3, #138	; 0x8a
 800933e:	6003      	strhi	r3, [r0, #0]
 8009340:	700a      	strbls	r2, [r1, #0]
 8009342:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009346:	bf98      	it	ls
 8009348:	2001      	movls	r0, #1
 800934a:	4770      	bx	lr
 800934c:	4608      	mov	r0, r1
 800934e:	4770      	bx	lr

08009350 <_malloc_usable_size_r>:
 8009350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009354:	1f18      	subs	r0, r3, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	bfbc      	itt	lt
 800935a:	580b      	ldrlt	r3, [r1, r0]
 800935c:	18c0      	addlt	r0, r0, r3
 800935e:	4770      	bx	lr

08009360 <_init>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	bf00      	nop
 8009364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009366:	bc08      	pop	{r3}
 8009368:	469e      	mov	lr, r3
 800936a:	4770      	bx	lr

0800936c <_fini>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	bf00      	nop
 8009370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009372:	bc08      	pop	{r3}
 8009374:	469e      	mov	lr, r3
 8009376:	4770      	bx	lr
